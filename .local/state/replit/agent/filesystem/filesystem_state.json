{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"mysql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":320},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Lead Management CRM - React Version\n\n## Overview\n\nA comprehensive lead management system designed for a kitchen wrapping business. The application provides full-featured CRM capabilities including lead tracking, follow-up management, installation scheduling, and performance analytics. Built with a modern React frontend and Express.js backend, the system supports role-based access control and comprehensive business workflow management for sales teams.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript for type safety and modern development practices\n- **Routing**: Wouter for lightweight client-side routing with protected route implementation\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **UI Framework**: Hybrid approach combining Bootstrap 5 for layout/styling with shadcn/ui components for modern React patterns\n- **Styling**: Tailwind CSS with CSS custom properties for theming, integrated with Bootstrap for rapid prototyping\n- **Forms**: React Hook Form with Zod validation for type-safe form handling\n\n### Backend Architecture\n- **Framework**: Express.js with TypeScript for API development\n- **Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n- **Schema**: Shared TypeScript schemas between frontend and backend using Zod for validation\n- **Storage**: Abstracted storage interface with in-memory implementation for development (easily switchable to database)\n- **Session Management**: Simple session handling with localStorage (production-ready session management to be implemented)\n\n### Authentication System\n- **Authentication**: Username/password based authentication with role-based access control\n- **Roles**: Admin and Sales Rep roles with different permission levels\n- **Default Users**: Pre-configured users (kim, patrick, lina) with \"password\" as default password\n- **Session Persistence**: Client-side session storage with automatic session restoration\n\n### Data Models\n- **Users**: ID, username, password, role (admin/sales_rep)\n- **Leads**: Comprehensive lead tracking with fields for contact info, lead source, status, assigned team member, project value, follow-up dates, payment tracking, and installation details\n- **Lead Origins**: 14+ predefined sources including social media, referrals, and direct channels\n- **Lead Statuses**: Complete workflow states from \"New\" to \"Sold\" with intermediate stages\n- **Team Members**: Kim, Patrick, Lina for sales assignment\n- **Installers**: Angel, Brian, Luis for installation assignment\n\n### Business Logic Features\n- **Dashboard**: Real-time statistics, follow-up alerts, recent activity tracking\n- **Lead Management**: Full CRUD operations with inline editing, bulk operations, and advanced filtering\n- **Follow-up System**: Calendar-based scheduling with overdue/today/upcoming categorization\n- **Installation Tracking**: Payment milestone tracking (deposit/balance) and installation scheduling\n- **Reporting**: Performance analytics, conversion tracking, revenue reporting by team member\n- **Import/Export**: CSV handling for bulk operations and data portability\n\n### Development Tools\n- **Build System**: Vite for fast development and optimized production builds\n- **Type Safety**: End-to-end TypeScript with shared schema definitions\n- **Database Migrations**: Drizzle Kit for schema management and database migrations\n- **Development Environment**: Hot reload with Vite, integrated error handling, and Replit-specific tooling\n\n## External Dependencies\n\n### Database & ORM\n- **PostgreSQL**: Primary database using Neon serverless PostgreSQL\n- **Drizzle ORM**: Type-safe database operations with schema-first approach\n- **Connection**: `@neondatabase/serverless` for Neon database connectivity\n\n### UI & Styling\n- **Radix UI**: Comprehensive component library for accessible, unstyled components\n- **Bootstrap 5**: CSS framework for rapid layout and responsive design\n- **Font Awesome**: Icon library for consistent iconography\n- **Tailwind CSS**: Utility-first CSS framework for custom styling\n- **shadcn/ui**: Modern React component library built on Radix UI\n\n### State Management & API\n- **TanStack Query**: Server state management, caching, and synchronization\n- **React Hook Form**: Performant form library with built-in validation\n- **Zod**: Runtime type validation and schema definition\n\n### Development & Build\n- **Vite**: Fast build tool and development server\n- **ESBuild**: Fast JavaScript bundler for production builds\n- **TypeScript**: Type safety across frontend and backend\n- **Replit Integration**: Platform-specific plugins for development environment","size_bytes":4743},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/database-storage.ts":{"content":"import { type User, type InsertUser, type Lead, type InsertLead, type UpdateLead, type SampleBooklet, type InsertSampleBooklet, type UpdateSampleBooklet } from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { users, leads, sampleBooklets } from \"@shared/schema\";\nimport { eq, desc, gte, lte, and, sql } from \"drizzle-orm\";\nimport { randomUUID } from \"crypto\";\nimport type { IStorage } from \"./storage\";\n\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.username, username)).limit(1);\n    return result[0];\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const userWithId = { ...insertUser, id };\n    await db.insert(users).values(userWithId);\n    \n    const result = await db.select().from(users).where(eq(users.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getLeads(): Promise<Lead[]> {\n    return await db.select().from(leads).orderBy(desc(leads.date_created));\n  }\n\n  async getLeadsPaginated(page: number = 1, limit: number = 20, filters?: {\n    search?: string;\n    status?: string;\n    origin?: string;\n    assigned_to?: string;\n  }): Promise<{ leads: Lead[], total: number, page: number, limit: number, totalPages: number }> {\n    const offset = (page - 1) * limit;\n    \n    // Build where conditions based on filters\n    let whereConditions: any[] = [];\n    \n    if (filters?.search) {\n      const searchTerm = `%${filters.search}%`;\n      whereConditions.push(\n        // Using OR conditions for search across multiple fields\n        sql`(${leads.name} LIKE ${searchTerm} OR ${leads.email} LIKE ${searchTerm} OR ${leads.phone} LIKE ${searchTerm})`\n      );\n    }\n    \n    if (filters?.status && filters.status !== 'all') {\n      whereConditions.push(eq(leads.remarks, filters.status));\n    }\n    \n    if (filters?.origin && filters.origin !== 'all') {\n      whereConditions.push(eq(leads.lead_origin, filters.origin));\n    }\n    \n    if (filters?.assigned_to && filters.assigned_to !== 'all') {\n      whereConditions.push(eq(leads.assigned_to, filters.assigned_to));\n    }\n\n    // Combine all where conditions\n    const whereClause = whereConditions.length > 0 ? and(...whereConditions) : undefined;\n\n    // Get total count for pagination\n    const countQuery = whereClause \n      ? db.select({ count: sql<number>`count(*)` }).from(leads).where(whereClause)\n      : db.select({ count: sql<number>`count(*)` }).from(leads);\n    \n    const [{ count: total }] = await countQuery;\n\n    // Get paginated results\n    const leadsQuery = db.select().from(leads)\n      .orderBy(desc(leads.date_created))\n      .limit(limit)\n      .offset(offset);\n\n    const paginatedLeads = whereClause \n      ? await leadsQuery.where(whereClause)\n      : await leadsQuery;\n\n    const totalPages = Math.ceil(total / limit);\n\n    return {\n      leads: paginatedLeads,\n      total,\n      page,\n      limit,\n      totalPages\n    };\n  }\n\n  async getLead(id: string): Promise<Lead | undefined> {\n    const result = await db.select().from(leads).where(eq(leads.id, id)).limit(1);\n    return result[0];\n  }\n\n  async createLead(insertLead: InsertLead): Promise<Lead> {\n    const id = randomUUID();\n    const leadWithId = { ...insertLead, id };\n    await db.insert(leads).values(leadWithId);\n    \n    const result = await db.select().from(leads).where(eq(leads.id, id)).limit(1);\n    return result[0];\n  }\n\n  async updateLead(id: string, updates: UpdateLead): Promise<Lead | undefined> {\n    // Convert string dates to Date objects if needed\n    const processedUpdates: any = { ...updates };\n    if (typeof processedUpdates.next_followup_date === 'string') {\n      processedUpdates.next_followup_date = new Date(processedUpdates.next_followup_date);\n    }\n    if (typeof processedUpdates.installation_date === 'string') {\n      processedUpdates.installation_date = new Date(processedUpdates.installation_date);\n    }\n    \n    await db.update(leads).set(processedUpdates).where(eq(leads.id, id));\n    \n    const result = await db.select().from(leads).where(eq(leads.id, id)).limit(1);\n    return result[0];\n  }\n\n  async deleteLead(id: string): Promise<boolean> {\n    try {\n      const result = await db.delete(leads).where(eq(leads.id, id));\n      return (result as any).affectedRows > 0;\n    } catch (error) {\n      console.error('Error deleting lead:', error);\n      return false;\n    }\n  }\n\n  async getLeadsByAssignee(assignee: string): Promise<Lead[]> {\n    return await db.select().from(leads).where(eq(leads.assigned_to, assignee));\n  }\n\n  async getLeadsWithFollowupsDue(date: Date): Promise<Lead[]> {\n    const startOfDay = new Date(date);\n    startOfDay.setHours(0, 0, 0, 0);\n    const endOfDay = new Date(date);\n    endOfDay.setHours(23, 59, 59, 999);\n\n    return await db.select().from(leads).where(\n      and(\n        gte(leads.next_followup_date, startOfDay),\n        lte(leads.next_followup_date, endOfDay)\n      )\n    );\n  }\n\n  async getLeadsCreatedAfter(date: Date): Promise<Lead[]> {\n    return await db.select().from(leads).where(gte(leads.date_created, date));\n  }\n\n  // Sample Booklets methods\n  async getSampleBooklets(): Promise<SampleBooklet[]> {\n    return await db.select().from(sampleBooklets).orderBy(desc(sampleBooklets.date_ordered));\n  }\n\n  async getSampleBooklet(id: string): Promise<SampleBooklet | undefined> {\n    const result = await db.select().from(sampleBooklets).where(eq(sampleBooklets.id, id)).limit(1);\n    return result[0];\n  }\n\n  async createSampleBooklet(insertBooklet: InsertSampleBooklet): Promise<SampleBooklet> {\n    const id = randomUUID();\n    const bookletWithId = { ...insertBooklet, id };\n    await db.insert(sampleBooklets).values(bookletWithId);\n    \n    const result = await db.select().from(sampleBooklets).where(eq(sampleBooklets.id, id)).limit(1);\n    return result[0];\n  }\n\n  async updateSampleBooklet(id: string, updates: UpdateSampleBooklet): Promise<SampleBooklet | undefined> {\n    await db.update(sampleBooklets).set(updates).where(eq(sampleBooklets.id, id));\n    \n    const result = await db.select().from(sampleBooklets).where(eq(sampleBooklets.id, id)).limit(1);\n    return result[0];\n  }\n\n  async deleteSampleBooklet(id: string): Promise<boolean> {\n    const result = await db.delete(sampleBooklets).where(eq(sampleBooklets.id, id));\n    return (result as any).affectedRows > 0;\n  }\n\n  async getSampleBookletsByStatus(status: string): Promise<SampleBooklet[]> {\n    return await db.select().from(sampleBooklets).where(eq(sampleBooklets.status, status));\n  }\n}","size_bytes":6770},"server/db.ts":{"content":"import { drizzle } from 'drizzle-orm/postgres-js';\nimport postgres from 'postgres';\nimport * as schema from \"@shared/schema\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL environment variable is required\");\n}\n\nconst queryClient = postgres(process.env.DATABASE_URL);\nexport const db = drizzle(queryClient, { schema });\n","size_bytes":339},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport dotenv from \"dotenv\";\n\n// Load environment variables\ndotenv.config();\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2143},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertLeadSchema, updateLeadSchema, insertSampleBookletSchema, updateSampleBookletSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { emailService } from \"./email-service\";\n\nconst loginSchema = z.object({\n  username: z.string(),\n  password: z.string(),\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  \n  // Auth endpoints\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { username, password } = loginSchema.parse(req.body);\n      const user = await storage.getUserByUsername(username.toLowerCase());\n      \n      if (!user || user.password !== password) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      // Simple session - in production use proper session management\n      res.json({ \n        user: { \n          id: user.id, \n          username: user.username, \n          role: user.role \n        } \n      });\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid request data\" });\n    }\n  });\n\n  // Dashboard stats\n  app.get(\"/api/dashboard/stats\", async (req, res) => {\n    try {\n      const allLeads = await storage.getLeads();\n      const today = new Date();\n      const weekAgo = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);\n      \n      const totalLeads = allLeads.length;\n      const soldLeads = allLeads.filter(lead => lead.remarks === \"sold\").length;\n      const todayFollowups = (await storage.getLeadsWithFollowupsDue(today)).length;\n      const newToday = (await storage.getLeadsCreatedAfter(weekAgo)).length;\n\n      res.json({\n        totalLeads,\n        soldLeads,\n        todayFollowups,\n        newToday\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch dashboard stats\" });\n    }\n  });\n\n  // Lead endpoints\n  app.get(\"/api/leads\", async (req, res) => {\n    try {\n      const { status, origin, assigned_to, search, page, limit } = req.query;\n      \n      // Parse pagination parameters\n      const pageNum = parseInt(page as string) || 1;\n      const limitNum = parseInt(limit as string) || 20;\n      \n      // Prepare filters\n      const filters = {\n        search: search as string,\n        status: status as string,\n        origin: origin as string,\n        assigned_to: assigned_to as string\n      };\n      \n      // Use the new paginated method\n      const result = await storage.getLeadsPaginated(pageNum, limitNum, filters);\n      \n      res.json(result);\n    } catch (error) {\n      console.error('Error fetching leads:', error);\n      res.status(500).json({ message: \"Failed to fetch leads\" });\n    }\n  });\n\n  app.get(\"/api/leads/:id\", async (req, res) => {\n    try {\n      const lead = await storage.getLead(req.params.id);\n      if (!lead) {\n        return res.status(404).json({ message: \"Lead not found\" });\n      }\n      res.json(lead);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch lead\" });\n    }\n  });\n\n  app.post(\"/api/leads\", async (req, res) => {\n    try {\n      const leadData = insertLeadSchema.parse(req.body);\n      const lead = await storage.createLead(leadData);\n      res.status(201).json(lead);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid lead data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create lead\" });\n    }\n  });\n\n  app.put(\"/api/leads/:id\", async (req, res) => {\n    try {\n      const updates = updateLeadSchema.parse(req.body);\n      const lead = await storage.updateLead(req.params.id, updates);\n      \n      if (!lead) {\n        return res.status(404).json({ message: \"Lead not found\" });\n      }\n      \n      res.json(lead);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        console.error(\"Lead update validation errors:\", error.errors);\n        return res.status(400).json({ message: \"Invalid lead data\", errors: error.errors });\n      }\n      console.error(\"Lead update error:\", error);\n      res.status(500).json({ message: \"Failed to update lead\" });\n    }\n  });\n\n  app.delete(\"/api/leads/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteLead(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Lead not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete lead\" });\n    }\n  });\n\n  // Follow-up endpoints\n  app.get(\"/api/followups\", async (req, res) => {\n    try {\n      const today = new Date();\n      const yesterday = new Date(today.getTime() - 24 * 60 * 60 * 1000);\n      \n      const allLeads = await storage.getLeads();\n      const overdue = allLeads.filter(lead => {\n        if (!lead.next_followup_date) return false;\n        return new Date(lead.next_followup_date) < yesterday;\n      });\n\n      const dueToday = await storage.getLeadsWithFollowupsDue(today);\n      \n      const upcoming = allLeads.filter(lead => {\n        if (!lead.next_followup_date) return false;\n        return new Date(lead.next_followup_date) > today;\n      }).slice(0, 10); // Limit to next 10\n\n      res.json({\n        overdue,\n        dueToday,\n        upcoming\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch follow-ups\" });\n    }\n  });\n\n  // Installation endpoints\n  app.get(\"/api/installations\", async (req, res) => {\n    try {\n      const allLeads = await storage.getLeads();\n      const installations = allLeads.filter(lead => \n        lead.remarks === \"sold\" && lead.installation_date\n      );\n\n      res.json(installations);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch installations\" });\n    }\n  });\n\n  // Sample Booklets endpoints\n  app.get(\"/api/sample-booklets\", async (req, res) => {\n    try {\n      const { status } = req.query;\n      let booklets = await storage.getSampleBooklets();\n\n      if (status) {\n        booklets = await storage.getSampleBookletsByStatus(status as string);\n      }\n\n      res.json(booklets);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch sample booklets\" });\n    }\n  });\n\n  app.get(\"/api/sample-booklets/:id\", async (req, res) => {\n    try {\n      const booklet = await storage.getSampleBooklet(req.params.id);\n      if (!booklet) {\n        return res.status(404).json({ message: \"Sample booklet not found\" });\n      }\n      res.json(booklet);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch sample booklet\" });\n    }\n  });\n\n  app.post(\"/api/sample-booklets\", async (req, res) => {\n    try {\n      const bookletData = insertSampleBookletSchema.parse(req.body);\n      const booklet = await storage.createSampleBooklet(bookletData);\n      res.status(201).json(booklet);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid booklet data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create sample booklet\" });\n    }\n  });\n\n  app.put(\"/api/sample-booklets/:id\", async (req, res) => {\n    try {\n      const updates = updateSampleBookletSchema.parse(req.body);\n      const booklet = await storage.updateSampleBooklet(req.params.id, updates);\n      \n      if (!booklet) {\n        return res.status(404).json({ message: \"Sample booklet not found\" });\n      }\n      \n      res.json(booklet);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid booklet data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update sample booklet\" });\n    }\n  });\n\n  app.delete(\"/api/sample-booklets/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteSampleBooklet(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Sample booklet not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete sample booklet\" });\n    }\n  });\n\n  // Sample Booklets dashboard stats\n  app.get(\"/api/sample-booklets/stats/dashboard\", async (req, res) => {\n    try {\n      const allBooklets = await storage.getSampleBooklets();\n      const pending = allBooklets.filter(b => b.status === \"pending\").length;\n      const shipped = allBooklets.filter(b => b.status === \"shipped\").length;\n      const delivered = allBooklets.filter(b => b.status === \"delivered\").length;\n      const thisWeek = allBooklets.filter(b => {\n        const weekAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);\n        return new Date(b.date_ordered) > weekAgo;\n      }).length;\n\n      res.json({\n        totalOrders: allBooklets.length,\n        pendingOrders: pending,\n        shippedOrders: shipped,\n        deliveredOrders: delivered,\n        thisWeekOrders: thisWeek\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch booklet stats\" });\n    }\n  });\n\n  // Advanced Reports Analytics API\n  app.get(\"/api/reports/analytics\", async (req, res) => {\n    try {\n      const { year, month } = req.query;\n      const allLeads = await storage.getLeads();\n      \n      // Filter leads by year and optionally by month\n      let filteredLeads = allLeads.filter(lead => {\n        const createdDate = new Date(lead.date_created);\n        const leadYear = createdDate.getFullYear();\n        \n        if (year && leadYear !== parseInt(year as string)) {\n          return false;\n        }\n        \n        if (month) {\n          const leadMonth = createdDate.getMonth() + 1; // JS months are 0-indexed\n          if (leadMonth !== parseInt(month as string)) {\n            return false;\n          }\n        }\n        \n        return true;\n      });\n      \n      // Executive Dashboard Metrics\n      const totalLeads = filteredLeads.length;\n      const soldLeads = filteredLeads.filter(lead => lead.remarks === 'sold');\n      const soldCount = soldLeads.length;\n      const conversionRate = totalLeads > 0 ? ((soldCount / totalLeads) * 100) : 0;\n      \n      const totalRevenue = soldLeads.reduce((sum, lead) => {\n        return sum + (parseFloat(lead.project_amount || '0'));\n      }, 0);\n      \n      const averageDealSize = soldCount > 0 ? (totalRevenue / soldCount) : 0;\n      \n      // Lead Origin Performance\n      const originStats = filteredLeads.reduce((acc, lead) => {\n        const origin = lead.lead_origin;\n        if (!acc[origin]) {\n          acc[origin] = { total: 0, sold: 0, revenue: 0 };\n        }\n        acc[origin].total += 1;\n        if (lead.remarks === 'sold') {\n          acc[origin].sold += 1;\n          acc[origin].revenue += parseFloat(lead.project_amount || '0');\n        }\n        return acc;\n      }, {} as Record<string, { total: number; sold: number; revenue: number }>);\n      \n      const leadOriginPerformance = Object.entries(originStats).map(([origin, stats]) => ({\n        origin,\n        totalLeads: stats.total,\n        soldLeads: stats.sold,\n        conversionRate: stats.total > 0 ? ((stats.sold / stats.total) * 100) : 0,\n        totalRevenue: stats.revenue,\n        averageDealSize: stats.sold > 0 ? (stats.revenue / stats.sold) : 0\n      })).sort((a, b) => b.totalRevenue - a.totalRevenue);\n      \n      // Team Performance Metrics\n      const teamStats = filteredLeads.reduce((acc, lead) => {\n        const member = lead.assigned_to;\n        if (!acc[member]) {\n          acc[member] = { total: 0, sold: 0, revenue: 0 };\n        }\n        acc[member].total += 1;\n        if (lead.remarks === 'sold') {\n          acc[member].sold += 1;\n          acc[member].revenue += parseFloat(lead.project_amount || '0');\n        }\n        return acc;\n      }, {} as Record<string, { total: number; sold: number; revenue: number }>);\n      \n      const teamPerformance = Object.entries(teamStats).map(([member, stats]) => ({\n        member,\n        totalLeads: stats.total,\n        soldLeads: stats.sold,\n        conversionRate: stats.total > 0 ? ((stats.sold / stats.total) * 100) : 0,\n        totalRevenue: stats.revenue,\n        averageDealSize: stats.sold > 0 ? (stats.revenue / stats.sold) : 0\n      })).sort((a, b) => b.totalRevenue - a.totalRevenue);\n      \n      // Monthly Breakdown (only if no month filter is applied)\n      let monthlyBreakdown: Array<{\n        month: number;\n        monthName: string;\n        totalLeads: number;\n        soldLeads: number;\n        conversionRate: number;\n        totalRevenue: number;\n        averageDealSize: number;\n      }> = [];\n      if (!month && year) {\n        const yearLeads = allLeads.filter(lead => {\n          const leadYear = new Date(lead.date_created).getFullYear();\n          return leadYear === parseInt(year as string);\n        });\n        \n        monthlyBreakdown = Array.from({ length: 12 }, (_, monthIndex) => {\n          const monthLeads = yearLeads.filter(lead => {\n            const leadMonth = new Date(lead.date_created).getMonth();\n            return leadMonth === monthIndex;\n          });\n          \n          const monthSoldLeads = monthLeads.filter(lead => lead.remarks === 'sold');\n          const monthRevenue = monthSoldLeads.reduce((sum, lead) => {\n            return sum + (parseFloat(lead.project_amount || '0'));\n          }, 0);\n          \n          return {\n            month: monthIndex + 1,\n            monthName: new Date(2024, monthIndex, 1).toLocaleString('default', { month: 'long' }),\n            totalLeads: monthLeads.length,\n            soldLeads: monthSoldLeads.length,\n            conversionRate: monthLeads.length > 0 ? ((monthSoldLeads.length / monthLeads.length) * 100) : 0,\n            totalRevenue: monthRevenue,\n            averageDealSize: monthSoldLeads.length > 0 ? (monthRevenue / monthSoldLeads.length) : 0\n          };\n        });\n      }\n      \n      res.json({\n        executiveDashboard: {\n          totalLeads,\n          soldLeads: soldCount,\n          conversionRate,\n          totalRevenue,\n          averageDealSize\n        },\n        leadOriginPerformance,\n        teamPerformance,\n        monthlyBreakdown,\n        filterInfo: {\n          year: year ? parseInt(year as string) : null,\n          month: month ? parseInt(month as string) : null,\n          period: year ? (month ? `${year}-${String(month).padStart(2, '0')}` : year) : 'all-time'\n        }\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch analytics data\" });\n    }\n  });\n  \n  // Available years for filtering\n  app.get(\"/api/reports/years\", async (req, res) => {\n    try {\n      const allLeads = await storage.getLeads();\n      const yearSet = new Set(allLeads.map(lead => new Date(lead.date_created).getFullYear()));\n      const years = Array.from(yearSet).sort((a, b) => b - a); // Most recent first\n      \n      res.json({ availableYears: years });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch available years\" });\n    }\n  });\n  \n  // Installation Email Notification API\n  app.post(\"/api/installations/email\", async (req, res) => {\n    try {\n      const { installationId, type, customMessage } = req.body;\n      \n      if (!installationId || !type) {\n        return res.status(400).json({ message: \"Installation ID and email type are required\" });\n      }\n      \n      if (!['client', 'installer'].includes(type)) {\n        return res.status(400).json({ message: \"Email type must be 'client' or 'installer'\" });\n      }\n      \n      const installation = await storage.getLead(installationId);\n      if (!installation) {\n        return res.status(404).json({ message: \"Installation not found\" });\n      }\n      \n      if (!installation.installation_date) {\n        return res.status(400).json({ message: \"Installation date not set\" });\n      }\n      \n      // Format installation date\n      const installDate = new Date(installation.installation_date);\n      const formattedDate = installDate.toLocaleDateString('en-US', {\n        weekday: 'long',\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric'\n      });\n      \n      let emailContent = '';\n      let subject = '';\n      let recipient = '';\n      \n      if (type === 'client') {\n        if (!installation.email) {\n          return res.status(400).json({ message: \"Client email not available\" });\n        }\n        \n        recipient = installation.email;\n        subject = `WMK Kitchen Installation Confirmation - ${formattedDate}`;\n        emailContent = `\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>WMK Kitchen Solutions - Installation Confirmation</title>\n</head>\n<body style=\"margin: 0; padding: 20px; font-family: Arial, sans-serif; line-height: 1.6; color: #333; background-color: #f8f9fa;\">\n    \n    <!-- Main Container Table -->\n    <table width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\" style=\"max-width: 600px; margin: 0 auto; background-color: #ffffff; border: 1px solid #e9ecef;\">\n        \n        <!-- Logo Header -->\n        <tr>\n            <td style=\"padding: 30px 20px; text-align: center; background-color: #ffffff; border-bottom: 1px solid #e9ecef;\">\n                <h1 style=\"margin: 0; font-size: 36px; font-weight: bold; color: #2c3e50;\">\n                    WMK<span style=\"color: #007bff; font-weight: bold;\">Kitchen</span>\n                </h1>\n                <div style=\"margin: 10px 0 0; font-size: 12px; color: #6c757d; text-transform: uppercase; letter-spacing: 1px;\">\n                    Kitchen Transformation Specialists\n                </div>\n            </td>\n        </tr>\n        \n        <!-- Blue Banner -->\n        <tr>\n            <td style=\"padding: 20px; text-align: center; background-color: #007bff; color: white; font-size: 18px; font-weight: bold;\">\n                🔧 Installation Confirmed!\n            </td>\n        </tr>\n        \n        <!-- Main Content -->\n        <tr>\n            <td style=\"padding: 30px 20px;\">\n                \n                <!-- Greeting -->\n                <p style=\"font-size: 16px; color: #495057; margin-bottom: 25px; line-height: 1.7;\">\n                    Dear <strong>${installation.name}</strong>,<br><br>\n                    We are pleased to confirm your kitchen installation appointment with <strong>WMK Kitchen Solutions</strong>. Our professional team is ready to transform your kitchen!\n                </p>\n                \n                <!-- Installation Header -->\n                <table width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"20\" style=\"background-color: #f8f9fa; border-left: 4px solid #007bff; margin: 20px 0;\">\n                    <tr>\n                        <td>\n                            <h3 style=\"margin: 0 0 5px; color: #2c3e50; font-size: 18px; font-weight: 600;\">\n                                Installation Appointment\n                            </h3>\n                            <div style=\"color: #6c757d; font-size: 14px;\">Scheduled for ${formattedDate}</div>\n                        </td>\n                    </tr>\n                </table>\n                \n                <!-- Installation Details Table -->\n                <table width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\" style=\"margin: 25px 0; border: 1px solid #e9ecef;\">\n                    <thead>\n                        <tr style=\"background-color: #2c3e50; color: white;\">\n                            <th style=\"padding: 15px; text-align: left; font-weight: 600; font-size: 14px;\">Details</th>\n                            <th style=\"padding: 15px; text-align: right; font-weight: 600; font-size: 14px;\">Information</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr>\n                            <td style=\"padding: 15px; border-bottom: 1px solid #f1f3f4; color: #495057;\">\n                                <strong>📅 Installation Date</strong>\n                            </td>\n                            <td style=\"padding: 15px; border-bottom: 1px solid #f1f3f4; color: #495057; text-align: right;\">\n                                ${formattedDate} at 9:00 AM\n                            </td>\n                        </tr>\n                        <tr>\n                            <td style=\"padding: 15px; border-bottom: 1px solid #f1f3f4; color: #495057;\">\n                                <strong>👤 Customer</strong>\n                            </td>\n                            <td style=\"padding: 15px; border-bottom: 1px solid #f1f3f4; color: #495057; text-align: right;\">\n                                ${installation.name}\n                            </td>\n                        </tr>\n                        <tr>\n                            <td style=\"padding: 15px; border-bottom: 1px solid #f1f3f4; color: #495057;\">\n                                <strong>📞 Phone</strong>\n                            </td>\n                            <td style=\"padding: 15px; border-bottom: 1px solid #f1f3f4; color: #495057; text-align: right;\">\n                                ${installation.phone}\n                            </td>\n                        </tr>\n                        <tr>\n                            <td style=\"padding: 15px; border-bottom: 1px solid #f1f3f4; color: #495057;\">\n                                <strong>💰 Project Value</strong>\n                            </td>\n                            <td style=\"padding: 15px; border-bottom: 1px solid #f1f3f4; color: #495057; text-align: right;\">\n                                ${installation.project_amount ? `$${parseInt(installation.project_amount).toLocaleString()}` : 'Contact office for details'}\n                            </td>\n                        </tr>\n                        <tr style=\"background-color: #f8f9fa;\">\n                            <td style=\"padding: 15px; color: #2c3e50; font-weight: 600; font-size: 16px;\">\n                                <strong>🔧 Lead Installer</strong>\n                            </td>\n                            <td style=\"padding: 15px; color: #2c3e50; font-weight: 600; font-size: 16px; text-align: right;\">\n                                <strong>${installation.assigned_installer ? installation.assigned_installer.charAt(0).toUpperCase() + installation.assigned_installer.slice(1) : 'To be assigned'}</strong>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n                \n                <!-- What to Expect Section -->\n                <table width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"30\" style=\"background-color: #007bff; color: white; margin: 30px 0;\">\n                    <tr>\n                        <td style=\"text-align: center;\">\n                            <h3 style=\"margin: 0 0 15px; font-size: 20px; font-weight: 600;\">\n                                🏠 What to Expect\n                            </h3>\n                            <table width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"10\" style=\"background-color: rgba(255, 255, 255, 0.1); margin: 20px 0;\">\n                                <tr>\n                                    <td style=\"text-align: left; padding: 8px; color: white;\">✓ Team arrives promptly at 9:00 AM</td>\n                                </tr>\n                                <tr>\n                                    <td style=\"text-align: left; padding: 8px; color: white;\">✓ Installation takes 4-6 hours typically</td>\n                                </tr>\n                                <tr>\n                                    <td style=\"text-align: left; padding: 8px; color: white;\">✓ Final walkthrough and quality inspection</td>\n                                </tr>\n                                <tr>\n                                    <td style=\"text-align: left; padding: 8px; color: white;\">✓ All materials and tools provided</td>\n                                </tr>\n                            </table>\n                        </td>\n                    </tr>\n                </table>\n                \n                <!-- Preparation Checklist -->\n                <table width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"25\" style=\"background-color: #28a745; color: white; margin: 30px 0;\">\n                    <tr>\n                        <td style=\"text-align: center;\">\n                            <h3 style=\"margin: 0 0 15px; font-size: 20px; font-weight: 600;\">\n                                📋 Preparation Checklist\n                            </h3>\n                            <table width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"8\" style=\"background-color: rgba(255, 255, 255, 0.1); margin: 15px 0;\">\n                                <tr>\n                                    <td style=\"text-align: left; color: white;\">□ Clear work area of personal items</td>\n                                </tr>\n                                <tr>\n                                    <td style=\"text-align: left; color: white;\">□ Ensure easy access to installation space</td>\n                                </tr>\n                                <tr>\n                                    <td style=\"text-align: left; color: white;\">□ Someone present during installation</td>\n                                </tr>\n                                <tr>\n                                    <td style=\"text-align: left; color: white;\">□ Secure pets away from work area</td>\n                                </tr>\n                                <tr>\n                                    <td style=\"text-align: left; color: white;\">□ Have final payment ready if balance due</td>\n                                </tr>\n                            </table>\n                        </td>\n                    </tr>\n                </table>\n\n                ${customMessage ? `\n                <!-- Additional Notes -->\n                <table width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"20\" style=\"background-color: #f8f9fa; border-left: 4px solid #ffc107; margin: 20px 0;\">\n                    <tr>\n                        <td>\n                            <h3 style=\"margin: 0 0 15px; color: #2c3e50; font-size: 16px; font-weight: 600;\">\n                                📝 Additional Notes\n                            </h3>\n                            <p style=\"margin: 0; color: #495057; line-height: 1.6;\">\n                                ${customMessage}\n                            </p>\n                        </td>\n                    </tr>\n                </table>\n                ` : ''}\n                \n                <!-- Contact Section -->\n                <table width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"25\" style=\"background-color: #343a40; color: white; margin: 30px 0;\">\n                    <tr>\n                        <td style=\"text-align: center;\">\n                            <p style=\"margin: 0 0 15px; font-weight: bold; font-size: 16px;\">\n                                💡 Questions or need to reschedule?\n                            </p>\n                            <p style=\"margin: 0; font-size: 14px;\">\n                                Contact us at least 48 hours in advance for any changes.\n                            </p>\n                        </td>\n                    </tr>\n                </table>\n                \n            </td>\n        </tr>\n        \n        <!-- Footer -->\n        <tr>\n            <td style=\"background-color: #2c3e50; color: #ecf0f1; text-align: center; padding: 30px 20px;\">\n                <h4 style=\"margin: 0 0 15px; color: white; font-size: 18px; font-weight: 600;\">\n                    WMK Kitchen Solutions\n                </h4>\n                <p style=\"margin: 8px 0;\">Questions about your installation? We're here to help!</p>\n                <p style=\"margin: 8px 0;\"><strong>📞 Phone:</strong> (XXX) XXX-XXXX</p>\n                <p style=\"margin: 8px 0;\">\n                    <strong>📧 Email:</strong> \n                    <a href=\"mailto:installations@wmk-kitchen.com\" style=\"color: #007bff; text-decoration: none;\">\n                        installations@wmk-kitchen.com\n                    </a>\n                </p>\n                <p style=\"margin: 8px 0;\">\n                    <strong>🌐 Website:</strong> \n                    <a href=\"https://wmk-kitchen.com\" style=\"color: #007bff; text-decoration: none;\">\n                        www.wmk-kitchen.com\n                    </a>\n                </p>\n                <p style=\"margin-top: 20px; font-size: 13px; color: #bdc3c7;\">\n                    © 2025 WMK Kitchen Solutions. All rights reserved.<br>\n                    Quality • Craftsmanship • Excellence\n                </p>\n            </td>\n        </tr>\n        \n    </table>\n    \n</body>\n</html>\n        `.trim();\n        \n      } else if (type === 'installer') {\n        if (!installation.assigned_installer) {\n          return res.status(400).json({ message: \"No installer assigned\" });\n        }\n        \n        // For demo purposes, using a generic installer email\n        // In production, you'd have installer email addresses in your system\n        const installerEmails: Record<string, string> = {\n          'angel': 'angel@company.com',\n          'brian': 'brian@company.com', \n          'luis': 'luis@company.com'\n        };\n        \n        recipient = installerEmails[installation.assigned_installer] || 'installer@company.com';\n        subject = `WMK Installation Assignment - ${formattedDate} - ${installation.name}`;\n        emailContent = `\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>WMK Kitchen Solutions - Installation Assignment</title>\n</head>\n<body style=\"margin: 0; padding: 20px; font-family: Arial, sans-serif; line-height: 1.6; color: #333; background-color: #f8f9fa;\">\n    \n    <!-- Main Container Table -->\n    <table width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\" style=\"max-width: 600px; margin: 0 auto; background-color: #ffffff; border: 1px solid #e9ecef;\">\n        \n        <!-- Logo Header -->\n        <tr>\n            <td style=\"padding: 30px 20px; text-align: center; background-color: #ffffff; border-bottom: 1px solid #e9ecef;\">\n                <h1 style=\"margin: 0; font-size: 36px; font-weight: bold; color: #2c3e50;\">\n                    WMK<span style=\"color: #fd7e14; font-weight: bold;\">Kitchen</span>\n                </h1>\n                <div style=\"margin: 10px 0 0; font-size: 12px; color: #6c757d; text-transform: uppercase; letter-spacing: 1px;\">\n                    Professional Installation Team\n                </div>\n            </td>\n        </tr>\n        \n        <!-- Orange Banner -->\n        <tr>\n            <td style=\"padding: 20px; text-align: center; background-color: #fd7e14; color: white; font-size: 18px; font-weight: bold;\">\n                🔧 New Installation Assignment\n            </td>\n        </tr>\n        \n        <!-- Main Content -->\n        <tr>\n            <td style=\"padding: 30px 20px;\">\n                \n                <!-- Greeting -->\n                <p style=\"font-size: 16px; color: #495057; margin-bottom: 25px; line-height: 1.7;\">\n                    Hi <strong>${installation.assigned_installer?.charAt(0).toUpperCase()}${installation.assigned_installer?.slice(1)}</strong>,<br><br>\n                    You have been assigned a new kitchen installation for <strong>WMK Kitchen Solutions</strong>. Please review the details below and prepare accordingly.\n                </p>\n                \n                <!-- Assignment Header -->\n                <table width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"20\" style=\"background-color: #f8f9fa; border-left: 4px solid #fd7e14; margin: 20px 0;\">\n                    <tr>\n                        <td>\n                            <h3 style=\"margin: 0 0 5px; color: #2c3e50; font-size: 18px; font-weight: 600;\">\n                                Installation Assignment\n                            </h3>\n                            <div style=\"color: #6c757d; font-size: 14px;\">Scheduled for ${formattedDate}</div>\n                        </td>\n                    </tr>\n                </table>\n                \n                <!-- Job Details Table -->\n                <table width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\" style=\"margin: 25px 0; border: 1px solid #e9ecef;\">\n                    <thead>\n                        <tr style=\"background-color: #2c3e50; color: white;\">\n                            <th style=\"padding: 15px; text-align: left; font-weight: 600; font-size: 14px;\">Job Details</th>\n                            <th style=\"padding: 15px; text-align: right; font-weight: 600; font-size: 14px;\">Information</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr>\n                            <td style=\"padding: 15px; border-bottom: 1px solid #f1f3f4; color: #495057;\">\n                                <strong>📅 Installation Date</strong>\n                            </td>\n                            <td style=\"padding: 15px; border-bottom: 1px solid #f1f3f4; color: #495057; text-align: right;\">\n                                ${formattedDate} at 9:00 AM\n                            </td>\n                        </tr>\n                        <tr>\n                            <td style=\"padding: 15px; border-bottom: 1px solid #f1f3f4; color: #495057;\">\n                                <strong>👤 Customer</strong>\n                            </td>\n                            <td style=\"padding: 15px; border-bottom: 1px solid #f1f3f4; color: #495057; text-align: right;\">\n                                ${installation.name}\n                            </td>\n                        </tr>\n                        <tr>\n                            <td style=\"padding: 15px; border-bottom: 1px solid #f1f3f4; color: #495057;\">\n                                <strong>📞 Phone</strong>\n                            </td>\n                            <td style=\"padding: 15px; border-bottom: 1px solid #f1f3f4; color: #495057; text-align: right;\">\n                                ${installation.phone}\n                            </td>\n                        </tr>\n                        <tr>\n                            <td style=\"padding: 15px; border-bottom: 1px solid #f1f3f4; color: #495057;\">\n                                <strong>📧 Email</strong>\n                            </td>\n                            <td style=\"padding: 15px; border-bottom: 1px solid #f1f3f4; color: #495057; text-align: right;\">\n                                ${installation.email || 'Not provided'}\n                            </td>\n                        </tr>\n                        <tr>\n                            <td style=\"padding: 15px; border-bottom: 1px solid #f1f3f4; color: #495057;\">\n                                <strong>💰 Project Value</strong>\n                            </td>\n                            <td style=\"padding: 15px; border-bottom: 1px solid #f1f3f4; color: #495057; text-align: right;\">\n                                ${installation.project_amount ? `$${parseInt(installation.project_amount).toLocaleString()}` : 'Contact office'}\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n                \n                <!-- Payment Status -->\n                <table width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\" style=\"margin: 25px 0; border: 1px solid #e9ecef;\">\n                    <thead>\n                        <tr style=\"background-color: #28a745; color: white;\">\n                            <th style=\"padding: 15px; text-align: left; font-weight: 600; font-size: 14px;\">Payment Item</th>\n                            <th style=\"padding: 15px; text-align: center; font-weight: 600; font-size: 14px;\">Status</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr>\n                            <td style=\"padding: 15px; border-bottom: 1px solid #f1f3f4; color: #495057;\">\n                                <strong>Deposit Payment</strong>\n                            </td>\n                            <td style=\"padding: 15px; border-bottom: 1px solid #f1f3f4; text-align: center;\">\n                                ${installation.deposit_paid ? '<span style=\"color: #28a745; font-weight: bold;\">✅ PAID</span>' : '<span style=\"color: #dc3545; font-weight: bold;\">⚠️ PENDING</span>'}\n                            </td>\n                        </tr>\n                        <tr>\n                            <td style=\"padding: 15px; border-bottom: 1px solid #f1f3f4; color: #495057;\">\n                                <strong>Final Balance</strong>\n                            </td>\n                            <td style=\"padding: 15px; border-bottom: 1px solid #f1f3f4; text-align: center;\">\n                                ${installation.balance_paid ? '<span style=\"color: #28a745; font-weight: bold;\">✅ PAID</span>' : '<span style=\"color: #ffc107; font-weight: bold;\">💳 DUE ON COMPLETION</span>'}\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n                \n                <!-- Pre-Installation Checklist -->\n                <table width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"30\" style=\"background-color: #fd7e14; color: white; margin: 30px 0;\">\n                    <tr>\n                        <td style=\"text-align: center;\">\n                            <h3 style=\"margin: 0 0 15px; font-size: 20px; font-weight: 600;\">\n                                📋 Pre-Installation Checklist\n                            </h3>\n                            <table width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"8\" style=\"background-color: rgba(255, 255, 255, 0.1); margin: 15px 0;\">\n                                <tr>\n                                    <td style=\"text-align: left; color: white;\">□ Review project specifications and materials list</td>\n                                </tr>\n                                <tr>\n                                    <td style=\"text-align: left; color: white;\">□ Confirm all materials are loaded and ready</td>\n                                </tr>\n                                <tr>\n                                    <td style=\"text-align: left; color: white;\">□ Contact customer 24 hours prior to confirm</td>\n                                </tr>\n                                <tr>\n                                    <td style=\"text-align: left; color: white;\">□ Verify access and parking availability</td>\n                                </tr>\n                                <tr>\n                                    <td style=\"text-align: left; color: white;\">□ Ensure all tools and equipment are prepared</td>\n                                </tr>\n                            </table>\n                        </td>\n                    </tr>\n                </table>\n\n                ${installation.additional_notes ? `\n                <!-- Installation Notes -->\n                <table width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"20\" style=\"background-color: #f8f9fa; border-left: 4px solid #17a2b8; margin: 20px 0;\">\n                    <tr>\n                        <td>\n                            <h3 style=\"margin: 0 0 15px; color: #2c3e50; font-size: 16px; font-weight: 600;\">\n                                📝 Installation Notes\n                            </h3>\n                            <p style=\"margin: 0; color: #495057; line-height: 1.6;\">\n                                ${installation.additional_notes}\n                            </p>\n                        </td>\n                    </tr>\n                </table>\n                ` : ''}\n\n                ${customMessage ? `\n                <!-- Special Instructions -->\n                <table width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"20\" style=\"background-color: #f8f9fa; border-left: 4px solid #ffc107; margin: 20px 0;\">\n                    <tr>\n                        <td>\n                            <h3 style=\"margin: 0 0 15px; color: #2c3e50; font-size: 16px; font-weight: 600;\">\n                                ⚡ Special Instructions\n                            </h3>\n                            <p style=\"margin: 0; color: #495057; line-height: 1.6;\">\n                                ${customMessage}\n                            </p>\n                        </td>\n                    </tr>\n                </table>\n                ` : ''}\n                \n                <!-- Important Reminders -->\n                <table width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"25\" style=\"background-color: #343a40; color: white; margin: 30px 0;\">\n                    <tr>\n                        <td style=\"text-align: center;\">\n                            <h3 style=\"margin: 0 0 15px; font-size: 18px; font-weight: 600;\">\n                                ⚠️ Important Reminders\n                            </h3>\n                            <table width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"8\" style=\"background-color: rgba(255, 255, 255, 0.1); margin: 15px 0;\">\n                                <tr>\n                                    <td style=\"text-align: left; color: white; font-size: 14px;\">• Call customer 24 hours before installation</td>\n                                </tr>\n                                <tr>\n                                    <td style=\"text-align: left; color: white; font-size: 14px;\">• Arrive promptly at 9:00 AM with all materials</td>\n                                </tr>\n                                <tr>\n                                    <td style=\"text-align: left; color: white; font-size: 14px;\">• Conduct quality inspection before walkthrough</td>\n                                </tr>\n                                <tr>\n                                    <td style=\"text-align: left; color: white; font-size: 14px;\">• Collect final payment if balance is due</td>\n                                </tr>\n                                <tr>\n                                    <td style=\"text-align: left; color: white; font-size: 14px;\">• Report any issues to office immediately</td>\n                                </tr>\n                            </table>\n                        </td>\n                    </tr>\n                </table>\n                \n            </td>\n        </tr>\n        \n        <!-- Footer -->\n        <tr>\n            <td style=\"background-color: #2c3e50; color: #ecf0f1; text-align: center; padding: 30px 20px;\">\n                <h4 style=\"margin: 0 0 15px; color: white; font-size: 18px; font-weight: 600;\">\n                    WMK Kitchen Solutions - Installation Team\n                </h4>\n                <p style=\"margin: 8px 0;\">Questions or support needed? Contact the office immediately.</p>\n                <p style=\"margin: 8px 0;\"><strong>📞 Office:</strong> (XXX) XXX-XXXX</p>\n                <p style=\"margin: 8px 0;\">\n                    <strong>📧 Email:</strong> \n                    <a href=\"mailto:management@wmk-kitchen.com\" style=\"color: #fd7e14; text-decoration: none;\">\n                        management@wmk-kitchen.com\n                    </a>\n                </p>\n                <p style=\"margin: 8px 0;\">\n                    <strong>🌐 Website:</strong> \n                    <a href=\"https://wmk-kitchen.com\" style=\"color: #fd7e14; text-decoration: none;\">\n                        www.wmk-kitchen.com\n                    </a>\n                </p>\n                <p style=\"margin-top: 20px; font-size: 13px; color: #bdc3c7;\">\n                    © 2025 WMK Kitchen Solutions. All rights reserved.<br>\n                    Excellence in Every Installation\n                </p>\n            </td>\n        </tr>\n        \n    </table>\n    \n</body>\n</html>\n        `.trim();\n      }\n      \n      // Send the actual email using our email service\n      try {\n        await emailService.sendEmail({\n          to: recipient,\n          subject: subject,\n          text: 'This email requires HTML support to view properly. Please use an HTML-enabled email client.',\n          html: emailContent\n        });\n        \n        console.log('=== EMAIL SENT SUCCESSFULLY ===');\n        console.log('To:', recipient);\n        console.log('Subject:', subject);\n        console.log('==============================');\n        \n        res.json({ \n          message: \"Email sent successfully\", \n          recipient,\n          subject,\n          type\n        });\n      } catch (emailError) {\n        console.error('Failed to send email:', emailError);\n        res.status(500).json({ message: \"Failed to send email notification\" });\n      }\n    } catch (error) {\n      console.error('Email sending error:', error);\n      res.status(500).json({ message: \"Failed to send email notification\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":45268},"server/storage.ts":{"content":"import { type User, type InsertUser, type Lead, type InsertLead, type UpdateLead, type SampleBooklet, type InsertSampleBooklet, type UpdateSampleBooklet } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  getLeads(): Promise<Lead[]>;\n  getLeadsPaginated(page?: number, limit?: number, filters?: {\n    search?: string;\n    status?: string;\n    origin?: string;\n    assigned_to?: string;\n  }): Promise<{ leads: Lead[], total: number, page: number, limit: number, totalPages: number }>;\n  getLead(id: string): Promise<Lead | undefined>;\n  createLead(lead: InsertLead): Promise<Lead>;\n  updateLead(id: string, updates: UpdateLead): Promise<Lead | undefined>;\n  deleteLead(id: string): Promise<boolean>;\n  getLeadsByAssignee(assignee: string): Promise<Lead[]>;\n  getLeadsWithFollowupsDue(date: Date): Promise<Lead[]>;\n  getLeadsCreatedAfter(date: Date): Promise<Lead[]>;\n\n  // Sample Booklets operations\n  getSampleBooklets(): Promise<SampleBooklet[]>;\n  getSampleBooklet(id: string): Promise<SampleBooklet | undefined>;\n  createSampleBooklet(booklet: InsertSampleBooklet): Promise<SampleBooklet>;\n  updateSampleBooklet(id: string, updates: UpdateSampleBooklet): Promise<SampleBooklet | undefined>;\n  deleteSampleBooklet(id: string): Promise<boolean>;\n  getSampleBookletsByStatus(status: string): Promise<SampleBooklet[]>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private leads: Map<string, Lead>;\n  private sampleBooklets: Map<string, SampleBooklet>;\n\n  constructor() {\n    this.users = new Map();\n    this.leads = new Map();\n    this.sampleBooklets = new Map();\n    this.initializeDefaultData();\n  }\n\n  private initializeDefaultData() {\n    // Create default users\n    const defaultUsers = [\n      { username: \"kim\", password: \"password\", role: \"admin\" },\n      { username: \"patrick\", password: \"password\", role: \"sales_rep\" },\n      { username: \"lina\", password: \"password\", role: \"sales_rep\" }\n    ];\n\n    defaultUsers.forEach(userData => {\n      const id = randomUUID();\n      const user: User = { ...userData, id, role: userData.role };\n      this.users.set(id, user);\n    });\n\n    // Create sample leads for demonstration\n    const sampleLeads = [\n      {\n        name: \"Sarah Johnson\",\n        phone: \"(555) 123-4567\",\n        email: \"sarah@email.com\",\n        lead_origin: \"facebook\",\n        date_created: new Date(\"2024-01-15\"),\n        next_followup_date: new Date(\"2024-01-12\"), // overdue\n        remarks: \"in-progress\",\n        assigned_to: \"kim\",\n        project_amount: \"9200.00\",\n        notes: \"Customer is very interested in white marble finish. Scheduled for home visit next week.\",\n        additional_notes: \"\",\n        deposit_paid: false,\n        balance_paid: false,\n        installation_date: null,\n        assigned_installer: null,\n      },\n      {\n        name: \"Mike Chen\",\n        phone: \"(555) 234-5678\",\n        email: \"mike@email.com\",\n        lead_origin: \"google\",\n        date_created: new Date(\"2024-01-14\"),\n        next_followup_date: new Date(), // due today\n        remarks: \"quoted\",\n        assigned_to: \"patrick\",\n        project_amount: \"12500.00\",\n        notes: \"Quote sent for kitchen remodel. Waiting for response.\",\n        additional_notes: \"\",\n        deposit_paid: false,\n        balance_paid: false,\n        installation_date: null,\n        assigned_installer: null,\n      },\n      {\n        name: \"Lisa Rodriguez\",\n        phone: \"(555) 345-6789\",\n        email: \"lisa@email.com\",\n        lead_origin: \"referral\",\n        date_created: new Date(\"2024-01-13\"),\n        next_followup_date: new Date(\"2024-01-18\"),\n        remarks: \"sold\",\n        assigned_to: \"lina\",\n        project_amount: \"15800.00\",\n        notes: \"Project sold! Customer very happy with proposal.\",\n        additional_notes: \"Rush job - needs completion by Feb 1st\",\n        deposit_paid: true,\n        balance_paid: true,\n        installation_date: new Date(\"2024-01-20\"),\n        assigned_installer: \"angel\",\n      }\n    ];\n\n    sampleLeads.forEach(leadData => {\n      const id = randomUUID();\n      const lead: Lead = { \n        ...leadData, \n        id,\n        email: leadData.email || null,\n        next_followup_date: leadData.next_followup_date || null,\n        notes: leadData.notes || null,\n        additional_notes: leadData.additional_notes || null,\n        installation_date: leadData.installation_date || null,\n        assigned_installer: leadData.assigned_installer || null\n      };\n      this.leads.set(id, lead);\n    });\n\n    // Create sample booklets for demonstration\n    const sampleBooklets = [\n      {\n        order_number: \"BK001\",\n        customer_name: \"John Smith\",\n        address: \"123 Main St, Anytown, ST 12345\",\n        email: \"john@email.com\",\n        phone: \"(555) 111-1111\",\n        product_type: \"demo_kit_and_sample_booklet\",\n        status: \"pending\",\n        notes: \"Rush order requested\"\n      },\n      {\n        order_number: \"BK002\", \n        customer_name: \"Jane Doe\",\n        address: \"456 Oak Ave, Somewhere, ST 67890\",\n        email: \"jane@email.com\",\n        phone: \"(555) 222-2222\",\n        product_type: \"sample_booklet_only\",\n        tracking_number: \"1Z12345E0291980793\",\n        status: \"shipped\",\n        date_shipped: new Date(\"2024-01-16\"),\n        notes: \"Standard shipment\"\n      },\n      {\n        order_number: \"BK003\",\n        customer_name: \"Bob Johnson\", \n        address: \"789 Pine Rd, Elsewhere, ST 54321\",\n        email: \"bob@email.com\",\n        phone: \"(555) 333-3333\",\n        product_type: \"trial_kit\",\n        tracking_number: \"1Z12345E0392857735\",\n        status: \"delivered\",\n        date_shipped: new Date(\"2024-01-14\"),\n        notes: \"Customer requested expedited delivery\"\n      }\n    ];\n\n    sampleBooklets.forEach(bookletData => {\n      const id = randomUUID();\n      const booklet: SampleBooklet = { \n        ...bookletData, \n        id,\n        date_ordered: new Date(\"2024-01-15\"),\n        tracking_number: bookletData.tracking_number || null,\n        date_shipped: bookletData.date_shipped || null,\n        notes: bookletData.notes || null,\n        created_at: new Date(),\n        updated_at: new Date()\n      };\n      this.sampleBooklets.set(id, booklet);\n    });\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async getLeads(): Promise<Lead[]> {\n    return Array.from(this.leads.values()).sort((a, b) => \n      new Date(b.date_created).getTime() - new Date(a.date_created).getTime()\n    );\n  }\n\n  async getLead(id: string): Promise<Lead | undefined> {\n    return this.leads.get(id);\n  }\n\n  async createLead(insertLead: InsertLead): Promise<Lead> {\n    const id = randomUUID();\n    const lead: Lead = { \n      ...insertLead, \n      id,\n      date_created: new Date()\n    };\n    this.leads.set(id, lead);\n    return lead;\n  }\n\n  async updateLead(id: string, updates: UpdateLead): Promise<Lead | undefined> {\n    const existingLead = this.leads.get(id);\n    if (!existingLead) return undefined;\n\n    const updatedLead: Lead = { ...existingLead, ...updates };\n    this.leads.set(id, updatedLead);\n    return updatedLead;\n  }\n\n  async deleteLead(id: string): Promise<boolean> {\n    return this.leads.delete(id);\n  }\n\n  async getLeadsByAssignee(assignee: string): Promise<Lead[]> {\n    return Array.from(this.leads.values()).filter(\n      lead => lead.assigned_to === assignee\n    );\n  }\n\n  async getLeadsWithFollowupsDue(date: Date): Promise<Lead[]> {\n    const startOfDay = new Date(date);\n    startOfDay.setHours(0, 0, 0, 0);\n    const endOfDay = new Date(date);\n    endOfDay.setHours(23, 59, 59, 999);\n\n    return Array.from(this.leads.values()).filter(lead => {\n      if (!lead.next_followup_date) return false;\n      const followupDate = new Date(lead.next_followup_date);\n      return followupDate >= startOfDay && followupDate <= endOfDay;\n    });\n  }\n\n  async getLeadsCreatedAfter(date: Date): Promise<Lead[]> {\n    return Array.from(this.leads.values()).filter(lead => \n      new Date(lead.date_created) > date\n    );\n  }\n\n  // Sample Booklets methods\n  async getSampleBooklets(): Promise<SampleBooklet[]> {\n    return Array.from(this.sampleBooklets.values()).sort((a, b) => \n      new Date(b.date_ordered).getTime() - new Date(a.date_ordered).getTime()\n    );\n  }\n\n  async getSampleBooklet(id: string): Promise<SampleBooklet | undefined> {\n    return this.sampleBooklets.get(id);\n  }\n\n  async createSampleBooklet(insertBooklet: InsertSampleBooklet): Promise<SampleBooklet> {\n    const id = randomUUID();\n    const booklet: SampleBooklet = { \n      ...insertBooklet, \n      id,\n      date_ordered: new Date(),\n      created_at: new Date(),\n      updated_at: new Date()\n    };\n    this.sampleBooklets.set(id, booklet);\n    return booklet;\n  }\n\n  async updateSampleBooklet(id: string, updates: UpdateSampleBooklet): Promise<SampleBooklet | undefined> {\n    const existingBooklet = this.sampleBooklets.get(id);\n    if (!existingBooklet) return undefined;\n\n    const updatedBooklet: SampleBooklet = { \n      ...existingBooklet, \n      ...updates,\n      updated_at: new Date()\n    };\n    this.sampleBooklets.set(id, updatedBooklet);\n    return updatedBooklet;\n  }\n\n  async deleteSampleBooklet(id: string): Promise<boolean> {\n    return this.sampleBooklets.delete(id);\n  }\n\n  async getSampleBookletsByStatus(status: string): Promise<SampleBooklet[]> {\n    return Array.from(this.sampleBooklets.values()).filter(\n      booklet => booklet.status === status\n    );\n  }\n}\n\nimport { DatabaseStorage } from \"./database-storage\";\n\nexport const storage = new DatabaseStorage();\n","size_bytes":10141},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"..\", \"dist\", \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2277},"shared/schema.ts":{"content":"import { pgTable, varchar, text, integer, boolean, timestamp, decimal, pgEnum, date } from \"drizzle-orm/pg-core\";\nimport { sql } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\", { length: 36 }).primaryKey().notNull(),\n  username: varchar(\"username\", { length: 255 }).notNull().unique(),\n  password: varchar(\"password\", { length: 255 }).notNull(),\n  role: varchar(\"role\", { length: 50 }).notNull().default(\"sales_rep\"), // admin, sales_rep\n});\n\nexport const leads = pgTable(\"leads\", {\n  id: varchar(\"id\", { length: 36 }).primaryKey().notNull(),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  phone: varchar(\"phone\", { length: 50 }).notNull(),\n  email: varchar(\"email\", { length: 255 }),\n  lead_origin: varchar(\"lead_origin\", { length: 100 }).notNull(), // facebook, google, instagram, etc.\n  date_created: timestamp(\"date_created\").notNull().default(sql`NOW()`),\n  next_followup_date: timestamp(\"next_followup_date\"),\n  remarks: varchar(\"remarks\", { length: 255 }).notNull().default(\"new\"), // status field\n  assigned_to: varchar(\"assigned_to\", { length: 255 }),\n  project_amount: decimal(\"project_amount\", { precision: 10, scale: 2 }),\n  notes: text(\"notes\"),\n  additional_notes: text(\"additional_notes\"),\n  deposit_paid: boolean(\"deposit_paid\").notNull().default(false),\n  balance_paid: boolean(\"balance_paid\").notNull().default(false),\n  installation_date: timestamp(\"installation_date\"),\n  assigned_installer: varchar(\"assigned_installer\", { length: 255 }), // angel, brian, luis\n});\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n});\n\nexport const insertLeadSchema = createInsertSchema(leads).omit({\n  id: true,\n});\n\nexport const updateLeadSchema = insertLeadSchema.partial().extend({\n  next_followup_date: z.union([z.date(), z.string().datetime(), z.string().transform((val) => val ? new Date(val) : null), z.null()]).optional(),\n  installation_date: z.union([z.date(), z.string().datetime(), z.string().transform((val) => val ? new Date(val) : null), z.null()]).optional(),\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertLead = z.infer<typeof insertLeadSchema>;\nexport type UpdateLead = z.infer<typeof updateLeadSchema>;\nexport type Lead = typeof leads.$inferSelect;\n\n// Enums for dropdowns\nexport const LEAD_ORIGINS = [\n  \"facebook\",\n  \"google\",\n  \"instagram\", \n  \"trade-show\",\n  \"whatsapp\",\n  \"commercial\",\n  \"referral\",\n  \"website\",\n  \"phone\",\n  \"email\",\n  \"walk-in\",\n  \"tiktok\",\n  \"youtube\",\n  \"linkedin\",\n  \"twitter\"\n] as const;\n\nexport const LEAD_STATUSES = [\n  \"new\",\n  \"in-progress\", \n  \"quoted\",\n  \"sold\",\n  \"not-interested\",\n  \"not-service-area\",\n  \"not-compatible\"\n] as const;\n\nexport const ASSIGNEES = [\"kim\", \"patrick\", \"lina\"] as const;\nexport const INSTALLERS = [\"angel\", \"brian\", \"luis\"] as const;\n\n// Sample Booklets schema\nexport const sampleBooklets = pgTable(\"sample_booklets\", {\n  id: varchar(\"id\", { length: 36 }).primaryKey().notNull(),\n  order_number: varchar(\"order_number\", { length: 100 }),\n  customer_name: varchar(\"customer_name\", { length: 255 }).notNull(),\n  address: text(\"address\").notNull(),\n  email: varchar(\"email\", { length: 255 }).notNull(),\n  phone: varchar(\"phone\", { length: 50 }),\n  product_type: varchar(\"product_type\", { length: 100 }).notNull(),\n  tracking_number: varchar(\"tracking_number\", { length: 100 }),\n  status: varchar(\"status\", { length: 50 }).notNull().default(\"pending\"),\n  date_ordered: timestamp(\"date_ordered\").notNull().default(sql`NOW()`),\n  date_shipped: timestamp(\"date_shipped\"),\n  notes: text(\"notes\"),\n  created_at: timestamp(\"created_at\").default(sql`CURRENT_TIMESTAMP`),\n  updated_at: timestamp(\"updated_at\").default(sql`CURRENT_TIMESTAMP`),\n});\n\nexport const installers = pgTable(\"installers\", {\n  id: varchar(\"id\", { length: 36 }).primaryKey().notNull(),\n  name: varchar(\"name\", { length: 100 }).notNull(),\n  phone: varchar(\"phone\", { length: 20 }),\n  email: varchar(\"email\", { length: 100 }).unique(),\n  status: varchar(\"status\", { length: 20 }).notNull().default(\"active\"),\n  hire_date: date(\"hire_date\"),\n  hourly_rate: decimal(\"hourly_rate\", { precision: 10, scale: 2 }),\n  specialty: varchar(\"specialty\", { length: 255 }),\n  notes: text(\"notes\"),\n  created_at: timestamp(\"created_at\").notNull().default(sql`NOW()`),\n  updated_at: timestamp(\"updated_at\").notNull().default(sql`NOW()`),\n});\n\nexport const insertSampleBookletSchema = createInsertSchema(sampleBooklets).omit({\n  id: true,\n  created_at: true,\n  updated_at: true,\n});\n\nexport const updateSampleBookletSchema = insertSampleBookletSchema.partial();\n\nexport type InsertSampleBooklet = z.infer<typeof insertSampleBookletSchema>;\nexport type UpdateSampleBooklet = z.infer<typeof updateSampleBookletSchema>;\nexport type SampleBooklet = typeof sampleBooklets.$inferSelect;\n\n// Installers Zod schemas\nexport const insertInstallerSchema = createInsertSchema(installers).omit({\n  id: true,\n  created_at: true,\n  updated_at: true,\n});\n\nexport const updateInstallerSchema = insertInstallerSchema.partial();\n\nexport type InsertInstaller = z.infer<typeof insertInstallerSchema>;\nexport type UpdateInstaller = z.infer<typeof updateInstallerSchema>;\nexport type Installer = typeof installers.$inferSelect;\n\n// Sample Booklets enums\nexport const PRODUCT_TYPES = [\n  \"demo_kit_and_sample_booklet\",\n  \"sample_booklet_only\", \n  \"trial_kit\",\n  \"demo_kit_only\"\n] as const;\n\nexport const BOOKLET_STATUSES = [\n  \"pending\",\n  \"shipped\", \n  \"delivered\"\n] as const;\n\n// Installers enums\nexport const INSTALLER_STATUSES = [\n  \"active\",\n  \"inactive\", \n  \"on_leave\",\n  \"terminated\"\n] as const;\n","size_bytes":5732},"client/src/App.tsx":{"content":"import { Switch, Route, Redirect } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider, useAuth } from \"@/contexts/auth-context\";\nimport { Sidebar } from \"@/components/layout/sidebar\";\n\n// Utility function\nconst capitalizeFirst = (str: string): string => {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\nimport NotFound from \"@/pages/not-found\";\nimport Login from \"@/pages/login\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Leads from \"@/pages/leads\";\nimport AddLead from \"@/pages/add-lead\";\nimport Followups from \"@/pages/followups\";\nimport SampleBooklets from \"@/pages/sample-booklets\";\nimport Installations from \"@/pages/installations\";\nimport Reports from \"@/pages/reports\";\n\nfunction ProtectedRoute({ children }: { children: React.ReactNode }) {\n  const { user, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"d-flex justify-content-center align-items-center\" style={{ height: '100vh' }}>\n        <div className=\"text-center\">\n          <i className=\"fas fa-spinner fa-spin fa-3x text-primary mb-3\"></i>\n          <p>Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return <Redirect to=\"/login\" />;\n  }\n\n  return (\n    <div className=\"app-layout\">\n      <Sidebar />\n      <main className=\"main-content\">\n        <div className=\"content-header\">\n          <div className=\"d-flex justify-content-between align-items-center\">\n            <h5 className=\"mb-0 text-dark\">Welcome back, {user ? capitalizeFirst(user.username) : 'User'}</h5>\n            <div className=\"user-menu\">\n              <span className=\"text-muted\">{new Date().toLocaleDateString()}</span>\n            </div>\n          </div>\n        </div>\n        <div className=\"p-4\">\n          {children}\n        </div>\n      </main>\n    </div>\n  );\n}\n\nfunction AppRouter() {\n  const { user } = useAuth();\n\n  return (\n    <Switch>\n      <Route path=\"/login\">\n        {user ? <Redirect to=\"/dashboard\" /> : <Login />}\n      </Route>\n      \n      <Route path=\"/dashboard\">\n        <ProtectedRoute>\n          <Dashboard />\n        </ProtectedRoute>\n      </Route>\n      \n      <Route path=\"/leads\">\n        <ProtectedRoute>\n          <Leads />\n        </ProtectedRoute>\n      </Route>\n      \n      <Route path=\"/add-lead\">\n        <ProtectedRoute>\n          <AddLead />\n        </ProtectedRoute>\n      </Route>\n      \n      <Route path=\"/followups\">\n        <ProtectedRoute>\n          <Followups />\n        </ProtectedRoute>\n      </Route>\n      \n      <Route path=\"/sample-booklets\">\n        <ProtectedRoute>\n          <SampleBooklets />\n        </ProtectedRoute>\n      </Route>\n      \n      <Route path=\"/installations\">\n        <ProtectedRoute>\n          <Installations />\n        </ProtectedRoute>\n      </Route>\n      \n      <Route path=\"/reports\">\n        <ProtectedRoute>\n          <Reports />\n        </ProtectedRoute>\n      </Route>\n      \n      <Route path=\"/\">\n        <Redirect to=\"/dashboard\" />\n      </Route>\n      \n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <AuthProvider>\n          <Toaster />\n          <AppRouter />\n        </AuthProvider>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3497},"client/src/index.css":{"content":"@import url('https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css');\n@import url('https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css');\n@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n\n@tailwind base;\n@tailwind components; \n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 98%);\n  --foreground: hsl(0 0% 20%);\n  --card: hsl(0 0% 100%);\n  --card-foreground: hsl(0 0% 20%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(0 0% 20%);\n  --primary: hsl(142 69% 58%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(0 0% 96%);\n  --secondary-foreground: hsl(0 0% 20%);\n  --muted: hsl(0 0% 96%);\n  --muted-foreground: hsl(0 0% 45%);\n  --accent: hsl(0 0% 96%);\n  --accent-foreground: hsl(0 0% 20%);\n  --destructive: hsl(0 84.2% 60.2%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(0 0% 89%);\n  --input: hsl(0 0% 89%);\n  --ring: hsl(142 69% 58%);\n  --chart-1: hsl(142 69% 58%);\n  --chart-2: hsl(173 58% 39%);\n  --chart-3: hsl(197 37% 24%);\n  --chart-4: hsl(43 74% 66%);\n  --chart-5: hsl(27 87% 67%);\n  --sidebar: hsl(0 0% 8%);\n  --sidebar-foreground: hsl(0 0% 100%);\n  --sidebar-primary: hsl(142 69% 58%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(0 0% 15%);\n  --sidebar-accent-foreground: hsl(0 0% 100%);\n  --sidebar-border: hsl(0 0% 15%);\n  --sidebar-ring: hsl(142 69% 58%);\n  --font-sans: 'Inter', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: 'Menlo', monospace;\n  --radius: 0.75rem;\n  \n  /* Wrap My Kitchen brand colors */\n  --wmk-black: hsl(0 0% 8%);\n  --wmk-white: hsl(0 0% 100%);\n  --wmk-green: hsl(142 69% 58%);\n  --wmk-green-dark: hsl(142 69% 45%);\n  --wmk-green-light: hsl(142 69% 70%);\n  --wmk-gray: hsl(0 0% 45%);\n  --wmk-gray-light: hsl(0 0% 96%);\n  \n  /* Brand gradients */\n  --primary-gradient: linear-gradient(135deg, hsl(142 69% 58%) 0%, hsl(142 69% 45%) 100%);\n  --success-gradient: linear-gradient(135deg, hsl(142 69% 58%) 0%, hsl(142 69% 45%) 100%);\n  --warning-gradient: linear-gradient(135deg, hsl(32.7 98% 60%) 0%, hsl(43 96% 56%) 100%);\n  --danger-gradient: linear-gradient(135deg, hsl(0 84.2% 60.2%) 0%, hsl(0 72% 51%) 100%);\n  --info-gradient: linear-gradient(135deg, hsl(221.2 83.2% 53.3%) 0%, hsl(217 92% 60%) 100%);\n  --dark-gradient: linear-gradient(135deg, hsl(0 0% 8%) 0%, hsl(0 0% 15%) 100%);\n  \n  /* Brand specific colors */\n  --success-green: hsl(142 69% 58%);\n  --warning-orange: hsl(32.7 98% 60%);\n  --danger-red: hsl(0 84.2% 60.2%);\n  --info-blue: hsl(221.2 83.2% 53.3%);\n  --light-bg: hsl(0 0% 98%);\n  --dark-text: hsl(0 0% 20%);\n  --glass-bg: hsla(0, 0%, 100%, 0.9);\n  --glass-border: hsla(0, 0%, 100%, 0.2);\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(211.3 100% 50%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --destructive: hsl(0 84% 60%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    background: var(--light-bg);\n    color: var(--dark-text);\n    font-family: 'Inter', sans-serif;\n    line-height: 1.6;\n  }\n}\n\n/* Wrap My Kitchen Layout */\n.app-layout {\n  display: flex;\n  min-height: 100vh;\n}\n\n.sidebar {\n  width: 280px;\n  background: var(--wmk-white);\n  color: var(--wmk-black);\n  display: flex;\n  flex-direction: column;\n  position: fixed;\n  height: 100vh;\n  z-index: 1000;\n  box-shadow: 4px 0 20px rgba(0, 0, 0, 0.15);\n}\n\n.sidebar-header {\n  padding: 2rem 1.5rem;\n  border-bottom: 1px solid var(--sidebar-border);\n}\n\n.sidebar-brand {\n  font-weight: 700;\n  font-size: 1.5rem;\n  color: var(--wmk-black);\n  text-decoration: none;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 0.75rem;\n}\n\n.sidebar-brand .brand-wrap {\n  color: var(--wmk-black);\n}\n\n.sidebar-brand .brand-kitchen {\n  color: var(--wmk-green);\n}\n\n.sidebar-nav {\n  flex: 1;\n  padding: 1.5rem 0;\n}\n\n.sidebar-nav-item {\n  margin: 0.25rem 1rem;\n}\n\n.sidebar-nav-link {\n  display: flex;\n  align-items: center;\n  gap: 0.75rem;\n  padding: 0.875rem 1rem;\n  border-radius: 8px;\n  color: var(--wmk-black);\n  text-decoration: none;\n  font-weight: 500;\n  transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n  opacity: 0.8;\n}\n\n.sidebar-nav-link:hover {\n  background: var(--wmk-gray-light);\n  color: var(--wmk-black);\n  opacity: 1;\n  transform: translateX(4px);\n}\n\n.sidebar-nav-link.active {\n  background: var(--wmk-green);\n  color: var(--wmk-white);\n  opacity: 1;\n  box-shadow: 0 4px 12px rgba(77, 179, 102, 0.3);\n}\n\n.sidebar-nav-link i {\n  width: 20px;\n  text-align: center;\n}\n\n.main-content {\n  flex: 1;\n  margin-left: 280px;\n  min-height: 100vh;\n  background: var(--light-bg);\n}\n\n.content-header {\n  background: var(--wmk-white);\n  border-bottom: 1px solid var(--border);\n  padding: 1rem 2rem;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06);\n}\n\n.user-menu {\n  display: flex;\n  align-items: center;\n  gap: 0.75rem;\n  margin-left: auto;\n}\n\n.user-avatar {\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  background: var(--wmk-green);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: var(--wmk-white);\n  font-weight: 600;\n}\n\n.logout-btn {\n  background: transparent;\n  border: 2px solid var(--border);\n  color: var(--wmk-black);\n  padding: 0.5rem 1rem;\n  border-radius: 8px;\n  font-weight: 500;\n  transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.logout-btn:hover {\n  background: var(--danger-red);\n  border-color: var(--danger-red);\n  color: var(--wmk-white);\n}\n\n.sidebar-footer {\n  padding: 1.5rem;\n  border-top: 1px solid var(--sidebar-border);\n  margin-top: auto;\n}\n\n/* Modern Bootstrap overrides with brand colors */\n.navbar-brand {\n  font-weight: 700;\n  font-size: 1.5rem;\n  color: var(--wmk-green);\n}\n\n.navbar {\n  backdrop-filter: blur(20px);\n  background: var(--glass-bg) !important;\n  border-bottom: 1px solid var(--glass-border);\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.06);\n}\n\n.stats-card {\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  border: none;\n  border-radius: 16px;\n  background: white;\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);\n  backdrop-filter: blur(20px);\n  position: relative;\n  overflow: hidden;\n}\n\n.stats-card::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  height: 4px;\n  background: var(--primary-gradient);\n}\n\n.stats-card:hover {\n  transform: translateY(-8px);\n  box-shadow: 0 12px 40px rgba(0, 0, 0, 0.12);\n}\n\n.card {\n  border: none;\n  border-radius: 16px;\n  background: white;\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.card:hover {\n  box-shadow: 0 8px 30px rgba(0, 0, 0, 0.12);\n}\n\n.card-header {\n  background: transparent;\n  border-bottom: 1px solid hsl(220 13% 91%);\n  font-weight: 600;\n  padding: 1.5rem;\n}\n\n.priority-high {\n  border-left: 4px solid var(--danger-red);\n  background: linear-gradient(90deg, hsla(0, 84%, 60%, 0.05) 0%, transparent 100%);\n}\n\n.priority-medium {\n  border-left: 4px solid var(--warning-orange);\n  background: linear-gradient(90deg, hsla(32, 98%, 60%, 0.05) 0%, transparent 100%);\n}\n\n.priority-low {\n  border-left: 4px solid var(--success-green);\n  background: linear-gradient(90deg, hsla(142, 76%, 36%, 0.05) 0%, transparent 100%);\n}\n\n.status-badge {\n  font-size: 0.75rem;\n  font-weight: 500;\n  padding: 0.35rem 0.75rem;\n  border-radius: 9999px;\n  letter-spacing: 0.025em;\n}\n\n.table-hover tbody tr:hover {\n  background: linear-gradient(90deg, hsla(262, 83%, 58%, 0.03) 0%, transparent 100%);\n}\n\n.btn-circle {\n  width: 40px;\n  height: 40px;\n  border-radius: 12px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 0;\n  transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.btn-circle:hover {\n  transform: scale(1.05);\n}\n\n.login-container {\n  min-height: 100vh;\n  background: var(--primary-gradient);\n  position: relative;\n}\n\n.login-container::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\"><defs><pattern id=\"grain\" width=\"100\" height=\"100\" patternUnits=\"userSpaceOnUse\"><circle cx=\"50\" cy=\"50\" r=\"1\" fill=\"white\" opacity=\"0.1\"/></pattern></defs><rect width=\"100\" height=\"100\" fill=\"url(%23grain)\"/></svg>');\n}\n\n.login-card {\n  box-shadow: 0 20px 60px rgba(0, 0, 0, 0.15);\n  border: none;\n  border-radius: 20px;\n  backdrop-filter: blur(20px);\n  background: var(--glass-bg);\n  border: 1px solid var(--glass-border);\n}\n\n\n.nav-link {\n  color: var(--dark-text);\n  border-radius: 12px;\n  margin: 4px 0;\n  font-weight: 500;\n  padding: 0.75rem 1rem;\n  transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.nav-link:hover {\n  background: linear-gradient(135deg, var(--primary-purple) 0%, hsl(252 82% 65%) 100%);\n  color: white;\n  transform: translateX(4px);\n}\n\n.nav-link.active {\n  background: var(--primary-gradient);\n  color: white;\n  box-shadow: 0 4px 12px rgba(119, 46, 195, 0.3);\n}\n\n.follow-up-overdue {\n  background: linear-gradient(90deg, hsla(0, 84%, 60%, 0.08) 0%, transparent 100%);\n  border-left: 4px solid var(--danger-red);\n  border-radius: 8px;\n}\n\n.follow-up-today {\n  background: linear-gradient(90deg, hsla(32, 98%, 60%, 0.08) 0%, transparent 100%);\n  border-left: 4px solid var(--warning-orange);\n  border-radius: 8px;\n}\n\n/* Wrap My Kitchen button styles */\n.btn {\n  border-radius: 8px;\n  font-weight: 500;\n  padding: 0.75rem 1.5rem;\n  transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n  border: none;\n  letter-spacing: 0.025em;\n}\n\n.btn-primary {\n  background: var(--wmk-green);\n  color: var(--wmk-white);\n  box-shadow: 0 4px 12px rgba(77, 179, 102, 0.25);\n}\n\n.btn-primary:hover {\n  background: var(--wmk-green-dark);\n  box-shadow: 0 6px 20px rgba(77, 179, 102, 0.35);\n  transform: translateY(-2px);\n  color: var(--wmk-white);\n}\n\n.btn-success {\n  background: var(--wmk-green);\n  color: var(--wmk-white);\n  box-shadow: 0 4px 12px rgba(77, 179, 102, 0.25);\n}\n\n.btn-success:hover {\n  background: var(--wmk-green-dark);\n  box-shadow: 0 6px 20px rgba(77, 179, 102, 0.35);\n  transform: translateY(-2px);\n  color: var(--wmk-white);\n}\n\n.btn-warning {\n  background: var(--warning-gradient);\n  color: white;\n  box-shadow: 0 4px 12px rgba(245, 158, 11, 0.25);\n}\n\n.btn-warning:hover {\n  background: linear-gradient(135deg, hsl(43 96% 50%) 0%, hsl(43 96% 40%) 100%);\n  box-shadow: 0 6px 20px rgba(245, 158, 11, 0.35);\n  transform: translateY(-2px);\n  color: white;\n}\n\n.btn-danger {\n  background: var(--danger-gradient);\n  color: white;\n  box-shadow: 0 4px 12px rgba(239, 68, 68, 0.25);\n}\n\n.btn-danger:hover {\n  background: linear-gradient(135deg, hsl(0 72% 45%) 0%, hsl(0 72% 40%) 100%);\n  box-shadow: 0 6px 20px rgba(239, 68, 68, 0.35);\n  transform: translateY(-2px);\n  color: white;\n}\n\n.btn-info {\n  background: var(--info-gradient);\n  color: white;\n  box-shadow: 0 4px 12px rgba(59, 130, 246, 0.25);\n}\n\n.btn-info:hover {\n  background: linear-gradient(135deg, hsl(217 92% 50%) 0%, hsl(217 92% 45%) 100%);\n  box-shadow: 0 6px 20px rgba(59, 130, 246, 0.35);\n  transform: translateY(-2px);\n  color: white;\n}\n\n.btn-outline-primary {\n  background: transparent;\n  border: 2px solid var(--wmk-green);\n  color: var(--wmk-green);\n}\n\n.btn-outline-primary:hover {\n  background: var(--wmk-green);\n  border-color: transparent;\n  color: var(--wmk-white);\n  transform: translateY(-2px);\n  box-shadow: 0 6px 20px rgba(77, 179, 102, 0.25);\n}\n\n.btn-outline-success {\n  background: transparent;\n  border: 2px solid var(--wmk-green);\n  color: var(--wmk-green);\n}\n\n.btn-outline-success:hover {\n  background: var(--wmk-green);\n  border-color: transparent;\n  color: var(--wmk-white);\n  transform: translateY(-2px);\n  box-shadow: 0 6px 20px rgba(77, 179, 102, 0.25);\n}\n\n.btn-outline-warning {\n  background: transparent;\n  border: 2px solid var(--warning-orange);\n  color: var(--warning-orange);\n}\n\n.btn-outline-warning:hover {\n  background: var(--warning-gradient);\n  border-color: transparent;\n  color: white;\n  transform: translateY(-2px);\n  box-shadow: 0 6px 20px rgba(245, 158, 11, 0.25);\n}\n\n.btn-outline-danger {\n  background: transparent;\n  border: 2px solid var(--danger-red);\n  color: var(--danger-red);\n}\n\n.btn-outline-danger:hover {\n  background: var(--danger-gradient);\n  border-color: transparent;\n  color: white;\n  transform: translateY(-2px);\n  box-shadow: 0 6px 20px rgba(239, 68, 68, 0.25);\n}\n\n.btn-secondary {\n  background: hsl(220 14.3% 95.9%);\n  color: hsl(220.9 39.3% 11%);\n  border: 2px solid hsl(220 13% 91%);\n}\n\n.btn-secondary:hover {\n  background: hsl(220 14.3% 90%);\n  transform: translateY(-2px);\n  color: hsl(220.9 39.3% 11%);\n}\n\n/* Wrap My Kitchen text utilities */\n.text-primary {\n  color: var(--wmk-green) !important;\n}\n\n.text-success {\n  color: var(--wmk-green) !important;\n}\n\n.text-warning {\n  color: var(--warning-orange) !important;\n}\n\n.text-danger {\n  color: var(--danger-red) !important;\n}\n\n.text-info {\n  color: var(--info-blue) !important;\n}\n\n.text-brand {\n  color: var(--wmk-green) !important;\n}\n\n.text-dark {\n  color: var(--wmk-black) !important;\n}\n\n.bg-primary {\n  background: var(--primary-gradient) !important;\n}\n\n.bg-success {\n  background: var(--success-gradient) !important;\n}\n\n.bg-warning {\n  background: var(--warning-gradient) !important;\n}\n\n.bg-danger {\n  background: var(--danger-gradient) !important;\n}\n\n.bg-info {\n  background: var(--info-gradient) !important;\n}\n\n.border-primary {\n  border-color: var(--primary-purple) !important;\n}\n\n.border-success {\n  border-color: var(--success-green) !important;\n}\n\n.border-warning {\n  border-color: var(--warning-orange) !important;\n}\n\n.border-danger {\n  border-color: var(--danger-red) !important;\n}\n\n/* Modern form elements */\n.form-control {\n  border-radius: 12px;\n  border: 2px solid hsl(220 13% 91%);\n  padding: 0.75rem 1rem;\n  transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n  font-weight: 500;\n}\n\n.form-control:focus {\n  border-color: var(--wmk-green);\n  box-shadow: 0 0 0 3px rgba(77, 179, 102, 0.1);\n  outline: none;\n}\n\n.form-select {\n  border-radius: 8px;\n  border: 2px solid hsl(220 13% 91%);\n  padding: 0.75rem 1rem;\n  transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n  font-weight: 500;\n}\n\n.form-select:focus {\n  border-color: var(--wmk-green);\n  box-shadow: 0 0 0 3px rgba(77, 179, 102, 0.1);\n  outline: none;\n}\n\n.form-label {\n  font-weight: 600;\n  color: var(--dark-text);\n  margin-bottom: 0.5rem;\n}\n\n/* Modern table styling */\n.table {\n  border-radius: 12px;\n  overflow: hidden;\n}\n\n.table-light {\n  background: hsl(220 14.3% 97%);\n}\n\n/* Modern badges */\n.badge {\n  font-weight: 500;\n  border-radius: 8px;\n  padding: 0.4rem 0.8rem;\n  letter-spacing: 0.025em;\n}\n\n/* Modern modal styling */\n.modal-content {\n  border-radius: 20px;\n  border: none;\n  box-shadow: 0 20px 60px rgba(0, 0, 0, 0.15);\n}\n\n.modal-header {\n  border-bottom: 1px solid hsl(220 13% 91%);\n  padding: 1.5rem;\n}\n\n.modal-body {\n  padding: 1.5rem;\n}\n\n.modal-footer {\n  border-top: 1px solid hsl(220 13% 91%);\n  padding: 1.5rem;\n}\n\n/* Modern pagination */\n.pagination .page-link {\n  border-radius: 8px;\n  margin: 0 2px;\n  border: 2px solid hsl(220 13% 91%);\n  color: var(--dark-text);\n  font-weight: 500;\n}\n\n.pagination .page-item.active .page-link {\n  background: var(--primary-gradient);\n  border-color: transparent;\n  color: white;\n}\n\n.pagination .page-link:hover {\n  background: hsl(220 14.3% 95.9%);\n  border-color: var(--primary-purple);\n  color: var(--primary-purple);\n}\n\n/* Modern container spacing */\n.container-fluid {\n  padding-left: 2rem;\n  padding-right: 2rem;\n}\n\n/* Modern list group */\n.list-group-item {\n  border: none;\n  border-radius: 12px !important;\n  margin-bottom: 0.5rem;\n  background: white;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06);\n  transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.list-group-item:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);\n}\n\n/* FullCalendar styling */\n.fc {\n  font-family: 'Inter', sans-serif !important;\n}\n\n.fc-toolbar {\n  margin-bottom: 1.5rem !important;\n}\n\n.fc-toolbar-title {\n  font-size: 1.5rem !important;\n  font-weight: 600 !important;\n  color: var(--wmk-black) !important;\n}\n\n.fc-button-primary {\n  background: var(--wmk-green) !important;\n  border-color: var(--wmk-green) !important;\n  color: var(--wmk-white) !important;\n  border-radius: 8px !important;\n  font-weight: 500 !important;\n  transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1) !important;\n}\n\n.fc-button-primary:hover {\n  background: var(--wmk-green-dark) !important;\n  border-color: var(--wmk-green-dark) !important;\n  transform: translateY(-1px) !important;\n  box-shadow: 0 4px 12px rgba(77, 179, 102, 0.25) !important;\n}\n\n.fc-button-primary:not(:disabled):active,\n.fc-button-primary:not(:disabled).fc-button-active {\n  background: var(--wmk-green-dark) !important;\n  border-color: var(--wmk-green-dark) !important;\n}\n\n.fc-event {\n  border-radius: 6px !important;\n  border: none !important;\n  font-weight: 500 !important;\n  padding: 2px 6px !important;\n  font-size: 0.85rem !important;\n}\n\n.fc-event:hover {\n  cursor: pointer !important;\n  opacity: 0.9 !important;\n  transform: scale(1.02) !important;\n}\n\n.fc-daygrid-event {\n  margin: 1px 2px !important;\n}\n\n.fc-day-today {\n  background-color: rgba(77, 179, 102, 0.1) !important;\n}\n\n.fc-col-header-cell {\n  background: var(--wmk-gray-light) !important;\n  font-weight: 600 !important;\n  color: var(--wmk-black) !important;\n  border: 1px solid var(--border) !important;\n}\n\n.fc-daygrid-day {\n  border: 1px solid var(--border) !important;\n}\n\n.fc-scrollgrid {\n  border: 1px solid var(--border) !important;\n  border-radius: 12px !important;\n  overflow: hidden !important;\n}\n\n.fc-theme-standard td,\n.fc-theme-standard th {\n  border-color: var(--border) !important;\n}\n\n.fc-more-link {\n  color: var(--wmk-green) !important;\n  font-weight: 500 !important;\n}\n\n.fc-more-link:hover {\n  color: var(--wmk-green-dark) !important;\n}\n\n@media (max-width: 992px) {\n  .main-content {\n    margin-left: 0;\n  }\n}\n\n/* Required field indicator */\n.required::after {\n  content: \" *\";\n  color: #dc3545;\n}\n","size_bytes":18644},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/contexts/auth-context.tsx":{"content":"import { createContext, useContext, useState, useEffect } from 'react';\nimport { User } from '@shared/schema';\n\ninterface AuthContextType {\n  user: User | null;\n  login: (username: string, password: string) => Promise<boolean>;\n  logout: () => void;\n  isLoading: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    // Check for stored session\n    const storedUser = localStorage.getItem('crm_user');\n    if (storedUser) {\n      setUser(JSON.parse(storedUser));\n    }\n    setIsLoading(false);\n  }, []);\n\n  const login = async (username: string, password: string): Promise<boolean> => {\n    try {\n      const response = await fetch('/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ username, password }),\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        setUser(data.user);\n        localStorage.setItem('crm_user', JSON.stringify(data.user));\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('Login error:', error);\n      return false;\n    }\n  };\n\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('crm_user');\n  };\n\n  return (\n    <AuthContext.Provider value={{ user, login, logout, isLoading }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}\n","size_bytes":1792},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/auth.ts":{"content":"export function capitalizeFirst(str: string): string {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\nexport function formatPhone(phone: string): string {\n  const cleaned = phone.replace(/\\D/g, '');\n  const match = cleaned.match(/^(\\d{3})(\\d{3})(\\d{4})$/);\n  if (match) {\n    return `(${match[1]}) ${match[2]}-${match[3]}`;\n  }\n  return phone;\n}\n\nexport function formatCurrency(amount: string | number): string {\n  const num = typeof amount === 'string' ? parseFloat(amount) : amount;\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n  }).format(num);\n}\n\nexport function formatDate(date: string | Date): string {\n  const d = typeof date === 'string' ? new Date(date) : date;\n  return d.toLocaleDateString('en-US', {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric'\n  });\n}\n\nexport function getStatusColor(status: string): string {\n  const statusColors: Record<string, string> = {\n    'new': 'success',\n    'in-progress': 'warning', \n    'quoted': 'info',\n    'sold': 'success',\n    'not-interested': 'secondary',\n    'not-service-area': 'secondary',\n    'not-compatible': 'secondary'\n  };\n  return statusColors[status] || 'secondary';\n}\n\nexport function getOriginColor(origin: string): string {\n  const originColors: Record<string, string> = {\n    'facebook': 'primary',\n    'google': 'info',\n    'instagram': 'warning',\n    'referral': 'secondary',\n    'website': 'success',\n    'phone': 'primary',\n    'email': 'info'\n  };\n  return originColors[origin] || 'secondary';\n}\n","size_bytes":1530},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/dashboard.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { useAuth } from '@/contexts/auth-context';\nimport { capitalizeFirst, formatCurrency, formatDate, getStatusColor } from '@/lib/auth';\nimport { Lead } from '@shared/schema';\nimport { useState } from 'react';\nimport { QuickEditModal } from '@/components/modals/quick-edit-modal';\n\ninterface DashboardStats {\n  totalLeads: number;\n  soldLeads: number;\n  todayFollowups: number;\n  newToday: number;\n}\n\nexport default function Dashboard() {\n  const { user } = useAuth();\n  const [selectedLead, setSelectedLead] = useState<Lead | null>(null);\n  const [showQuickEdit, setShowQuickEdit] = useState(false);\n\n  const { data: stats, isLoading: statsLoading } = useQuery<DashboardStats>({\n    queryKey: ['/api/dashboard/stats'],\n  });\n\n  const { data: leadsResponse, isLoading: leadsLoading } = useQuery<{\n    leads: Lead[];\n    total: number;\n    page: number;\n    totalPages: number;\n  }>({\n    queryKey: ['/api/leads', 1, 10], // Get first page with 10 leads for dashboard\n    queryFn: async () => {\n      const response = await fetch('/api/leads?page=1&limit=10');\n      if (!response.ok) {\n        throw new Error('Failed to fetch leads');\n      }\n      return response.json();\n    }\n  });\n\n  const { data: followupsData, isLoading: followupsLoading } = useQuery<{\n    overdue: Lead[];\n    dueToday: Lead[];\n    upcoming: Lead[];\n  }>({\n    queryKey: ['/api/followups'],\n  });\n\n  const openQuickEdit = (lead: Lead) => {\n    setSelectedLead(lead);\n    setShowQuickEdit(true);\n  };\n\n  const isOverdue = (date: string | Date | null) => {\n    if (!date) return false;\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    const followupDate = new Date(date);\n    return followupDate < today;\n  };\n\n  const isDueToday = (date: string | Date | null) => {\n    if (!date) return false;\n    const today = new Date();\n    const followupDate = new Date(date);\n    return (\n      today.getDate() === followupDate.getDate() &&\n      today.getMonth() === followupDate.getMonth() &&\n      today.getFullYear() === followupDate.getFullYear()\n    );\n  };\n\n  const recentLeads = leadsResponse?.leads?.slice(0, 3) || [];\n  const todaysFollowups = followupsData ? [...followupsData.overdue, ...followupsData.dueToday] : [];\n\n  if (statsLoading || leadsLoading || followupsLoading) {\n    return (\n      <div className=\"container-fluid py-4\">\n        <div className=\"d-flex justify-content-center align-items-center\" style={{ height: '50vh' }}>\n          <div className=\"text-center\">\n            <i className=\"fas fa-spinner fa-spin fa-3x text-primary mb-3\"></i>\n            <p>Loading dashboard...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container-fluid py-4\">\n      <div className=\"row mb-4\">\n        <div className=\"col\">\n          <h1 className=\"h3 fw-bold\" data-testid=\"dashboard-welcome\">\n            Welcome back, {user ? capitalizeFirst(user.username) : 'User'}!\n          </h1>\n          <p className=\"text-muted\" data-testid=\"dashboard-subtitle\">\n            Here's what's happening with your leads today.\n          </p>\n        </div>\n      </div>\n\n      {/* Statistics Cards */}\n      <div className=\"row mb-4\">\n        <div className=\"col-md-3 mb-3\">\n          <div className=\"card stats-card\" data-testid=\"stat-total-leads\">\n            <div className=\"card-body\">\n              <div className=\"d-flex justify-content-between align-items-center\">\n                <div>\n                  <h6 className=\"card-title text-muted mb-1\">Total Leads</h6>\n                  <h3 className=\"fw-bold text-primary\">{stats?.totalLeads || 0}</h3>\n                </div>\n                <div className=\"text-primary\">\n                  <i className=\"fas fa-users fa-2x\"></i>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"col-md-3 mb-3\">\n          <div className=\"card stats-card\" data-testid=\"stat-sold-leads\">\n            <div className=\"card-body\">\n              <div className=\"d-flex justify-content-between align-items-center\">\n                <div>\n                  <h6 className=\"card-title text-muted mb-1\">Sold Leads</h6>\n                  <h3 className=\"fw-bold text-success\">{stats?.soldLeads || 0}</h3>\n                </div>\n                <div className=\"text-success\">\n                  <i className=\"fas fa-handshake fa-2x\"></i>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"col-md-3 mb-3\">\n          <div className=\"card stats-card\" data-testid=\"stat-today-followups\">\n            <div className=\"card-body\">\n              <div className=\"d-flex justify-content-between align-items-center\">\n                <div>\n                  <h6 className=\"card-title text-muted mb-1\">Today's Follow-ups</h6>\n                  <h3 className=\"fw-bold text-warning\">{stats?.todayFollowups || 0}</h3>\n                </div>\n                <div className=\"text-warning\">\n                  <i className=\"fas fa-calendar-day fa-2x\"></i>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"col-md-3 mb-3\">\n          <div className=\"card stats-card\" data-testid=\"stat-new-today\">\n            <div className=\"card-body\">\n              <div className=\"d-flex justify-content-between align-items-center\">\n                <div>\n                  <h6 className=\"card-title text-muted mb-1\">New Today</h6>\n                  <h3 className=\"fw-bold text-info\">{stats?.newToday || 0}</h3>\n                </div>\n                <div className=\"text-info\">\n                  <i className=\"fas fa-plus-circle fa-2x\"></i>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"row\">\n        {/* Today's Follow-ups */}\n        <div className=\"col-lg-6 mb-4\">\n          <div className=\"card\" data-testid=\"todays-followups\">\n            <div className=\"card-header d-flex justify-content-between align-items-center\">\n              <h5 className=\"mb-0\">\n                <i className=\"fas fa-clock me-2\"></i>Today's Follow-ups\n              </h5>\n              <span className=\"badge bg-warning\">{todaysFollowups.length} pending</span>\n            </div>\n            <div className=\"card-body p-0\">\n              {todaysFollowups.length === 0 ? (\n                <div className=\"p-4 text-center text-muted\">\n                  <i className=\"fas fa-check-circle fa-3x mb-3\"></i>\n                  <p>No follow-ups due today!</p>\n                </div>\n              ) : (\n                <div className=\"list-group list-group-flush\">\n                  {todaysFollowups.slice(0, 3).map((lead) => (\n                    <div\n                      key={lead.id}\n                      className={`list-group-item ${\n                        isOverdue(lead.next_followup_date) ? 'follow-up-overdue' :\n                        isDueToday(lead.next_followup_date) ? 'follow-up-today' : ''\n                      }`}\n                      data-testid={`followup-item-${lead.id}`}\n                    >\n                      <div className=\"d-flex justify-content-between align-items-center\">\n                        <div>\n                          <h6 className=\"mb-1\">{lead.name}</h6>\n                          <p className=\"mb-1 text-muted small\">Phone: {lead.phone}</p>\n                          <small className={\n                            isOverdue(lead.next_followup_date) ? 'text-danger' : \n                            isDueToday(lead.next_followup_date) ? 'text-warning' : 'text-success'\n                          }>\n                            <i className={`fas ${\n                              isOverdue(lead.next_followup_date) ? 'fa-exclamation-triangle' :\n                              isDueToday(lead.next_followup_date) ? 'fa-clock' : 'fa-check'\n                            } me-1`}></i>\n                            {isOverdue(lead.next_followup_date) ? 'Overdue' :\n                             isDueToday(lead.next_followup_date) ? 'Due today' : 'Scheduled'}\n                          </small>\n                        </div>\n                        <div className=\"text-end\">\n                          <button\n                            className=\"btn btn-sm btn-outline-primary me-1\"\n                            onClick={() => openQuickEdit(lead)}\n                            data-testid={`button-edit-${lead.id}`}\n                          >\n                            <i className=\"fas fa-edit\"></i>\n                          </button>\n                          <button className=\"btn btn-sm btn-outline-success\" data-testid={`button-call-${lead.id}`}>\n                            <i className=\"fas fa-phone\"></i>\n                          </button>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n            <div className=\"card-footer text-center\">\n              <a href=\"/followups\" className=\"btn btn-outline-primary btn-sm\" data-testid=\"view-all-followups\">\n                View All Follow-ups <i className=\"fas fa-arrow-right ms-1\"></i>\n              </a>\n            </div>\n          </div>\n        </div>\n\n        {/* Recent Leads */}\n        <div className=\"col-lg-6 mb-4\">\n          <div className=\"card\" data-testid=\"recent-leads\">\n            <div className=\"card-header d-flex justify-content-between align-items-center\">\n              <h5 className=\"mb-0\">\n                <i className=\"fas fa-user-plus me-2\"></i>Recent Leads (Last 7 Days)\n              </h5>\n              <span className=\"badge bg-info\">{recentLeads.length} new</span>\n            </div>\n            <div className=\"card-body p-0\">\n              {recentLeads.length === 0 ? (\n                <div className=\"p-4 text-center text-muted\">\n                  <i className=\"fas fa-inbox fa-3x mb-3\"></i>\n                  <p>No recent leads</p>\n                </div>\n              ) : (\n                <div className=\"table-responsive\">\n                  <table className=\"table table-hover mb-0\">\n                    <thead className=\"table-light\">\n                      <tr>\n                        <th>Name</th>\n                        <th>Origin</th>\n                        <th>Status</th>\n                        <th>Amount</th>\n                        <th>Actions</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {recentLeads.map((lead) => (\n                        <tr key={lead.id} data-testid={`recent-lead-${lead.id}`}>\n                          <td>\n                            <div>\n                              <strong>{lead.name}</strong>\n                              <br />\n                              <small className=\"text-muted\">{lead.phone}</small>\n                            </div>\n                          </td>\n                          <td>\n                            <span className={`badge bg-primary`}>\n                              {lead.lead_origin}\n                            </span>\n                          </td>\n                          <td>\n                            <span className={`badge bg-${getStatusColor(lead.remarks)} status-badge`}>\n                              {lead.remarks}\n                            </span>\n                          </td>\n                          <td>\n                            {lead.project_amount ? formatCurrency(lead.project_amount) : '-'}\n                          </td>\n                          <td>\n                            <button\n                              className=\"btn btn-circle btn-outline-primary btn-sm\"\n                              onClick={() => openQuickEdit(lead)}\n                              data-testid={`button-quick-edit-${lead.id}`}\n                            >\n                              <i className=\"fas fa-edit\"></i>\n                            </button>\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              )}\n            </div>\n            <div className=\"card-footer text-center\">\n              <a href=\"/leads\" className=\"btn btn-outline-primary btn-sm\" data-testid=\"view-all-leads\">\n                View All Leads <i className=\"fas fa-arrow-right ms-1\"></i>\n              </a>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedLead && (\n        <QuickEditModal\n          lead={selectedLead}\n          show={showQuickEdit}\n          onHide={() => setShowQuickEdit(false)}\n          onSave={() => {\n            setShowQuickEdit(false);\n            // Refresh data would happen here\n          }}\n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":12884},"client/src/pages/followups.tsx":{"content":"import { useState, useRef } from 'react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { Lead } from '@shared/schema';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { useToast } from '@/hooks/use-toast';\nimport { queryClient } from '@/lib/queryClient';\nimport { QuickFollowupModal } from '@/components/modals/quick-followup-modal';\n\ninterface FollowupsData {\n  overdue: Lead[];\n  dueToday: Lead[];\n  upcoming: Lead[];\n}\n\nexport default function Followups() {\n  const { data: followupsData, isLoading } = useQuery<FollowupsData>({\n    queryKey: ['/api/followups'],\n  });\n  \n  const { data: installations = [] } = useQuery<Lead[]>({\n    queryKey: ['/api/installations'],\n  });\n  \n  const [selectedLead, setSelectedLead] = useState<Lead | null>(null);\n  const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n  const [activeSection, setActiveSection] = useState<string>('');\n  const [editingDate, setEditingDate] = useState<string | null>(null);\n  const [tempDate, setTempDate] = useState<string>('');\n  const [selectedFollowupLead, setSelectedFollowupLead] = useState<Lead | null>(null);\n  const [showQuickFollowup, setShowQuickFollowup] = useState(false);\n  \n  const overdueRef = useRef<HTMLDivElement>(null);\n  const todayRef = useRef<HTMLDivElement>(null);\n  const upcomingRef = useRef<HTMLDivElement>(null);\n  const installationsRef = useRef<HTMLDivElement>(null);\n  \n  const { toast } = useToast();\n  \n  const updateLeadMutation = useMutation({\n    mutationFn: async (data: { id: string; updates: Partial<Lead> }) => {\n      const response = await fetch('/api/leads/' + data.id, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data.updates),\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        console.error('Update failed:', errorData);\n        throw new Error(errorData.message || 'Failed to update lead');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/followups'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/installations'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/leads'] });\n      toast({ title: 'Lead updated successfully' });\n      setIsEditModalOpen(false);\n      setEditingDate(null);\n    },\n    onError: (error: Error) => {\n      console.error('Update mutation error:', error);\n      toast({ \n        title: 'Failed to update lead', \n        description: error.message,\n        variant: 'destructive' \n      });\n    },\n  });\n  \n  const scrollToSection = (ref: React.RefObject<HTMLDivElement>, section: string) => {\n    setActiveSection(section);\n    ref.current?.scrollIntoView({ behavior: 'smooth', block: 'start' });\n    setTimeout(() => setActiveSection(''), 2000);\n  };\n\n  const handleDateEdit = (leadId: string, currentDate: string | null) => {\n    setEditingDate(leadId);\n    setTempDate(currentDate ? new Date(currentDate).toISOString().split('T')[0] : '');\n  };\n\n  const handleDateSave = (leadId: string) => {\n    const newDate = tempDate ? tempDate : null;\n    updateLeadMutation.mutate({ \n      id: leadId, \n      updates: { next_followup_date: newDate } \n    });\n  };\n\n  const handleDateCancel = () => {\n    setEditingDate(null);\n    setTempDate('');\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"flex justify-center items-center min-h-[50vh]\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n            <p className=\"text-gray-600\">Loading follow-up management...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const { overdue = [], dueToday = [], upcoming = [] } = followupsData || {};\n  \n  // Filter out inactive leads (not interested, not compatible, not in service area)\n  const activeOverdue = overdue.filter(lead => !['not-interested', 'not-compatible', 'not-service-area'].includes(lead.remarks));\n  const activeDueToday = dueToday.filter(lead => !['not-interested', 'not-compatible', 'not-service-area'].includes(lead.remarks));\n  const activeUpcoming = upcoming.filter(lead => !['not-interested', 'not-compatible', 'not-service-area'].includes(lead.remarks));\n  \n  // Get next 7 days of upcoming follow-ups\n  const today = new Date();\n  const next7Days = new Date(today.getTime() + 7 * 24 * 60 * 60 * 1000);\n  const upcomingWeek = activeUpcoming.filter(lead => {\n    if (!lead.next_followup_date) return false;\n    const followupDate = new Date(lead.next_followup_date);\n    return followupDate <= next7Days;\n  });\n  \n  // Scheduled installations (sold leads with installation dates)\n  const scheduledInstallations = installations.filter(lead => lead.installation_date);\n  \n  const handleQuickEdit = (lead: Lead) => {\n    setSelectedLead(lead);\n    setIsEditModalOpen(true);\n  };\n  \n  const handleQuickUpdate = (leadId: string, updates: Partial<Lead>) => {\n    updateLeadMutation.mutate({ id: leadId, updates });\n  };\n\n  const openQuickFollowup = (lead: Lead) => {\n    setSelectedFollowupLead(lead);\n    setShowQuickFollowup(true);\n  };\n  \n  const formatCurrency = (amount: string | null) => {\n    if (!amount) return 'Not set';\n    return new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(parseFloat(amount));\n  };\n  \n  const formatDate = (dateString: string | null) => {\n    if (!dateString) return 'Not set';\n    return new Date(dateString).toLocaleDateString('en-US', { \n      weekday: 'short', \n      month: 'short', \n      day: 'numeric',\n      year: 'numeric'\n    });\n  };\n  \n  const getPaymentStatusBadge = (lead: Lead) => {\n    if (lead.remarks !== 'sold') return null;\n    \n    const depositPaid = lead.deposit_paid;\n    const balancePaid = lead.balance_paid;\n    \n    if (balancePaid) {\n      return <Badge className=\"bg-green-100 text-green-800\">Paid in Full</Badge>;\n    } else if (depositPaid) {\n      return <Badge className=\"bg-yellow-100 text-yellow-800\">Deposit Paid</Badge>;\n    } else {\n      return <Badge className=\"bg-red-100 text-red-800\">Payment Pending</Badge>;\n    }\n  };\n  \n  const getTeamMemberName = (assignee: string) => {\n    const names: Record<string, string> = {\n      'kim': 'Kim',\n      'patrick': 'Patrick', \n      'lina': 'Lina'\n    };\n    return names[assignee] || assignee;\n  };\n  \n  const getLeadOriginDisplay = (origin: string) => {\n    return origin.charAt(0).toUpperCase() + origin.slice(1).replace('-', ' ');\n  };\n\n  const renderFollowupTable = (leads: Lead[], colorTheme: string, sectionType: string) => {\n    const themeClasses = {\n      red: {\n        headerBg: 'bg-red-50',\n        headerBorder: 'border-red-200',\n        headerText: 'text-red-900',\n        rowBorder: 'border-red-100',\n        rowHover: 'hover:bg-red-25',\n        rowAlt: 'bg-red-25',\n        text: 'text-gray-900' // Changed from text-red-700 to dark gray for better readability\n      },\n      yellow: {\n        headerBg: 'bg-yellow-50',\n        headerBorder: 'border-yellow-200',\n        headerText: 'text-yellow-900',\n        rowBorder: 'border-yellow-100',\n        rowHover: 'hover:bg-yellow-25',\n        rowAlt: 'bg-yellow-25',\n        text: 'text-gray-900' // Changed from text-yellow-700 to dark gray for better readability\n      },\n      blue: {\n        headerBg: 'bg-blue-50',\n        headerBorder: 'border-blue-200',\n        headerText: 'text-blue-900',\n        rowBorder: 'border-blue-100',\n        rowHover: 'hover:bg-blue-25',\n        rowAlt: 'bg-blue-25',\n        text: 'text-gray-900' // Changed from text-blue-700 to dark gray for better readability\n      }\n    };\n\n    const theme = themeClasses[colorTheme as keyof typeof themeClasses];\n\n    return (\n      <div className=\"overflow-x-auto\">\n        <table className=\"w-full text-sm\">\n          <thead className={`${theme.headerBg} ${theme.headerBorder} border-b`}>\n            <tr>\n              <th className={`text-left py-4 px-6 font-semibold ${theme.headerText}`}>Date Created</th>\n              <th className={`text-left py-4 px-6 font-semibold ${theme.headerText}`}>Contact</th>\n              <th className={`text-left py-4 px-6 font-semibold ${theme.headerText}`}>Lead Origin</th>\n              <th className={`text-left py-4 px-6 font-semibold ${theme.headerText}`}>Next Follow-up Date</th>\n              <th className={`text-left py-4 px-6 font-semibold ${theme.headerText}`}>Status</th>\n              <th className={`text-left py-4 px-6 font-semibold ${theme.headerText}`}>Project Amount</th>\n              <th className={`text-left py-4 px-6 font-semibold ${theme.headerText}`}>Assigned To</th>\n              <th className={`text-center py-4 px-6 font-semibold ${theme.headerText}`}>Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {leads.map((lead, index) => (\n              <tr key={lead.id} className={`${theme.rowBorder} border-b ${theme.rowHover} ${\n                index % 2 === 0 ? 'bg-white' : theme.rowAlt\n              }`} data-testid={`${sectionType}-lead-${lead.id}`}>\n                <td className=\"py-4 px-6\">\n                  <span className={theme.text}>\n                    {formatDate(lead.date_created)}\n                  </span>\n                </td>\n                <td className=\"py-4 px-6\">\n                  <div className={theme.text}>\n                    <p className=\"font-semibold text-base\">{lead.name}</p>\n                    <p className=\"text-sm font-medium text-gray-700\">{lead.phone}</p>\n                    {lead.email && <p className=\"text-sm text-gray-600\">{lead.email}</p>}\n                  </div>\n                </td>\n                <td className=\"py-4 px-6\">\n                  <span className={`${theme.text} capitalize`}>\n                    {getLeadOriginDisplay(lead.lead_origin)}\n                  </span>\n                </td>\n                <td className=\"py-4 px-6\">\n                  {editingDate === lead.id ? (\n                    <div className=\"flex gap-2 items-center\">\n                      <Input\n                        type=\"date\"\n                        value={tempDate}\n                        onChange={(e) => setTempDate(e.target.value)}\n                        className=\"w-32\"\n                        data-testid={`input-date-${lead.id}`}\n                      />\n                      <Button\n                        size=\"sm\"\n                        onClick={() => handleDateSave(lead.id)}\n                        className=\"px-2 py-1\"\n                        data-testid={`button-save-date-${lead.id}`}\n                      >\n                        ✓\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={handleDateCancel}\n                        className=\"px-2 py-1\"\n                        data-testid={`button-cancel-date-${lead.id}`}\n                      >\n                        ✕\n                      </Button>\n                    </div>\n                  ) : (\n                    <div\n                      className={`${theme.text} cursor-pointer hover:underline`}\n                      onClick={() => handleDateEdit(lead.id, lead.next_followup_date)}\n                      data-testid={`text-next-followup-${lead.id}`}\n                    >\n                      {formatDate(lead.next_followup_date ? lead.next_followup_date.toString() : null)}\n                    </div>\n                  )}\n                </td>\n                <td className=\"py-4 px-6\">\n                  <div>\n                    <Badge className={`${colorTheme === 'red' ? 'bg-red-200 text-red-800' : \n                                     colorTheme === 'yellow' ? 'bg-yellow-200 text-yellow-800' : \n                                     'bg-blue-200 text-blue-800'} capitalize`}>\n                      {lead.remarks}\n                    </Badge>\n                    {getPaymentStatusBadge(lead) && (\n                      <div className=\"mt-1\">{getPaymentStatusBadge(lead)}</div>\n                    )}\n                  </div>\n                </td>\n                <td className=\"py-4 px-6\">\n                  <span className={`font-medium ${theme.text}`}>\n                    {formatCurrency(lead.project_amount)}\n                  </span>\n                </td>\n                <td className=\"py-4 px-6\">\n                  <span className={theme.text}>\n                    {getTeamMemberName(lead.assigned_to)}\n                  </span>\n                </td>\n                <td className=\"py-4 px-6\">\n                  <div className=\"flex gap-2 justify-center\">\n                    <Button \n                      size=\"sm\" \n                      variant=\"outline\" \n                      className={`${colorTheme === 'red' ? 'border-red-300 text-red-700 hover:bg-red-100' : \n                                 colorTheme === 'yellow' ? 'border-yellow-300 text-yellow-700 hover:bg-yellow-100' : \n                                 'border-blue-300 text-blue-700 hover:bg-blue-100'}`}\n                      onClick={() => openQuickFollowup(lead)}\n                      title=\"Quick Follow-up Update\"\n                      data-testid={`button-followup-${sectionType}-${lead.id}`}\n                    >\n                      📅\n                    </Button>\n                    <Button \n                      size=\"sm\" \n                      variant=\"outline\" \n                      className={`${colorTheme === 'red' ? 'border-red-300 text-red-700 hover:bg-red-100' : \n                                 colorTheme === 'yellow' ? 'border-yellow-300 text-yellow-700 hover:bg-yellow-100' : \n                                 'border-blue-300 text-blue-700 hover:bg-blue-100'}`}\n                      onClick={() => window.open(`tel:${lead.phone}`, '_self')}\n                      data-testid={`button-call-${sectionType}-${lead.id}`}\n                    >\n                      📞\n                    </Button>\n                    <Button \n                      size=\"sm\" \n                      variant=\"outline\" \n                      className={`${colorTheme === 'red' ? 'border-red-300 text-red-700 hover:bg-red-100' : \n                                 colorTheme === 'yellow' ? 'border-yellow-300 text-yellow-700 hover:bg-yellow-100' : \n                                 'border-blue-300 text-blue-700 hover:bg-blue-100'}`}\n                      onClick={() => handleQuickEdit(lead)}\n                      data-testid={`button-edit-${sectionType}-${lead.id}`}\n                    >\n                      ✏️\n                    </Button>\n                  </div>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      {/* Header */}\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-gray-900\" data-testid=\"followups-title\">\n          Follow-Up Management\n        </h1>\n        <p className=\"text-gray-600 mt-2\">\n          Revenue-focused lead follow-up system with smart prioritization\n        </p>\n      </div>\n      \n      {/* Real-Time Dashboard Analytics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n        {/* Overdue Statistics Card */}\n        <Card \n          className={`cursor-pointer transition-all duration-300 hover:shadow-lg border-red-200 bg-red-50 ${\n            activeSection === 'overdue' ? 'ring-2 ring-red-500' : ''\n          }`}\n          onClick={() => scrollToSection(overdueRef, 'overdue')}\n          data-testid=\"stats-overdue\"\n        >\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-red-700 text-sm font-medium flex items-center\">\n              <span className=\"w-2 h-2 bg-red-500 rounded-full mr-2\"></span>\n              CRITICAL - OVERDUE\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-3xl font-bold text-red-800\">{activeOverdue.length}</div>\n            <p className=\"text-red-600 text-sm mt-1\">Immediate action needed</p>\n          </CardContent>\n        </Card>\n        \n        {/* Due Today Statistics Card */}\n        <Card \n          className={`cursor-pointer transition-all duration-300 hover:shadow-lg border-yellow-200 bg-yellow-50 ${\n            activeSection === 'today' ? 'ring-2 ring-yellow-500' : ''\n          }`}\n          onClick={() => scrollToSection(todayRef, 'today')}\n          data-testid=\"stats-today\"\n        >\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-yellow-700 text-sm font-medium flex items-center\">\n              <span className=\"w-2 h-2 bg-yellow-500 rounded-full mr-2\"></span>\n              URGENT - DUE TODAY\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-3xl font-bold text-yellow-800\">{activeDueToday.length}</div>\n            <p className=\"text-yellow-600 text-sm mt-1\">Today's priorities</p>\n          </CardContent>\n        </Card>\n        \n        {/* Upcoming 7 Days Statistics Card */}\n        <Card \n          className={`cursor-pointer transition-all duration-300 hover:shadow-lg border-blue-200 bg-blue-50 ${\n            activeSection === 'upcoming' ? 'ring-2 ring-blue-500' : ''\n          }`}\n          onClick={() => scrollToSection(upcomingRef, 'upcoming')}\n          data-testid=\"stats-upcoming\"\n        >\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-blue-700 text-sm font-medium flex items-center\">\n              <span className=\"w-2 h-2 bg-blue-500 rounded-full mr-2\"></span>\n              UPCOMING - 7 DAYS\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-3xl font-bold text-blue-800\">{upcomingWeek.length}</div>\n            <p className=\"text-blue-600 text-sm mt-1\">Week planning</p>\n          </CardContent>\n        </Card>\n        \n        {/* Scheduled Installations Statistics Card */}\n        <Card \n          className={`cursor-pointer transition-all duration-300 hover:shadow-lg border-green-200 bg-green-50 ${\n            activeSection === 'installations' ? 'ring-2 ring-green-500' : ''\n          }`}\n          onClick={() => scrollToSection(installationsRef, 'installations')}\n          data-testid=\"stats-installations\"\n        >\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-green-700 text-sm font-medium flex items-center\">\n              <span className=\"w-2 h-2 bg-green-500 rounded-full mr-2\"></span>\n              REVENUE - INSTALLATIONS\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-3xl font-bold text-green-800\">{scheduledInstallations.length}</div>\n            <p className=\"text-green-600 text-sm mt-1\">Revenue delivery</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Overdue Follow-ups Table */}\n      <div ref={overdueRef} className=\"mb-12\">\n        <h2 className=\"text-2xl font-bold text-red-800 mb-6 flex items-center\">\n          <span className=\"w-3 h-3 bg-red-500 rounded-full mr-3\"></span>\n          CRITICAL - Overdue Follow-ups ({activeOverdue.length})\n        </h2>\n        \n        {activeOverdue.length === 0 ? (\n          <Card className=\"border-red-200 bg-red-50\">\n            <CardContent className=\"text-center py-12\">\n              <div className=\"text-6xl text-red-300 mb-4\">✓</div>\n              <p className=\"text-red-600 text-lg\">Excellent! No overdue follow-ups!</p>\n            </CardContent>\n          </Card>\n        ) : (\n          <Card className=\"border-red-200\">\n            <CardContent className=\"p-0\">\n              {renderFollowupTable(activeOverdue, 'red', 'overdue')}\n            </CardContent>\n          </Card>\n        )}\n      </div>\n\n      {/* Due Today Follow-ups Table */}\n      <div ref={todayRef} className=\"mb-12\">\n        <h2 className=\"text-2xl font-bold text-yellow-800 mb-6 flex items-center\">\n          <span className=\"w-3 h-3 bg-yellow-500 rounded-full mr-3\"></span>\n          URGENT - Due Today ({activeDueToday.length})\n        </h2>\n        \n        {activeDueToday.length === 0 ? (\n          <Card className=\"border-yellow-200 bg-yellow-50\">\n            <CardContent className=\"text-center py-12\">\n              <div className=\"text-6xl text-yellow-300 mb-4\">📅</div>\n              <p className=\"text-yellow-600 text-lg\">No follow-ups due today!</p>\n            </CardContent>\n          </Card>\n        ) : (\n          <Card className=\"border-yellow-200\">\n            <CardContent className=\"p-0\">\n              {renderFollowupTable(activeDueToday, 'yellow', 'today')}\n            </CardContent>\n          </Card>\n        )}\n      </div>\n\n      {/* Upcoming Follow-ups Table */}\n      <div ref={upcomingRef} className=\"mb-12\">\n        <h2 className=\"text-2xl font-bold text-blue-800 mb-6 flex items-center\">\n          <span className=\"w-3 h-3 bg-blue-500 rounded-full mr-3\"></span>\n          UPCOMING - Next 7 Days ({upcomingWeek.length})\n        </h2>\n        \n        {upcomingWeek.length === 0 ? (\n          <Card className=\"border-blue-200 bg-blue-50\">\n            <CardContent className=\"text-center py-12\">\n              <div className=\"text-6xl text-blue-300 mb-4\">📈</div>\n              <p className=\"text-blue-600 text-lg\">No follow-ups scheduled for the next 7 days!</p>\n            </CardContent>\n          </Card>\n        ) : (\n          <Card className=\"border-blue-200\">\n            <CardContent className=\"p-0\">\n              {renderFollowupTable(upcomingWeek, 'blue', 'upcoming')}\n            </CardContent>\n          </Card>\n        )}\n      </div>\n\n      {/* Scheduled Installations Table */}\n      <div ref={installationsRef} className=\"mb-12\">\n        <h2 className=\"text-2xl font-bold text-green-800 mb-6 flex items-center\">\n          <span className=\"w-3 h-3 bg-green-500 rounded-full mr-3\"></span>\n          SCHEDULED INSTALLATIONS ({scheduledInstallations.length})\n        </h2>\n        \n        {scheduledInstallations.length === 0 ? (\n          <Card className=\"border-green-200 bg-green-50\">\n            <CardContent className=\"text-center py-12\">\n              <div className=\"text-6xl text-green-300 mb-4\">🏗️</div>\n              <p className=\"text-green-600 text-lg\">No installations scheduled!</p>\n            </CardContent>\n          </Card>\n        ) : (\n          <Card className=\"border-green-200\">\n            <CardContent className=\"p-0\">\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full text-sm\">\n                  <thead className=\"bg-green-50 border-b border-green-200\">\n                    <tr>\n                      <th className=\"text-left py-4 px-6 font-semibold text-green-900\">Customer</th>\n                      <th className=\"text-left py-4 px-6 font-semibold text-green-900\">Contact</th>\n                      <th className=\"text-left py-4 px-6 font-semibold text-green-900\">Installation Date</th>\n                      <th className=\"text-left py-4 px-6 font-semibold text-green-900\">Installer</th>\n                      <th className=\"text-left py-4 px-6 font-semibold text-green-900\">Project Value</th>\n                      <th className=\"text-left py-4 px-6 font-semibold text-green-900\">Payment Status</th>\n                      <th className=\"text-center py-4 px-6 font-semibold text-green-900\">Actions</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {scheduledInstallations.map((lead, index) => (\n                      <tr key={lead.id} className={`border-b border-green-100 hover:bg-green-25 ${\n                        index % 2 === 0 ? 'bg-white' : 'bg-green-25'\n                      }`} data-testid={`installation-lead-${lead.id}`}>\n                        <td className=\"py-4 px-6\">\n                          <div>\n                            <h3 className=\"font-semibold text-gray-900\">{lead.name}</h3>\n                            <p className=\"text-gray-700 text-sm\">Assigned: {getTeamMemberName(lead.assigned_to)}</p>\n                          </div>\n                        </td>\n                        <td className=\"py-4 px-6\">\n                          <div className=\"text-gray-900\">\n                            <p className=\"font-medium\">{lead.phone}</p>\n                            {lead.email && <p className=\"text-sm text-gray-600\">{lead.email}</p>}\n                          </div>\n                        </td>\n                        <td className=\"py-4 px-6\">\n                          <span className=\"text-gray-900 font-medium\">\n                            {formatDate(lead.installation_date ? lead.installation_date.toString() : null)}\n                          </span>\n                        </td>\n                        <td className=\"py-4 px-6\">\n                          <span className=\"text-gray-900 capitalize font-medium\">\n                            {lead.assigned_installer || 'Not assigned'}\n                          </span>\n                        </td>\n                        <td className=\"py-4 px-6\">\n                          <span className=\"font-medium text-gray-900\">\n                            {formatCurrency(lead.project_amount)}\n                          </span>\n                        </td>\n                        <td className=\"py-4 px-6\">\n                          {getPaymentStatusBadge(lead)}\n                        </td>\n                        <td className=\"py-4 px-6\">\n                          <div className=\"flex gap-2 justify-center\">\n                            <Button \n                              size=\"sm\" \n                              variant=\"outline\" \n                              className=\"border-green-300 text-green-700 hover:bg-green-100\"\n                              onClick={() => window.open(`tel:${lead.phone}`, '_self')}\n                              data-testid={`button-call-installation-${lead.id}`}\n                            >\n                              📞\n                            </Button>\n                            <Button \n                              size=\"sm\" \n                              variant=\"outline\" \n                              className=\"border-green-300 text-green-700 hover:bg-green-100\"\n                              onClick={() => handleQuickEdit(lead)}\n                              data-testid={`button-edit-installation-${lead.id}`}\n                            >\n                              ✏️\n                            </Button>\n                          </div>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n\n      {/* Quick Edit Modal */}\n      <Dialog open={isEditModalOpen} onOpenChange={setIsEditModalOpen}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Quick Edit Lead</DialogTitle>\n          </DialogHeader>\n          {selectedLead && <QuickEditForm lead={selectedLead} />}\n        </DialogContent>\n      </Dialog>\n\n      <QuickFollowupModal\n        lead={selectedFollowupLead}\n        show={showQuickFollowup}\n        onHide={() => {\n          setShowQuickFollowup(false);\n          setSelectedFollowupLead(null);\n        }}\n      />\n    </div>\n  );\n}\n\n// Quick Edit Form Component\nfunction QuickEditForm({ lead }: { lead: Lead }) {\n  const [formData, setFormData] = useState({\n    next_followup_date: lead.next_followup_date ? new Date(lead.next_followup_date).toISOString().split('T')[0] : '',\n    remarks: lead.remarks,\n    notes: lead.notes || '',\n    project_amount: lead.project_amount || '',\n    assigned_to: lead.assigned_to,\n    installation_date: lead.installation_date ? new Date(lead.installation_date).toISOString().split('T')[0] : '',\n    assigned_installer: lead.assigned_installer || '',\n    deposit_paid: lead.deposit_paid || false,\n    balance_paid: lead.balance_paid || false,\n  });\n\n  const { toast } = useToast();\n\n  const updateLeadMutation = useMutation({\n    mutationFn: async (updates: Partial<Lead>) => {\n      const response = await fetch('/api/leads/' + lead.id, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(updates),\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Failed to update lead');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/followups'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/installations'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/leads'] });\n      toast({ title: 'Lead updated successfully' });\n    },\n    onError: (error: Error) => {\n      toast({ \n        title: 'Failed to update lead', \n        description: error.message,\n        variant: 'destructive' \n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    const updates: Partial<Lead> = {\n      next_followup_date: formData.next_followup_date ? formData.next_followup_date : null,\n      remarks: formData.remarks,\n      notes: formData.notes || null,\n      project_amount: formData.project_amount || null,\n      assigned_to: formData.assigned_to,\n      installation_date: formData.installation_date ? formData.installation_date : null,\n      assigned_installer: formData.assigned_installer || null,\n      deposit_paid: formData.deposit_paid,\n      balance_paid: formData.balance_paid,\n    };\n\n    updateLeadMutation.mutate(updates);\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-4\">\n      <div>\n        <Label htmlFor=\"next_followup_date\">Next Follow-up Date</Label>\n        <Input\n          id=\"next_followup_date\"\n          type=\"date\"\n          value={formData.next_followup_date}\n          onChange={(e) => setFormData(prev => ({ ...prev, next_followup_date: e.target.value }))}\n          data-testid=\"input-next-followup-date\"\n        />\n      </div>\n\n      <div>\n        <Label htmlFor=\"status\">Status</Label>\n        <Select\n          value={formData.remarks}\n          onValueChange={(value) => setFormData(prev => ({ ...prev, remarks: value }))}\n        >\n          <SelectTrigger data-testid=\"select-status\">\n            <SelectValue />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"new\">New</SelectItem>\n            <SelectItem value=\"in-progress\">In Progress</SelectItem>\n            <SelectItem value=\"quoted\">Quoted</SelectItem>\n            <SelectItem value=\"sold\">Sold</SelectItem>\n            <SelectItem value=\"not-interested\">Not Interested</SelectItem>\n            <SelectItem value=\"not-service-area\">Not Service Area</SelectItem>\n            <SelectItem value=\"not-compatible\">Not Compatible</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n\n      <div>\n        <Label htmlFor=\"project_amount\">Project Amount</Label>\n        <Input\n          id=\"project_amount\"\n          type=\"number\"\n          step=\"0.01\"\n          placeholder=\"0.00\"\n          value={formData.project_amount}\n          onChange={(e) => setFormData(prev => ({ ...prev, project_amount: e.target.value }))}\n          data-testid=\"input-project-amount\"\n        />\n      </div>\n\n      <div>\n        <Label htmlFor=\"assigned_to\">Assigned To</Label>\n        <Select\n          value={formData.assigned_to}\n          onValueChange={(value) => setFormData(prev => ({ ...prev, assigned_to: value }))}\n        >\n          <SelectTrigger data-testid=\"select-assigned-to\">\n            <SelectValue />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"kim\">Kim</SelectItem>\n            <SelectItem value=\"patrick\">Patrick</SelectItem>\n            <SelectItem value=\"lina\">Lina</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n\n      <div>\n        <Label htmlFor=\"notes\">Notes</Label>\n        <Textarea\n          id=\"notes\"\n          value={formData.notes}\n          onChange={(e) => setFormData(prev => ({ ...prev, notes: e.target.value }))}\n          data-testid=\"textarea-notes\"\n        />\n      </div>\n\n      {formData.remarks === 'sold' && (\n        <>\n          <div>\n            <Label htmlFor=\"installation_date\">Installation Date</Label>\n            <Input\n              id=\"installation_date\"\n              type=\"date\"\n              value={formData.installation_date}\n              onChange={(e) => setFormData(prev => ({ ...prev, installation_date: e.target.value }))}\n              data-testid=\"input-installation-date\"\n            />\n          </div>\n\n          <div>\n            <Label htmlFor=\"assigned_installer\">Assigned Installer</Label>\n            <Select\n              value={formData.assigned_installer}\n              onValueChange={(value) => setFormData(prev => ({ ...prev, assigned_installer: value }))}\n            >\n              <SelectTrigger data-testid=\"select-assigned-installer\">\n                <SelectValue placeholder=\"Select installer\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"angel\">Angel</SelectItem>\n                <SelectItem value=\"brian\">Brian</SelectItem>\n                <SelectItem value=\"luis\">Luis</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"flex items-center space-x-2\">\n            <Checkbox\n              id=\"deposit_paid\"\n              checked={formData.deposit_paid}\n              onCheckedChange={(checked) => setFormData(prev => ({ ...prev, deposit_paid: checked as boolean }))}\n              data-testid=\"checkbox-deposit-paid\"\n            />\n            <Label htmlFor=\"deposit_paid\">Deposit Paid</Label>\n          </div>\n\n          <div className=\"flex items-center space-x-2\">\n            <Checkbox\n              id=\"balance_paid\"\n              checked={formData.balance_paid}\n              onCheckedChange={(checked) => setFormData(prev => ({ ...prev, balance_paid: checked as boolean }))}\n              data-testid=\"checkbox-balance-paid\"\n            />\n            <Label htmlFor=\"balance_paid\">Balance Paid</Label>\n          </div>\n        </>\n      )}\n\n      <div className=\"flex gap-3 pt-4\">\n        <Button type=\"submit\" disabled={updateLeadMutation.isPending} data-testid=\"button-save-lead\">\n          {updateLeadMutation.isPending ? 'Saving...' : 'Save Changes'}\n        </Button>\n      </div>\n    </form>\n  );\n}","size_bytes":35182},"client/src/pages/installations.tsx":{"content":"import { useQuery, useMutation } from '@tanstack/react-query';\nimport { Lead } from '@shared/schema';\nimport { formatCurrency, formatDate } from '@/lib/auth';\nimport { Button } from '@/components/ui/button';\nimport { useToast } from '@/hooks/use-toast';\nimport { queryClient } from '@/lib/queryClient';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Label } from '@/components/ui/label';\nimport { useState } from 'react';\n\nexport default function Installations() {\n  const { data: installations, isLoading } = useQuery<Lead[]>({\n    queryKey: ['/api/installations'],\n    queryFn: async () => {\n      const response = await fetch('/api/installations');\n      if (!response.ok) throw new Error('Failed to fetch installations');\n      return response.json();\n    }\n  });\n  \n  const [emailModalOpen, setEmailModalOpen] = useState(false);\n  const [selectedInstallation, setSelectedInstallation] = useState<Lead | null>(null);\n  const [emailType, setEmailType] = useState<'client' | 'installer'>('client');\n  const [customMessage, setCustomMessage] = useState('');\n  \n  const { toast } = useToast();\n  \n  const sendEmailMutation = useMutation({\n    mutationFn: async (data: { \n      installationId: string; \n      type: 'client' | 'installer'; \n      customMessage?: string \n    }) => {\n      const response = await fetch('/api/installations/email', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Failed to send email');\n      }\n      return response.json();\n    },\n    onSuccess: (data, variables) => {\n      toast({ \n        title: 'Email sent successfully', \n        description: `${variables.type === 'client' ? 'Client' : 'Installer'} has been notified about the installation.`\n      });\n      setEmailModalOpen(false);\n      setCustomMessage('');\n    },\n    onError: (error: Error) => {\n      toast({ \n        title: 'Failed to send email', \n        description: error.message,\n        variant: 'destructive' \n      });\n    },\n  });\n  \n  const handleEmailClient = (installation: Lead) => {\n    setSelectedInstallation(installation);\n    setEmailType('client');\n    setEmailModalOpen(true);\n  };\n  \n  const handleEmailInstaller = (installation: Lead) => {\n    setSelectedInstallation(installation);\n    setEmailType('installer');\n    setEmailModalOpen(true);\n  };\n  \n  const handleSendEmail = () => {\n    if (!selectedInstallation) return;\n    \n    sendEmailMutation.mutate({\n      installationId: selectedInstallation.id,\n      type: emailType,\n      customMessage: customMessage.trim() || undefined\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"container-fluid py-4\">\n        <div className=\"d-flex justify-content-center align-items-center\" style={{ height: '50vh' }}>\n          <div className=\"text-center\">\n            <i className=\"fas fa-spinner fa-spin fa-3x text-primary mb-3\"></i>\n            <p>Loading installations...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // Categorize installations\n  const isRepair = (install: Lead) => {\n    const notesText = (install.notes || '').toLowerCase();\n    const additionalNotesText = (install.additional_notes || '').toLowerCase();\n    return notesText.includes('repair') || notesText.includes('fix') || \n           additionalNotesText.includes('repair') || additionalNotesText.includes('fix');\n  };\n\n  const upcomingInstallations = installations?.filter(install => \n    install.installation_date && \n    new Date(install.installation_date) >= new Date() &&\n    !isRepair(install)\n  ) || [];\n\n  const repairJobs = installations?.filter(install => \n    isRepair(install)\n  ) || [];\n\n  const completedProjects = installations?.filter(install => \n    install.installation_date && \n    new Date(install.installation_date) < new Date() &&\n    !isRepair(install)\n  ) || [];\n\n  const thisWeekInstallations = installations?.filter(install => {\n    if (!install.installation_date) return false;\n    const installDate = new Date(install.installation_date);\n    const today = new Date();\n    const startOfWeek = new Date(today.setDate(today.getDate() - today.getDay()));\n    const endOfWeek = new Date(today.setDate(today.getDate() - today.getDay() + 6));\n    return installDate >= startOfWeek && installDate <= endOfWeek;\n  }) || [];\n\n  const installers = ['angel', 'brian', 'luis'];\n\n  return (\n    <div className=\"container-fluid py-4\">\n      <div className=\"row mb-4\">\n        <div className=\"col\">\n          <h1 className=\"h3 fw-bold\" data-testid=\"installations-title\">Installation Management</h1>\n          <p className=\"text-muted\">Schedule and track kitchen installations</p>\n        </div>\n      </div>\n\n      {/* Installation Stats */}\n      <div className=\"row mb-4\">\n        <div className=\"col-md-3\">\n          <div className=\"card text-center\" data-testid=\"stat-this-week\">\n            <div className=\"card-body\">\n              <i className=\"fas fa-calendar-day fa-2x text-primary mb-2\"></i>\n              <h4>{thisWeekInstallations.length}</h4>\n              <p className=\"text-muted\">This Week</p>\n            </div>\n          </div>\n        </div>\n        <div className=\"col-md-3\">\n          <div className=\"card text-center\" data-testid=\"stat-completed\">\n            <div className=\"card-body\">\n              <i className=\"fas fa-check-circle fa-2x text-success mb-2\"></i>\n              <h4>{completedProjects.length}</h4>\n              <p className=\"text-muted\">Completed</p>\n            </div>\n          </div>\n        </div>\n        <div className=\"col-md-3\">\n          <div className=\"card text-center\" data-testid=\"stat-repairs\">\n            <div className=\"card-body\">\n              <i className=\"fas fa-wrench fa-2x text-danger mb-2\"></i>\n              <h4>{repairJobs.length}</h4>\n              <p className=\"text-muted\">Repairs</p>\n            </div>\n          </div>\n        </div>\n        <div className=\"col-md-3\">\n          <div className=\"card text-center\" data-testid=\"stat-installers\">\n            <div className=\"card-body\">\n              <i className=\"fas fa-user-hard-hat fa-2x text-info mb-2\"></i>\n              <h4>{installers.length}</h4>\n              <p className=\"text-muted\">Installers</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Upcoming Installations */}\n      <div className=\"card mb-4\">\n        <div className=\"card-header bg-primary text-white\">\n          <h5 className=\"mb-0\">\n            <i className=\"fas fa-calendar-plus me-2\"></i>\n            Upcoming Installations ({upcomingInstallations.length})\n          </h5>\n        </div>\n        <div className=\"card-body p-0\">\n          {upcomingInstallations.length > 0 ? (\n            <div className=\"table-responsive\">\n              <table className=\"table table-hover mb-0\" data-testid=\"upcoming-installations-table\">\n                <thead className=\"table-light\">\n                  <tr>\n                    <th>Customer</th>\n                    <th>Installation Date</th>\n                    <th>Installer</th>\n                    <th>Project Value</th>\n                    <th>Payment Status</th>\n                    <th>Actions</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {upcomingInstallations.map((install) => (\n                    <tr key={install.id} data-testid={`upcoming-installation-${install.id}`}>\n                      <td>\n                        <strong>{install.name}</strong>\n                        <br />\n                        <small className=\"text-muted\">{install.phone}</small>\n                      </td>\n                      <td>\n                        {install.installation_date ? (\n                          <>\n                            <strong>{formatDate(install.installation_date)}</strong>\n                            <br />\n                            <small className=\"text-muted\">9:00 AM</small>\n                          </>\n                        ) : (\n                          <span className=\"text-muted\">Not scheduled</span>\n                        )}\n                      </td>\n                      <td>\n                        {install.assigned_installer ? (\n                          <span className=\"badge bg-primary\">\n                            {install.assigned_installer}\n                          </span>\n                        ) : (\n                          <span className=\"text-muted\">Not assigned</span>\n                        )}\n                      </td>\n                      <td>\n                        {install.project_amount ? formatCurrency(install.project_amount) : '-'}\n                      </td>\n                      <td>\n                        <div className=\"d-flex gap-1\">\n                          <span className={`badge ${install.deposit_paid ? 'bg-success' : 'bg-warning'}`}>\n                            Deposit {install.deposit_paid ? '✓' : 'Pending'}\n                          </span>\n                          <span className={`badge ${install.balance_paid ? 'bg-success' : 'bg-warning'}`}>\n                            Balance {install.balance_paid ? '✓' : 'Pending'}\n                          </span>\n                        </div>\n                      </td>\n                      <td>\n                        <div className=\"d-flex gap-1\">\n                          <button \n                            className=\"btn btn-sm btn-outline-primary\"\n                            data-testid={`button-edit-upcoming-${install.id}`}\n                            title=\"Edit Installation\"\n                          >\n                            <i className=\"fas fa-edit\"></i>\n                          </button>\n                          {install.email && install.installation_date && (\n                            <button \n                              className=\"btn btn-sm btn-outline-success\"\n                              onClick={() => handleEmailClient(install)}\n                              data-testid={`button-email-upcoming-client-${install.id}`}\n                              title=\"Email Client\"\n                            >\n                              <i className=\"fas fa-envelope\"></i>\n                            </button>\n                          )}\n                          {install.assigned_installer && install.installation_date && (\n                            <button \n                              className=\"btn btn-sm btn-outline-info\"\n                              onClick={() => handleEmailInstaller(install)}\n                              data-testid={`button-email-upcoming-installer-${install.id}`}\n                              title=\"Email Installer\"\n                            >\n                              <i className=\"fas fa-hard-hat\"></i>\n                            </button>\n                          )}\n                        </div>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          ) : (\n            <div className=\"text-center py-4\">\n              <i className=\"fas fa-calendar-plus fa-3x text-muted mb-3\"></i>\n              <p className=\"text-muted\">No upcoming installations scheduled</p>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Repairs Section */}\n      <div className=\"card mb-4\">\n        <div className=\"card-header bg-danger text-white\">\n          <h5 className=\"mb-0\">\n            <i className=\"fas fa-wrench me-2\"></i>\n            Repair Jobs ({repairJobs.length})\n          </h5>\n        </div>\n        <div className=\"card-body p-0\">\n          {repairJobs.length > 0 ? (\n            <div className=\"table-responsive\">\n              <table className=\"table table-hover mb-0\" data-testid=\"repairs-table\">\n                <thead className=\"table-light\">\n                  <tr>\n                    <th>Customer</th>\n                    <th>Scheduled Date</th>\n                    <th>Installer</th>\n                    <th>Issue</th>\n                    <th>Priority</th>\n                    <th>Actions</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {repairJobs.map((repair) => (\n                    <tr key={repair.id} data-testid={`repair-job-${repair.id}`}>\n                      <td>\n                        <strong>{repair.name}</strong>\n                        <br />\n                        <small className=\"text-muted\">{repair.phone}</small>\n                      </td>\n                      <td>\n                        {repair.installation_date ? (\n                          <>\n                            <strong>{formatDate(repair.installation_date)}</strong>\n                            <br />\n                            <small className=\"text-muted\">Service Call</small>\n                          </>\n                        ) : (\n                          <span className=\"badge bg-warning\">Not Scheduled</span>\n                        )}\n                      </td>\n                      <td>\n                        {repair.assigned_installer ? (\n                          <span className=\"badge bg-danger\">\n                            {repair.assigned_installer}\n                          </span>\n                        ) : (\n                          <span className=\"text-muted\">Not assigned</span>\n                        )}\n                      </td>\n                      <td>\n                        <small className=\"text-muted\">\n                          {repair.notes ? repair.notes.substring(0, 50) + '...' : 'No details'}\n                        </small>\n                      </td>\n                      <td>\n                        <span className={`badge ${\n                          repair.installation_date && new Date(repair.installation_date) <= new Date() \n                            ? 'bg-danger' : 'bg-warning'\n                        }`}>\n                          {repair.installation_date && new Date(repair.installation_date) <= new Date() \n                            ? 'Urgent' : 'Scheduled'}\n                        </span>\n                      </td>\n                      <td>\n                        <div className=\"d-flex gap-1\">\n                          <button \n                            className=\"btn btn-sm btn-outline-primary\"\n                            data-testid={`button-edit-repair-${repair.id}`}\n                            title=\"Edit Repair\"\n                          >\n                            <i className=\"fas fa-edit\"></i>\n                          </button>\n                          {repair.email && (\n                            <button \n                              className=\"btn btn-sm btn-outline-success\"\n                              onClick={() => handleEmailClient(repair)}\n                              data-testid={`button-email-repair-client-${repair.id}`}\n                              title=\"Email Client\"\n                            >\n                              <i className=\"fas fa-envelope\"></i>\n                            </button>\n                          )}\n                        </div>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          ) : (\n            <div className=\"text-center py-4\">\n              <i className=\"fas fa-tools fa-3x text-muted mb-3\"></i>\n              <p className=\"text-muted\">No repair jobs scheduled</p>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Completed Projects */}\n      <div className=\"card\">\n        <div className=\"card-header bg-success text-white\">\n          <h5 className=\"mb-0\">\n            <i className=\"fas fa-check-circle me-2\"></i>\n            Completed Projects ({completedProjects.length})\n          </h5>\n        </div>\n        <div className=\"card-body p-0\">\n          {completedProjects.length > 0 ? (\n            <div className=\"table-responsive\">\n              <table className=\"table table-hover mb-0\" data-testid=\"completed-projects-table\">\n                <thead className=\"table-light\">\n                  <tr>\n                    <th>Customer</th>\n                    <th>Completion Date</th>\n                    <th>Installer</th>\n                    <th>Project Value</th>\n                    <th>Payment Status</th>\n                    <th>Actions</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {completedProjects.map((project) => (\n                    <tr key={project.id} data-testid={`completed-project-${project.id}`}>\n                      <td>\n                        <strong>{project.name}</strong>\n                        <br />\n                        <small className=\"text-muted\">{project.phone}</small>\n                      </td>\n                      <td>\n                        <strong>{formatDate(project.installation_date!)}</strong>\n                        <br />\n                        <small className=\"text-success\">Completed</small>\n                      </td>\n                      <td>\n                        {project.assigned_installer ? (\n                          <span className=\"badge bg-success\">\n                            {project.assigned_installer}\n                          </span>\n                        ) : (\n                          <span className=\"text-muted\">Not recorded</span>\n                        )}\n                      </td>\n                      <td>\n                        {project.project_amount ? formatCurrency(project.project_amount) : '-'}\n                      </td>\n                      <td>\n                        <div className=\"d-flex gap-1\">\n                          <span className={`badge ${project.deposit_paid ? 'bg-success' : 'bg-secondary'}`}>\n                            Deposit {project.deposit_paid ? '✓' : 'N/A'}\n                          </span>\n                          <span className={`badge ${project.balance_paid ? 'bg-success' : 'bg-warning'}`}>\n                            Balance {project.balance_paid ? '✓' : 'Pending'}\n                          </span>\n                        </div>\n                      </td>\n                      <td>\n                        <div className=\"d-flex gap-1\">\n                          <button \n                            className=\"btn btn-sm btn-outline-secondary\"\n                            data-testid={`button-view-completed-${project.id}`}\n                            title=\"View Details\"\n                          >\n                            <i className=\"fas fa-eye\"></i>\n                          </button>\n                          {project.email && (\n                            <button \n                              className=\"btn btn-sm btn-outline-primary\"\n                              onClick={() => handleEmailClient(project)}\n                              data-testid={`button-email-completed-client-${project.id}`}\n                              title=\"Send Follow-up Email\"\n                            >\n                              <i className=\"fas fa-envelope\"></i>\n                            </button>\n                          )}\n                        </div>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          ) : (\n            <div className=\"text-center py-4\">\n              <i className=\"fas fa-check-circle fa-3x text-muted mb-3\"></i>\n              <p className=\"text-muted\">No completed projects yet</p>\n            </div>\n          )}\n        </div>\n      </div>\n      \n      {/* Email Modal */}\n      <Dialog open={emailModalOpen} onOpenChange={setEmailModalOpen}>\n        <DialogContent className=\"max-w-lg\">\n          <DialogHeader>\n            <DialogTitle>\n              Email {emailType === 'client' ? 'Client' : 'Installer'} - Installation Notification\n            </DialogTitle>\n          </DialogHeader>\n          \n          {selectedInstallation && (\n            <div className=\"space-y-4\">\n              <div className=\"bg-gray-50 p-4 rounded-lg\">\n                <h4 className=\"font-semibold mb-2\">Installation Details:</h4>\n                <p><strong>Customer:</strong> {selectedInstallation.name}</p>\n                <p><strong>Date:</strong> {selectedInstallation.installation_date ? formatDate(selectedInstallation.installation_date) : 'Not set'}</p>\n                <p><strong>Phone:</strong> {selectedInstallation.phone}</p>\n                {emailType === 'client' && selectedInstallation.email && (\n                  <p><strong>Email:</strong> {selectedInstallation.email}</p>\n                )}\n                {emailType === 'installer' && selectedInstallation.assigned_installer && (\n                  <p><strong>Installer:</strong> {selectedInstallation.assigned_installer}</p>\n                )}\n                {selectedInstallation.project_amount && (\n                  <p><strong>Project Value:</strong> {formatCurrency(selectedInstallation.project_amount)}</p>\n                )}\n              </div>\n              \n              <div>\n                <Label htmlFor=\"customMessage\">\n                  Custom Message (Optional)\n                </Label>\n                <Textarea \n                  id=\"customMessage\"\n                  value={customMessage}\n                  onChange={(e) => setCustomMessage(e.target.value)}\n                  placeholder={`Add any additional notes for the ${emailType}...`}\n                  className=\"mt-2\"\n                  rows={3}\n                />\n              </div>\n              \n              <div className=\"bg-blue-50 p-3 rounded-lg text-sm text-blue-800\">\n                <p><strong>Email Preview:</strong></p>\n                <p>\n                  {emailType === 'client' \n                    ? `The client will receive installation details, timing, and what to expect on installation day.`\n                    : `The installer will receive job details, customer contact info, and any special requirements.`\n                  }\n                  {customMessage && ' Your custom message will be included.'}\n                </p>\n              </div>\n              \n              <div className=\"flex gap-2 justify-end\">\n                <Button \n                  variant=\"outline\" \n                  onClick={() => setEmailModalOpen(false)}\n                  disabled={sendEmailMutation.isPending}\n                >\n                  Cancel\n                </Button>\n                <Button \n                  onClick={handleSendEmail}\n                  disabled={sendEmailMutation.isPending}\n                  className=\"bg-green-600 hover:bg-green-700\"\n                >\n                  {sendEmailMutation.isPending ? (\n                    <>\n                      <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                      Sending...\n                    </>\n                  ) : (\n                    <>\n                      <i className=\"fas fa-paper-plane mr-2\"></i>\n                      Send Email\n                    </>\n                  )}\n                </Button>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":23407},"client/src/pages/leads.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Lead } from '@shared/schema';\nimport { formatCurrency, formatDate, getStatusColor, getOriginColor } from '@/lib/auth';\nimport { AddLeadModal } from '@/components/modals/add-lead-modal';\nimport { QuickEditModal } from '@/components/modals/quick-edit-modal';\nimport { QuickFollowupModal } from '@/components/modals/quick-followup-modal';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\n\nexport default function Leads() {\n  const [filters, setFilters] = useState({\n    search: '',\n    status: '',\n    origin: '',\n    assigned_to: ''\n  });\n  const [currentPage, setCurrentPage] = useState(1);\n  const [showAddModal, setShowAddModal] = useState(false);\n  const [selectedLead, setSelectedLead] = useState<Lead | null>(null);\n  const [showQuickEdit, setShowQuickEdit] = useState(false);\n  const [selectedFollowupLead, setSelectedFollowupLead] = useState<Lead | null>(null);\n  const [showQuickFollowup, setShowQuickFollowup] = useState(false);\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: leadsResponse, isLoading } = useQuery<{\n    leads: Lead[];\n    total: number;\n    page: number;\n    limit: number;\n    totalPages: number;\n  }>({\n    queryKey: ['/api/leads', filters, currentPage],\n    queryFn: async () => {\n      // Build query parameters from filters and pagination\n      const params = new URLSearchParams();\n      if (filters.search) params.append('search', filters.search);\n      if (filters.status) params.append('status', filters.status);\n      if (filters.origin) params.append('origin', filters.origin);\n      if (filters.assigned_to) params.append('assigned_to', filters.assigned_to);\n      \n      // Add pagination parameters\n      params.append('page', currentPage.toString());\n      params.append('limit', '20');\n      \n      const url = `/api/leads${params.toString() ? '?' + params.toString() : ''}`;\n      const res = await fetch(url, { credentials: \"include\" });\n      \n      if (!res.ok) {\n        throw new Error(`${res.status}: ${res.statusText}`);\n      }\n      \n      return res.json();\n    },\n  });\n\n  // Extract leads and pagination info from response\n  const leads = leadsResponse?.leads || [];\n  const totalPages = leadsResponse?.totalPages || 1;\n  const total = leadsResponse?.total || 0;\n\n  // Helper function to update filters and reset pagination\n  const updateFilters = (newFilters: typeof filters) => {\n    setFilters(newFilters);\n    setCurrentPage(1); // Reset to first page when filters change\n  };\n\n  const deleteLeadMutation = useMutation({\n    mutationFn: async (leadId: string) => {\n      await apiRequest('DELETE', `/api/leads/${leadId}`);\n    },\n    onMutate: async (leadId: string) => {\n      // Cancel any outgoing refetches (so they don't overwrite our optimistic update)\n      await queryClient.cancelQueries({ queryKey: ['/api/leads'] });\n\n      // Snapshot the previous value\n      const previousLeads = queryClient.getQueryData(['/api/leads', filters, currentPage]);\n\n      // Optimistically update to the new value\n      queryClient.setQueryData(['/api/leads', filters, currentPage], (old: any) => {\n        if (!old?.leads) return old;\n        return {\n          ...old,\n          leads: old.leads.filter((lead: any) => lead.id !== leadId),\n          total: old.total - 1\n        };\n      });\n\n      // Return a context object with the snapshotted value\n      return { previousLeads };\n    },\n    onSuccess: () => {\n      toast({ title: \"Success\", description: \"Lead deleted successfully!\" });\n      queryClient.invalidateQueries({ queryKey: ['/api/leads'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/dashboard/stats'] });\n    },\n    onError: (error: Error, leadId: string, context: any) => {\n      // If it's a 404 error, the lead might already be deleted\n      if (error.message.includes('404')) {\n        toast({ title: \"Info\", description: \"Lead was already deleted\" });\n        // Still refresh the data to reflect the current state\n        queryClient.invalidateQueries({ queryKey: ['/api/leads'] });\n        queryClient.invalidateQueries({ queryKey: ['/api/dashboard/stats'] });\n      } else {\n        // Rollback the optimistic update on error\n        if (context?.previousLeads) {\n          queryClient.setQueryData(['/api/leads', filters, currentPage], context.previousLeads);\n        }\n        toast({ title: \"Error\", description: \"Failed to delete lead\", variant: \"destructive\" });\n      }\n    }\n  });\n\n  const handleDelete = (leadId: string) => {\n    if (window.confirm('Are you sure you want to delete this lead?')) {\n      // Prevent double-clicks by disabling the button during deletion\n      if (!deleteLeadMutation.isPending) {\n        deleteLeadMutation.mutate(leadId);\n      }\n    }\n  };\n\n  const openQuickEdit = (lead: Lead) => {\n    setSelectedLead(lead);\n    setShowQuickEdit(true);\n  };\n\n  const openQuickFollowup = (lead: Lead) => {\n    setSelectedFollowupLead(lead);\n    setShowQuickFollowup(true);\n  };\n\n  const isOverdue = (date: string | Date | null) => {\n    if (!date) return false;\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    const followupDate = new Date(date);\n    return followupDate < today;\n  };\n\n  const isDueToday = (date: string | Date | null) => {\n    if (!date) return false;\n    const today = new Date();\n    const followupDate = new Date(date);\n    return (\n      today.getDate() === followupDate.getDate() &&\n      today.getMonth() === followupDate.getMonth() &&\n      today.getFullYear() === followupDate.getFullYear()\n    );\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"container-fluid py-4\">\n        <div className=\"d-flex justify-content-center align-items-center\" style={{ height: '50vh' }}>\n          <div className=\"text-center\">\n            <i className=\"fas fa-spinner fa-spin fa-3x text-primary mb-3\"></i>\n            <p>Loading leads...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container-fluid py-4\">\n      <div className=\"row mb-4\">\n        <div className=\"col\">\n          <div className=\"d-flex justify-content-between align-items-center\">\n            <h1 className=\"h3 fw-bold\" data-testid=\"leads-title\">Lead Management</h1>\n            <div>\n              <button\n                className=\"btn btn-success me-2\"\n                onClick={() => window.location.href = '/add-lead'}\n                data-testid=\"button-add-lead\"\n              >\n                <i className=\"fas fa-plus me-1\"></i>Add Lead\n              </button>\n              <button className=\"btn btn-outline-primary me-2\" data-testid=\"button-export\">\n                <i className=\"fas fa-download me-1\"></i>Export CSV\n              </button>\n              <button className=\"btn btn-outline-secondary\" data-testid=\"button-import\">\n                <i className=\"fas fa-upload me-1\"></i>Import CSV\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Filters */}\n      <div className=\"card mb-4\">\n        <div className=\"card-body\">\n          <div className=\"row g-3\">\n            <div className=\"col-md-3\">\n              <label className=\"form-label\">Search</label>\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                placeholder=\"Search leads...\"\n                value={filters.search}\n                onChange={(e) => updateFilters({...filters, search: e.target.value})}\n                data-testid=\"input-search-leads\"\n              />\n            </div>\n            <div className=\"col-md-2\">\n              <label className=\"form-label\">Status</label>\n              <select\n                className=\"form-select\"\n                value={filters.status}\n                onChange={(e) => updateFilters({...filters, status: e.target.value})}\n                data-testid=\"select-filter-status\"\n              >\n                <option value=\"\">All Statuses</option>\n                <option value=\"new\">New</option>\n                <option value=\"in-progress\">In Progress</option>\n                <option value=\"quoted\">Quoted</option>\n                <option value=\"sold\">Sold</option>\n                <option value=\"not-interested\">Not Interested</option>\n              </select>\n            </div>\n            <div className=\"col-md-2\">\n              <label className=\"form-label\">Origin</label>\n              <select\n                className=\"form-select\"\n                value={filters.origin}\n                onChange={(e) => updateFilters({...filters, origin: e.target.value})}\n                data-testid=\"select-filter-origin\"\n              >\n                <option value=\"\">All Origins</option>\n                <option value=\"facebook\">Facebook</option>\n                <option value=\"google\">Google</option>\n                <option value=\"instagram\">Instagram</option>\n                <option value=\"referral\">Referral</option>\n              </select>\n            </div>\n            <div className=\"col-md-2\">\n              <label className=\"form-label\">Assigned To</label>\n              <select\n                className=\"form-select\"\n                value={filters.assigned_to}\n                onChange={(e) => updateFilters({...filters, assigned_to: e.target.value})}\n                data-testid=\"select-filter-assigned\"\n              >\n                <option value=\"\">All Team</option>\n                <option value=\"kim\">Kim</option>\n                <option value=\"patrick\">Patrick</option>\n                <option value=\"lina\">Lina</option>\n              </select>\n            </div>\n            <div className=\"col-md-3 d-flex align-items-end\">\n              <button className=\"btn btn-primary me-2\" data-testid=\"button-filter\">\n                <i className=\"fas fa-search me-1\"></i>Filter\n              </button>\n              <button\n                className=\"btn btn-outline-secondary\"\n                onClick={() => updateFilters({ search: '', status: '', origin: '', assigned_to: '' })}\n                data-testid=\"button-clear-filters\"\n              >\n                <i className=\"fas fa-times me-1\"></i>Clear\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Leads Table */}\n      <div className=\"card\">\n        <div className=\"card-body p-0\">\n          <div className=\"table-responsive\">\n            <table className=\"table table-hover mb-0\" data-testid=\"leads-table\">\n              <thead className=\"table-light\">\n                <tr>\n                  <th>Date</th>\n                  <th>Name</th>\n                  <th>Contact Info</th>\n                  <th>Origin</th>\n                  <th>Next Follow-up</th>\n                  <th>Assigned To</th>\n                  <th>Status</th>\n                  <th>Project Amount</th>\n                  <th>Actions</th>\n                </tr>\n              </thead>\n              <tbody>\n                {leads && leads.length > 0 ? (\n                  leads.map((lead) => (\n                    <tr key={lead.id} data-testid={`lead-row-${lead.id}`}>\n                      <td>{formatDate(lead.date_created)}</td>\n                      <td>\n                        <strong>{lead.name}</strong>\n                      </td>\n                      <td>\n                        <div>\n                          <i className=\"fas fa-phone text-muted me-1\"></i>{lead.phone}\n                          {lead.email && (\n                            <>\n                              <br />\n                              <i className=\"fas fa-envelope text-muted me-1\"></i>{lead.email}\n                            </>\n                          )}\n                        </div>\n                      </td>\n                      <td>\n                        <span className={`badge bg-${getOriginColor(lead.lead_origin)}`}>\n                          {lead.lead_origin}\n                        </span>\n                      </td>\n                      <td>\n                        {lead.next_followup_date ? (\n                          <span\n                            className={\n                              isOverdue(lead.next_followup_date) ? 'text-danger' :\n                              isDueToday(lead.next_followup_date) ? 'text-warning' : 'text-success'\n                            }\n                          >\n                            <i className={`fas ${\n                              isOverdue(lead.next_followup_date) ? 'fa-exclamation-triangle' :\n                              isDueToday(lead.next_followup_date) ? 'fa-clock' : 'fa-check'\n                            } me-1`}></i>\n                            {isOverdue(lead.next_followup_date) ? 'Overdue' :\n                             isDueToday(lead.next_followup_date) ? 'Today' :\n                             formatDate(lead.next_followup_date)}\n                          </span>\n                        ) : (\n                          '-'\n                        )}\n                      </td>\n                      <td>{lead.assigned_to}</td>\n                      <td>\n                        <span className={`badge bg-${getStatusColor(lead.remarks)} status-badge`}>\n                          {lead.remarks}\n                        </span>\n                      </td>\n                      <td>\n                        {lead.project_amount ? formatCurrency(lead.project_amount) : '-'}\n                      </td>\n                      <td>\n                        <button\n                          className=\"btn btn-circle btn-outline-success btn-sm me-1\"\n                          onClick={() => openQuickFollowup(lead)}\n                          title=\"Quick Follow-up Update\"\n                          data-testid={`button-followup-lead-${lead.id}`}\n                        >\n                          <i className=\"fas fa-calendar-alt\"></i>\n                        </button>\n                        <button\n                          className=\"btn btn-circle btn-outline-primary btn-sm me-1\"\n                          onClick={() => openQuickEdit(lead)}\n                          title=\"Edit Lead Details\"\n                          data-testid={`button-edit-lead-${lead.id}`}\n                        >\n                          <i className=\"fas fa-edit\"></i>\n                        </button>\n                        <button\n                          className=\"btn btn-circle btn-outline-danger btn-sm\"\n                          onClick={() => handleDelete(lead.id)}\n                          disabled={deleteLeadMutation.isPending}\n                          title=\"Delete Lead\"\n                          data-testid={`button-delete-lead-${lead.id}`}\n                        >\n                          <i className=\"fas fa-trash\"></i>\n                        </button>\n                      </td>\n                    </tr>\n                  ))\n                ) : (\n                  <tr>\n                    <td colSpan={9} className=\"text-center py-4\">\n                      <div className=\"text-muted\">\n                        <i className=\"fas fa-inbox fa-3x mb-3\"></i>\n                        <p>No leads found</p>\n                      </div>\n                    </td>\n                  </tr>\n                )}\n              </tbody>\n            </table>\n          </div>\n        </div>\n        <div className=\"card-footer\">\n          <div className=\"d-flex justify-content-between align-items-center\">\n            <div className=\"text-muted\">\n              Showing {leads.length > 0 ? ((currentPage - 1) * 20 + 1) : 0} to {Math.min(currentPage * 20, total)} of {total} leads\n            </div>\n            <nav>\n              <ul className=\"pagination pagination-sm mb-0\">\n                <li className={`page-item ${currentPage === 1 ? 'disabled' : ''}`}>\n                  <button \n                    className=\"page-link\" \n                    onClick={() => setCurrentPage(currentPage - 1)}\n                    disabled={currentPage === 1}\n                    data-testid=\"pagination-previous\"\n                  >\n                    Previous\n                  </button>\n                </li>\n                \n                {/* Generate page numbers */}\n                {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {\n                  const startPage = Math.max(1, Math.min(currentPage - 2, totalPages - 4));\n                  const pageNum = startPage + i;\n                  if (pageNum <= totalPages) {\n                    return (\n                      <li key={pageNum} className={`page-item ${currentPage === pageNum ? 'active' : ''}`}>\n                        <button \n                          className=\"page-link\" \n                          onClick={() => setCurrentPage(pageNum)}\n                          data-testid={`pagination-${pageNum}`}\n                        >\n                          {pageNum}\n                        </button>\n                      </li>\n                    );\n                  }\n                  return null;\n                })}\n                \n                <li className={`page-item ${currentPage === totalPages ? 'disabled' : ''}`}>\n                  <button \n                    className=\"page-link\" \n                    onClick={() => setCurrentPage(currentPage + 1)}\n                    disabled={currentPage === totalPages}\n                    data-testid=\"pagination-next\"\n                  >\n                    Next\n                  </button>\n                </li>\n              </ul>\n            </nav>\n          </div>\n        </div>\n      </div>\n\n      <AddLeadModal\n        show={showAddModal}\n        onHide={() => setShowAddModal(false)}\n      />\n\n      {selectedLead && (\n        <QuickEditModal\n          lead={selectedLead}\n          show={showQuickEdit}\n          onHide={() => setShowQuickEdit(false)}\n          onSave={() => {\n            setShowQuickEdit(false);\n          }}\n        />\n      )}\n\n      <QuickFollowupModal\n        lead={selectedFollowupLead}\n        show={showQuickFollowup}\n        onHide={() => {\n          setShowQuickFollowup(false);\n          setSelectedFollowupLead(null);\n        }}\n      />\n    </div>\n  );\n}\n","size_bytes":18219},"client/src/pages/login.tsx":{"content":"import { useState } from 'react';\nimport { useAuth } from '@/contexts/auth-context';\nimport { useLocation } from 'wouter';\nimport wmkLogo from '@/assets/wmk-logo.png';\n\nexport default function Login() {\n  const [username, setUsername] = useState('kim');\n  const [password, setPassword] = useState('password');\n  const [remember, setRemember] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n  \n  const { login } = useAuth();\n  const [, setLocation] = useLocation();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n    setError('');\n\n    const success = await login(username, password);\n    \n    if (success) {\n      setLocation('/dashboard');\n    } else {\n      setError('Invalid credentials. Please try again.');\n    }\n    \n    setIsLoading(false);\n  };\n\n  return (\n    <div className=\"login-container d-flex align-items-center justify-content-center\">\n      <div className=\"container\">\n        <div className=\"row justify-content-center\">\n          <div className=\"col-md-6 col-lg-4\">\n            <div className=\"card login-card\">\n              <div className=\"card-body p-5\">\n                <div className=\"text-center mb-4\">\n                  <div className=\"d-flex justify-content-center mb-3\">\n                    <img \n                      src={wmkLogo} \n                      alt=\"Wrap My Kitchen Logo\" \n                      style={{ height: '80px', width: 'auto' }}\n                      data-testid=\"logo-image\"\n                    />\n                  </div>\n                  <p className=\"text-muted\" data-testid=\"app-subtitle\">Lead Management CRM</p>\n                </div>\n                \n                <form onSubmit={handleSubmit} data-testid=\"login-form\">\n                  <div className=\"mb-3\">\n                    <label htmlFor=\"username\" className=\"form-label\">Username</label>\n                    <div className=\"input-group\">\n                      <span className=\"input-group-text\">\n                        <i className=\"fas fa-user\"></i>\n                      </span>\n                      <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        id=\"username\"\n                        value={username}\n                        onChange={(e) => setUsername(e.target.value)}\n                        required\n                        data-testid=\"input-username\"\n                      />\n                    </div>\n                  </div>\n                  \n                  <div className=\"mb-3\">\n                    <label htmlFor=\"password\" className=\"form-label\">Password</label>\n                    <div className=\"input-group\">\n                      <span className=\"input-group-text\">\n                        <i className=\"fas fa-lock\"></i>\n                      </span>\n                      <input\n                        type=\"password\"\n                        className=\"form-control\"\n                        id=\"password\"\n                        value={password}\n                        onChange={(e) => setPassword(e.target.value)}\n                        required\n                        data-testid=\"input-password\"\n                      />\n                    </div>\n                  </div>\n                  \n                  <div className=\"mb-3 form-check\">\n                    <input\n                      type=\"checkbox\"\n                      className=\"form-check-input\"\n                      id=\"remember\"\n                      checked={remember}\n                      onChange={(e) => setRemember(e.target.checked)}\n                      data-testid=\"checkbox-remember\"\n                    />\n                    <label className=\"form-check-label\" htmlFor=\"remember\">\n                      Remember me\n                    </label>\n                  </div>\n                  \n                  {error && (\n                    <div className=\"alert alert-danger\" data-testid=\"error-message\">\n                      {error}\n                    </div>\n                  )}\n                  \n                  <button\n                    type=\"submit\"\n                    className=\"btn btn-primary w-100 py-2\"\n                    disabled={isLoading}\n                    data-testid=\"button-login\"\n                  >\n                    {isLoading ? (\n                      <>\n                        <i className=\"fas fa-spinner fa-spin me-2\"></i>Signing in...\n                      </>\n                    ) : (\n                      <>\n                        <i className=\"fas fa-sign-in-alt me-2\"></i>Login\n                      </>\n                    )}\n                  </button>\n                  \n                  <div className=\"text-center mt-3\">\n                    <small className=\"text-muted\" data-testid=\"help-text\">\n                      Default users: kim, patrick, lina (password: password)\n                    </small>\n                  </div>\n                </form>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5128},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/reports.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\n\ninterface AnalyticsData {\n  executiveDashboard: {\n    totalLeads: number;\n    soldLeads: number;\n    conversionRate: number;\n    totalRevenue: number;\n    averageDealSize: number;\n  };\n  leadOriginPerformance: Array<{\n    origin: string;\n    totalLeads: number;\n    soldLeads: number;\n    conversionRate: number;\n    totalRevenue: number;\n    averageDealSize: number;\n  }>;\n  teamPerformance: Array<{\n    member: string;\n    totalLeads: number;\n    soldLeads: number;\n    conversionRate: number;\n    totalRevenue: number;\n    averageDealSize: number;\n  }>;\n  monthlyBreakdown: Array<{\n    month: number;\n    monthName: string;\n    totalLeads: number;\n    soldLeads: number;\n    conversionRate: number;\n    totalRevenue: number;\n    averageDealSize: number;\n  }>;\n  filterInfo: {\n    year: number | null;\n    month: number | null;\n    period: string;\n  };\n}\n\ninterface YearsData {\n  availableYears: number[];\n}\n\nexport default function Reports() {\n  const currentYear = new Date().getFullYear();\n  const [selectedYear, setSelectedYear] = useState<string>(currentYear.toString());\n  const [selectedMonth, setSelectedMonth] = useState<string>('all');\n  \n  const { data: yearsData } = useQuery<YearsData>({\n    queryKey: ['/api/reports/years'],\n    queryFn: async () => {\n      const response = await fetch('/api/reports/years');\n      if (!response.ok) throw new Error('Failed to fetch years data');\n      return response.json();\n    }\n  });\n  \n  const { data: analyticsData, isLoading } = useQuery<AnalyticsData>({\n    queryKey: ['analytics', selectedYear, selectedMonth],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (selectedYear) params.append('year', selectedYear);\n      if (selectedMonth && selectedMonth !== 'all') params.append('month', selectedMonth);\n      \n      const response = await fetch(`/api/reports/analytics?${params.toString()}`);\n      if (!response.ok) throw new Error('Failed to fetch analytics data');\n      return response.json();\n    }\n  });\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-US', { \n      style: 'currency', \n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0\n    }).format(amount);\n  };\n  \n  const formatPercentage = (percentage: number) => {\n    return `${percentage.toFixed(1)}%`;\n  };\n  \n  const getTeamMemberName = (member: string) => {\n    const names: Record<string, string> = {\n      'kim': 'Kim',\n      'patrick': 'Patrick',\n      'lina': 'Lina'\n    };\n    return names[member] || member;\n  };\n  \n  const formatOriginName = (origin: string) => {\n    return origin.split('-').map(word => \n      word.charAt(0).toUpperCase() + word.slice(1)\n    ).join(' ');\n  };\n  \n  const months = [\n    { value: '1', label: 'January' },\n    { value: '2', label: 'February' },\n    { value: '3', label: 'March' },\n    { value: '4', label: 'April' },\n    { value: '5', label: 'May' },\n    { value: '6', label: 'June' },\n    { value: '7', label: 'July' },\n    { value: '8', label: 'August' },\n    { value: '9', label: 'September' },\n    { value: '10', label: 'October' },\n    { value: '11', label: 'November' },\n    { value: '12', label: 'December' }\n  ];\n\n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"flex justify-center items-center min-h-[50vh]\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n            <p className=\"text-gray-600\">Loading analytics data...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!analyticsData) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"text-center py-12\">\n          <p className=\"text-gray-600\">No analytics data available</p>\n        </div>\n      </div>\n    );\n  }\n  \n  const { executiveDashboard, leadOriginPerformance = [], teamPerformance, monthlyBreakdown } = analyticsData;\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      {/* Header with Time-Based Filtering */}\n      <div className=\"mb-8\">\n        <div className=\"flex flex-col sm:flex-row sm:items-center justify-between gap-4\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900\" data-testid=\"reports-title\">\n              Reports & Analytics MVP\n            </h1>\n            <p className=\"text-gray-600 mt-2\">\n              Business intelligence with data-driven insights\n            </p>\n          </div>\n          \n          {/* Time-Based Filtering Controls */}\n          <div className=\"flex gap-3\">\n            <div>\n              <label className=\"text-sm font-medium text-gray-700 mb-1 block\">Year</label>\n              <Select value={selectedYear} onValueChange={setSelectedYear}>\n                <SelectTrigger className=\"w-32\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  {yearsData?.availableYears.map(year => (\n                    <SelectItem key={year} value={year.toString()}>\n                      {year}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div>\n              <label className=\"text-sm font-medium text-gray-700 mb-1 block\">Month</label>\n              <Select value={selectedMonth} onValueChange={setSelectedMonth}>\n                <SelectTrigger className=\"w-32\">\n                  <SelectValue placeholder=\"All\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Months</SelectItem>\n                  {months.map(month => (\n                    <SelectItem key={month.value} value={month.value}>\n                      {month.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            \n            {selectedMonth && selectedMonth !== 'all' && (\n              <div className=\"flex items-end\">\n                <Button \n                  variant=\"outline\" \n                  onClick={() => setSelectedMonth('all')}\n                  className=\"h-10\"\n                >\n                  Clear Month\n                </Button>\n              </div>\n            )}\n          </div>\n        </div>\n        \n        <div className=\"mt-4\">\n          <Badge variant=\"outline\" className=\"text-sm\">\n            Showing data for: {analyticsData.filterInfo.period === 'all-time' ? 'All Time' : \n              (selectedMonth && selectedMonth !== 'all') ? `${months.find(m => m.value === selectedMonth)?.label} ${selectedYear}` : selectedYear\n            }\n          </Badge>\n        </div>\n      </div>\n      \n      {/* Executive Dashboard - Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n        <Card data-testid=\"metric-total-leads\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium text-gray-600\">Total Leads</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-3xl font-bold text-blue-600\">{executiveDashboard.totalLeads.toLocaleString()}</div>\n            <p className=\"text-gray-500 text-sm mt-1\">Complete lead count</p>\n          </CardContent>\n        </Card>\n        \n        <Card data-testid=\"metric-conversion-rate\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium text-gray-600\">Sold Conversion</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-3xl font-bold text-green-600\">\n              {formatPercentage(executiveDashboard.conversionRate)}\n            </div>\n            <p className=\"text-gray-500 text-sm mt-1\">\n              {executiveDashboard.soldLeads} of {executiveDashboard.totalLeads} leads\n            </p>\n          </CardContent>\n        </Card>\n        \n        <Card data-testid=\"metric-total-revenue\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium text-gray-600\">Revenue Tracking</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-3xl font-bold text-purple-600\">\n              {formatCurrency(executiveDashboard.totalRevenue)}\n            </div>\n            <p className=\"text-gray-500 text-sm mt-1\">Total revenue generated</p>\n          </CardContent>\n        </Card>\n        \n        <Card data-testid=\"metric-avg-deal-size\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium text-gray-600\">Average Deal Size</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-3xl font-bold text-orange-600\">\n              {formatCurrency(executiveDashboard.averageDealSize)}\n            </div>\n            <p className=\"text-gray-500 text-sm mt-1\">Revenue per sold lead</p>\n          </CardContent>\n        </Card>\n      </div>\n      \n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8\">\n        {/* Lead Origin Performance Analysis */}\n        <Card data-testid=\"lead-origin-performance\">\n          <CardHeader>\n            <CardTitle className=\"text-xl font-semibold\">Lead Origin Performance</CardTitle>\n            <p className=\"text-gray-600 text-sm\">Marketing optimization & ROI tracking</p>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {leadOriginPerformance.slice(0, 8).map((origin) => (\n                <div key={origin.origin} className=\"border-b pb-4 last:border-b-0 last:pb-0\">\n                  <div className=\"flex justify-between items-start mb-2\">\n                    <div>\n                      <h4 className=\"font-semibold text-gray-900\">{formatOriginName(origin.origin)}</h4>\n                      <div className=\"flex gap-4 text-sm text-gray-600\">\n                        <span>{origin.totalLeads} leads</span>\n                        <span>{origin.soldLeads} sold</span>\n                        <span className=\"font-medium text-green-600\">{formatCurrency(origin.totalRevenue)}</span>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"text-lg font-bold text-blue-600\">\n                        {formatPercentage(origin.conversionRate)}\n                      </div>\n                      <div className=\"text-sm text-gray-500\">\n                        Avg: {formatCurrency(origin.averageDealSize)}\n                      </div>\n                    </div>\n                  </div>\n                  <Progress value={origin.conversionRate} className=\"h-2\" />\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n        \n        {/* Team Performance Metrics */}\n        <Card data-testid=\"team-performance\">\n          <CardHeader>\n            <CardTitle className=\"text-xl font-semibold\">Team Performance</CardTitle>\n            <p className=\"text-gray-600 text-sm\">Individual accountability & comparative analysis</p>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-6\">\n              {teamPerformance.map((member, index) => (\n                <div key={member.member} className=\"border-b pb-4 last:border-b-0 last:pb-0\">\n                  <div className=\"flex justify-between items-start mb-3\">\n                    <div>\n                      <h4 className=\"font-semibold text-gray-900 flex items-center gap-2\">\n                        {getTeamMemberName(member.member)}\n                        {index === 0 && <Badge className=\"bg-yellow-100 text-yellow-800\">🏆 Top Performer</Badge>}\n                      </h4>\n                      <div className=\"grid grid-cols-3 gap-4 text-sm text-gray-600 mt-1\">\n                        <div>\n                          <div className=\"font-medium\">{member.totalLeads}</div>\n                          <div>Total Leads</div>\n                        </div>\n                        <div>\n                          <div className=\"font-medium\">{member.soldLeads}</div>\n                          <div>Sold</div>\n                        </div>\n                        <div>\n                          <div className=\"font-medium text-green-600\">{formatCurrency(member.totalRevenue)}</div>\n                          <div>Revenue</div>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"text-xl font-bold text-blue-600\">\n                        {formatPercentage(member.conversionRate)}\n                      </div>\n                      <div className=\"text-sm text-gray-500\">\n                        Avg: {formatCurrency(member.averageDealSize)}\n                      </div>\n                    </div>\n                  </div>\n                  <Progress \n                    value={member.conversionRate} \n                    className=\"h-3\"\n                    data-testid={`progress-${member.member}`}\n                  />\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n      \n      {/* Monthly Breakdown - Annual View */}\n      {!selectedMonth && monthlyBreakdown.length > 0 && (\n        <Card className=\"mb-8\" data-testid=\"monthly-breakdown\">\n          <CardHeader>\n            <CardTitle className=\"text-xl font-semibold\">Monthly Breakdown - {selectedYear}</CardTitle>\n            <p className=\"text-gray-600 text-sm\">Trend analysis & seasonal insights</p>\n          </CardHeader>\n          <CardContent>\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full text-sm\">\n                <thead>\n                  <tr className=\"border-b\">\n                    <th className=\"text-left py-3 font-medium text-gray-700\">Month</th>\n                    <th className=\"text-center py-3 font-medium text-gray-700\">Total Leads</th>\n                    <th className=\"text-center py-3 font-medium text-gray-700\">Sold</th>\n                    <th className=\"text-center py-3 font-medium text-gray-700\">Conversion %</th>\n                    <th className=\"text-center py-3 font-medium text-gray-700\">Revenue</th>\n                    <th className=\"text-center py-3 font-medium text-gray-700\">Avg Deal</th>\n                    <th className=\"text-center py-3 font-medium text-gray-700\">Trend</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {monthlyBreakdown.map((month, index) => {\n                    const prevMonth = index > 0 ? monthlyBreakdown[index - 1] : null;\n                    const revenueTrend = prevMonth ? \n                      ((month.totalRevenue - prevMonth.totalRevenue) / Math.max(prevMonth.totalRevenue, 1)) * 100 : 0;\n                    \n                    return (\n                      <tr key={month.month} className=\"border-b hover:bg-gray-50\">\n                        <td className=\"py-3 font-medium\">\n                          <button \n                            onClick={() => setSelectedMonth(month.month.toString())}\n                            className=\"text-blue-600 hover:text-blue-800 hover:underline\"\n                          >\n                            {month.monthName}\n                          </button>\n                        </td>\n                        <td className=\"text-center py-3\">{month.totalLeads}</td>\n                        <td className=\"text-center py-3 font-medium\">{month.soldLeads}</td>\n                        <td className=\"text-center py-3\">\n                          <span className={`px-2 py-1 rounded-full text-xs font-medium ${\n                            month.conversionRate >= 30 ? 'bg-green-100 text-green-800' :\n                            month.conversionRate >= 20 ? 'bg-yellow-100 text-yellow-800' :\n                            'bg-red-100 text-red-800'\n                          }`}>\n                            {formatPercentage(month.conversionRate)}\n                          </span>\n                        </td>\n                        <td className=\"text-center py-3 font-medium text-green-600\">\n                          {formatCurrency(month.totalRevenue)}\n                        </td>\n                        <td className=\"text-center py-3\">{formatCurrency(month.averageDealSize)}</td>\n                        <td className=\"text-center py-3\">\n                          {prevMonth && (\n                            <span className={`text-xs font-medium ${\n                              revenueTrend > 0 ? 'text-green-600' : \n                              revenueTrend < 0 ? 'text-red-600' : 'text-gray-500'\n                            }`}>\n                              {revenueTrend > 0 ? '↗' : revenueTrend < 0 ? '↘' : '→'} {Math.abs(revenueTrend).toFixed(1)}%\n                            </span>\n                          )}\n                        </td>\n                      </tr>\n                    );\n                  })}\n                </tbody>\n              </table>\n            </div>\n            \n            <div className=\"mt-6 p-4 bg-blue-50 rounded-lg\">\n              <h4 className=\"font-semibold text-blue-900 mb-2\">Business Intelligence Insights</h4>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm text-blue-800\">\n                <div>\n                  <strong>Peak Month:</strong> {monthlyBreakdown.reduce((max, month) => \n                    month.totalRevenue > max.totalRevenue ? month : max\n                  ).monthName} ({formatCurrency(Math.max(...monthlyBreakdown.map(m => m.totalRevenue)))})\n                </div>\n                <div>\n                  <strong>Best Conversion:</strong> {monthlyBreakdown.reduce((max, month) => \n                    month.conversionRate > max.conversionRate ? month : max\n                  ).monthName} ({formatPercentage(Math.max(...monthlyBreakdown.map(m => m.conversionRate)))})\n                </div>\n                <div>\n                  <strong>Total Year Revenue:</strong> {formatCurrency(monthlyBreakdown.reduce((sum, month) => sum + month.totalRevenue, 0))}\n                </div>\n                <div>\n                  <strong>Average Monthly:</strong> {formatCurrency(monthlyBreakdown.reduce((sum, month) => sum + month.totalRevenue, 0) / Math.max(monthlyBreakdown.filter(m => m.totalLeads > 0).length, 1))}\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n      \n      {/* Strategic Benefits Footer */}\n      <Card className=\"bg-gradient-to-r from-blue-50 to-purple-50\">\n        <CardContent className=\"p-6\">\n          <h3 className=\"text-xl font-bold text-gray-900 mb-4\">Strategic Business Value</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 text-sm\">\n            <div>\n              <h4 className=\"font-semibold text-blue-900 mb-2\">🎯 Marketing Optimization</h4>\n              <ul className=\"text-gray-700 space-y-1\">\n                <li>• ROI tracking by source</li>\n                <li>• Budget allocation insights</li>\n                <li>• Channel effectiveness</li>\n              </ul>\n            </div>\n            <div>\n              <h4 className=\"font-semibold text-green-900 mb-2\">📈 Sales Management</h4>\n              <ul className=\"text-gray-700 space-y-1\">\n                <li>• Team performance metrics</li>\n                <li>• Conversion optimization</li>\n                <li>• Goal tracking</li>\n              </ul>\n            </div>\n            <div>\n              <h4 className=\"font-semibold text-purple-900 mb-2\">💰 Financial Planning</h4>\n              <ul className=\"text-gray-700 space-y-1\">\n                <li>• Revenue forecasting</li>\n                <li>• Deal size optimization</li>\n                <li>• Seasonal insights</li>\n              </ul>\n            </div>\n            <div>\n              <h4 className=\"font-semibold text-orange-900 mb-2\">🚀 Competitive Edge</h4>\n              <ul className=\"text-gray-700 space-y-1\">\n                <li>• Data-driven decisions</li>\n                <li>• Performance accountability</li>\n                <li>• Market positioning</li>\n              </ul>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":20828},"client/src/pages/sample-booklets.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { SampleBooklet, PRODUCT_TYPES, BOOKLET_STATUSES } from '@shared/schema';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\nimport AddBookletModal from '@/components/modals/add-booklet-modal';\nimport EditBookletModal from '@/components/modals/edit-booklet-modal';\n\ninterface BookletStats {\n  totalOrders: number;\n  pendingOrders: number;\n  shippedOrders: number;\n  deliveredOrders: number;\n  thisWeekOrders: number;\n}\n\nexport default function SampleBooklets() {\n  const [filter, setFilter] = useState('');\n  const [showAddModal, setShowAddModal] = useState(false);\n  const [selectedBooklet, setSelectedBooklet] = useState<SampleBooklet | null>(null);\n  const [showEditModal, setShowEditModal] = useState(false);\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: booklets, isLoading } = useQuery<SampleBooklet[]>({\n    queryKey: ['/api/sample-booklets', filter],\n    queryFn: async () => {\n      const url = filter ? `/api/sample-booklets?status=${filter}` : '/api/sample-booklets';\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(`Failed to fetch sample booklets: ${response.status}`);\n      }\n      const data = await response.json();\n      // Ensure we always return an array\n      return Array.isArray(data) ? data : [];\n    }\n  });\n\n  const { data: stats } = useQuery<BookletStats>({\n    queryKey: ['/api/sample-booklets/stats/dashboard'],\n    queryFn: async () => {\n      const response = await fetch('/api/sample-booklets/stats/dashboard');\n      if (!response.ok) {\n        throw new Error(`Failed to fetch stats: ${response.status}`);\n      }\n      return response.json();\n    }\n  });\n\n  const deleteBookletMutation = useMutation({\n    mutationFn: async (bookletId: string) => {\n      await apiRequest('DELETE', `/api/sample-booklets/${bookletId}`);\n    },\n    onSuccess: () => {\n      toast({ title: \"Success\", description: \"Sample booklet deleted successfully!\" });\n      queryClient.invalidateQueries({ queryKey: ['/api/sample-booklets'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/sample-booklets/stats/dashboard'] });\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to delete sample booklet\", variant: \"destructive\" });\n    }\n  });\n\n  const handleDelete = (bookletId: string) => {\n    if (window.confirm('Are you sure you want to delete this sample booklet order?')) {\n      deleteBookletMutation.mutate(bookletId);\n    }\n  };\n\n  const getProductTypeBadge = (productType: string) => {\n    const badges: Record<string, string> = {\n      'demo_kit_and_sample_booklet': 'success',\n      'sample_booklet_only': 'primary', \n      'trial_kit': 'info',\n      'demo_kit_only': 'warning'\n    };\n    return badges[productType] || 'secondary';\n  };\n\n  const getProductTypeLabel = (productType: string) => {\n    const labels: Record<string, string> = {\n      'demo_kit_and_sample_booklet': 'Demo Kit & Sample Booklet',\n      'sample_booklet_only': 'Sample Booklet Only',\n      'trial_kit': 'Trial Kit',\n      'demo_kit_only': 'Demo Kit Only'\n    };\n    return labels[productType] || productType;\n  };\n\n  const getStatusBadge = (status: string) => {\n    const badges: Record<string, string> = {\n      'pending': 'warning',\n      'shipped': 'info',\n      'delivered': 'success'\n    };\n    return badges[status] || 'secondary';\n  };\n\n  const formatDate = (date: string | Date) => {\n    return new Date(date).toLocaleDateString();\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"container-fluid py-4\">\n        <div className=\"d-flex justify-content-center align-items-center\" style={{ height: '50vh' }}>\n          <div className=\"text-center\">\n            <i className=\"fas fa-spinner fa-spin fa-3x text-primary mb-3\"></i>\n            <p>Loading sample booklets...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container-fluid py-4\">\n      {/* Header */}\n      <div className=\"row mb-4\">\n        <div className=\"col\">\n          <div className=\"d-flex justify-content-between align-items-center\">\n            <h1 className=\"h3 fw-bold\" data-testid=\"booklets-title\">Sample Booklets Management</h1>\n            <div>\n              <button\n                className=\"btn btn-success me-2\"\n                onClick={() => setShowAddModal(true)}\n                data-testid=\"button-add-booklet\"\n              >\n                <i className=\"fas fa-plus me-1\"></i>Add New Order\n              </button>\n              <button className=\"btn btn-outline-primary me-2\" data-testid=\"button-check-delivery\">\n                <i className=\"fas fa-sync me-1\"></i>Check Delivery Status\n              </button>\n              <button className=\"btn btn-outline-secondary\" data-testid=\"button-export-booklets\">\n                <i className=\"fas fa-download me-1\"></i>Export Orders\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Statistics Cards */}\n      {stats && (\n        <div className=\"row mb-4\">\n          <div className=\"col-md-2 mb-3\">\n            <div className=\"stats-card card text-center\">\n              <div className=\"card-body\">\n                <h3 className=\"text-primary\">{stats.totalOrders}</h3>\n                <p className=\"mb-0\">Total Orders</p>\n              </div>\n            </div>\n          </div>\n          <div className=\"col-md-2 mb-3\">\n            <div className=\"stats-card card text-center\">\n              <div className=\"card-body\">\n                <h3 className=\"text-warning\">{stats.pendingOrders}</h3>\n                <p className=\"mb-0\">Pending</p>\n              </div>\n            </div>\n          </div>\n          <div className=\"col-md-2 mb-3\">\n            <div className=\"stats-card card text-center\">\n              <div className=\"card-body\">\n                <h3 className=\"text-info\">{stats.shippedOrders}</h3>\n                <p className=\"mb-0\">Shipped</p>\n              </div>\n            </div>\n          </div>\n          <div className=\"col-md-2 mb-3\">\n            <div className=\"stats-card card text-center\">\n              <div className=\"card-body\">\n                <h3 className=\"text-success\">{stats.deliveredOrders}</h3>\n                <p className=\"mb-0\">Delivered</p>\n              </div>\n            </div>\n          </div>\n          <div className=\"col-md-2 mb-3\">\n            <div className=\"stats-card card text-center\">\n              <div className=\"card-body\">\n                <h3 className=\"text-primary\">{stats.thisWeekOrders}</h3>\n                <p className=\"mb-0\">This Week</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Filters */}\n      <div className=\"card mb-4\">\n        <div className=\"card-body\">\n          <div className=\"row g-3\">\n            <div className=\"col-md-3\">\n              <label className=\"form-label\">Filter by Status</label>\n              <select\n                className=\"form-select\"\n                value={filter}\n                onChange={(e) => setFilter(e.target.value)}\n                data-testid=\"select-filter-status\"\n              >\n                <option value=\"\">All Orders</option>\n                <option value=\"pending\">Pending</option>\n                <option value=\"shipped\">Shipped</option>\n                <option value=\"delivered\">Delivered</option>\n              </select>\n            </div>\n            <div className=\"col-md-3 d-flex align-items-end\">\n              <button\n                className=\"btn btn-outline-secondary\"\n                onClick={() => setFilter('')}\n                data-testid=\"button-clear-filter\"\n              >\n                <i className=\"fas fa-times me-1\"></i>Clear Filter\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Orders Table */}\n      <div className=\"card\">\n        <div className=\"card-body p-0\">\n          <div className=\"table-responsive\">\n            <table className=\"table table-hover mb-0\" data-testid=\"booklets-table\">\n              <thead className=\"table-light\">\n                <tr>\n                  <th>Order #</th>\n                  <th>Customer</th>\n                  <th>Product Type</th>\n                  <th>Status</th>\n                  <th>Order Date</th>\n                  <th>Tracking</th>\n                  <th>Ship Date</th>\n                  <th>Actions</th>\n                </tr>\n              </thead>\n              <tbody>\n                {booklets && booklets.length > 0 ? (\n                  booklets.map((booklet) => (\n                    <tr key={booklet.id} data-testid={`booklet-row-${booklet.id}`}>\n                      <td><strong>{booklet.order_number}</strong></td>\n                      <td>\n                        <div>\n                          <strong>{booklet.customer_name}</strong>\n                          <br />\n                          <small className=\"text-muted\">{booklet.phone}</small>\n                          <br />\n                          <small className=\"text-muted\">{booklet.email}</small>\n                        </div>\n                      </td>\n                      <td>\n                        <span className={`badge bg-${getProductTypeBadge(booklet.product_type)}`}>\n                          {getProductTypeLabel(booklet.product_type)}\n                        </span>\n                      </td>\n                      <td>\n                        <span className={`badge bg-${getStatusBadge(booklet.status)} status-badge`}>\n                          {booklet.status.toUpperCase()}\n                        </span>\n                      </td>\n                      <td>{formatDate(booklet.date_ordered)}</td>\n                      <td>\n                        {booklet.tracking_number ? (\n                          <a\n                            href={`https://tools.usps.com/go/TrackConfirmAction?tLabels=${booklet.tracking_number}`}\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                            className=\"text-primary\"\n                            data-testid={`tracking-link-${booklet.id}`}\n                          >\n                            {booklet.tracking_number}\n                          </a>\n                        ) : (\n                          '-'\n                        )}\n                      </td>\n                      <td>\n                        {booklet.date_shipped ? formatDate(booklet.date_shipped) : '-'}\n                      </td>\n                      <td>\n                        <button\n                          className=\"btn btn-circle btn-outline-primary btn-sm me-1\"\n                          onClick={() => {\n                            setSelectedBooklet(booklet);\n                            setShowEditModal(true);\n                          }}\n                          data-testid={`button-edit-booklet-${booklet.id}`}\n                        >\n                          <i className=\"fas fa-edit\"></i>\n                        </button>\n                        {booklet.status === 'pending' && (\n                          <button\n                            className=\"btn btn-circle btn-outline-info btn-sm me-1\"\n                            data-testid={`button-ship-booklet-${booklet.id}`}\n                          >\n                            <i className=\"fas fa-shipping-fast\"></i>\n                          </button>\n                        )}\n                        <button\n                          className=\"btn btn-circle btn-outline-danger btn-sm\"\n                          onClick={() => handleDelete(booklet.id)}\n                          disabled={deleteBookletMutation.isPending}\n                          data-testid={`button-delete-booklet-${booklet.id}`}\n                        >\n                          <i className=\"fas fa-trash\"></i>\n                        </button>\n                      </td>\n                    </tr>\n                  ))\n                ) : (\n                  <tr>\n                    <td colSpan={8} className=\"text-center py-4\">\n                      <div className=\"text-muted\">\n                        <i className=\"fas fa-inbox fa-3x mb-3\"></i>\n                        <p>No sample booklet orders found</p>\n                      </div>\n                    </td>\n                  </tr>\n                )}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n\n      {/* Modals */}\n      <AddBookletModal \n        isOpen={showAddModal} \n        onClose={() => setShowAddModal(false)} \n      />\n      \n      <EditBookletModal \n        isOpen={showEditModal} \n        onClose={() => {\n          setShowEditModal(false);\n          setSelectedBooklet(null);\n        }}\n        booklet={selectedBooklet}\n      />\n    </div>\n  );\n}","size_bytes":12937},"client/src/components/layout/navbar.tsx":{"content":"import { useAuth } from '@/contexts/auth-context';\nimport { capitalizeFirst } from '@/lib/auth';\nimport { Link, useLocation } from 'wouter';\n\nexport function Navbar() {\n  const { user, logout } = useAuth();\n  const [location] = useLocation();\n\n  const isActive = (path: string) => location === path;\n\n  return (\n    <nav className=\"navbar navbar-expand-lg navbar-light bg-white shadow-sm\">\n      <div className=\"container-fluid\">\n        <Link href=\"/dashboard\" className=\"navbar-brand\" data-testid=\"navbar-brand\">\n          <i className=\"fas fa-utensils me-2\"></i>Wrap My Kitchen CRM\n        </Link>\n        \n        <button \n          className=\"navbar-toggler\" \n          type=\"button\" \n          data-bs-toggle=\"collapse\" \n          data-bs-target=\"#navbarNav\"\n          data-testid=\"navbar-toggle\"\n        >\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        \n        <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n          <ul className=\"navbar-nav me-auto\">\n            <li className=\"nav-item\">\n              <Link \n                href=\"/dashboard\" \n                className={`nav-link ${isActive('/dashboard') ? 'active' : ''}`}\n                data-testid=\"nav-dashboard\"\n              >\n                <i className=\"fas fa-tachometer-alt me-1\"></i>Dashboard\n              </Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link \n                href=\"/leads\" \n                className={`nav-link ${isActive('/leads') ? 'active' : ''}`}\n                data-testid=\"nav-leads\"\n              >\n                <i className=\"fas fa-users me-1\"></i>Leads\n              </Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link \n                href=\"/followups\" \n                className={`nav-link ${isActive('/followups') ? 'active' : ''}`}\n                data-testid=\"nav-followups\"\n              >\n                <i className=\"fas fa-calendar-check me-1\"></i>Follow-ups\n              </Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link \n                href=\"/installations\" \n                className={`nav-link ${isActive('/installations') ? 'active' : ''}`}\n                data-testid=\"nav-installations\"\n              >\n                <i className=\"fas fa-tools me-1\"></i>Installations\n              </Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link \n                href=\"/reports\" \n                className={`nav-link ${isActive('/reports') ? 'active' : ''}`}\n                data-testid=\"nav-reports\"\n              >\n                <i className=\"fas fa-chart-bar me-1\"></i>Reports\n              </Link>\n            </li>\n          </ul>\n          \n          <ul className=\"navbar-nav\">\n            <li className=\"nav-item dropdown\">\n              <a \n                className=\"nav-link dropdown-toggle\" \n                href=\"#\" \n                id=\"navbarDropdown\" \n                role=\"button\" \n                data-bs-toggle=\"dropdown\"\n                data-testid=\"user-dropdown\"\n              >\n                <i className=\"fas fa-user-circle me-1\"></i>\n                {user ? capitalizeFirst(user.username) : 'User'}\n              </a>\n              <ul className=\"dropdown-menu\">\n                <li>\n                  <a className=\"dropdown-item\" href=\"#\" data-testid=\"settings-link\">\n                    <i className=\"fas fa-cog me-2\"></i>Settings\n                  </a>\n                </li>\n                <li><hr className=\"dropdown-divider\" /></li>\n                <li>\n                  <button \n                    className=\"dropdown-item\" \n                    onClick={logout}\n                    data-testid=\"logout-button\"\n                  >\n                    <i className=\"fas fa-sign-out-alt me-2\"></i>Logout\n                  </button>\n                </li>\n              </ul>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":3979},"client/src/components/layout/sidebar.tsx":{"content":"import { useAuth } from '@/contexts/auth-context';\nimport { capitalizeFirst } from '@/lib/auth';\nimport { Link, useLocation } from 'wouter';\nimport logoPath from '@assets/wmk-wh_1756056124487.png';\n\nexport function Sidebar() {\n  const { user, logout } = useAuth();\n  const [location] = useLocation();\n\n  const isActive = (path: string) => location === path;\n\n  const navItems = [\n    { path: '/dashboard', icon: 'fas fa-tachometer-alt', label: 'Dashboard', testId: 'nav-dashboard' },\n    { path: '/leads', icon: 'fas fa-users', label: 'Leads', testId: 'nav-leads' },\n    { path: '/followups', icon: 'fas fa-calendar-check', label: 'Follow-ups', testId: 'nav-followups' },\n    { path: '/sample-booklets', icon: 'fas fa-book', label: 'Sample Booklets', testId: 'nav-sample-booklets' },\n    { path: '/installations', icon: 'fas fa-tools', label: 'Installations', testId: 'nav-installations' },\n    { path: '/reports', icon: 'fas fa-chart-bar', label: 'Reports', testId: 'nav-reports' },\n  ];\n\n  return (\n    <div className=\"sidebar\">\n      <div className=\"sidebar-header\">\n        <Link href=\"/dashboard\" className=\"sidebar-brand\" data-testid=\"sidebar-brand\">\n          <img src={logoPath} alt=\"Kitchen Logo\" style={{ height: '60px', width: 'auto' }} />\n        </Link>\n      </div>\n      \n      <nav className=\"sidebar-nav\">\n        {navItems.map((item) => (\n          <div key={item.path} className=\"sidebar-nav-item\">\n            <Link \n              href={item.path} \n              className={`sidebar-nav-link ${isActive(item.path) ? 'active' : ''}`}\n              data-testid={item.testId}\n            >\n              <i className={item.icon}></i>\n              {item.label}\n            </Link>\n          </div>\n        ))}\n      </nav>\n      \n      <div className=\"sidebar-footer\">\n        <div className=\"d-flex align-items-center mb-3\">\n          <div className=\"user-avatar me-3\">\n            {user?.username?.charAt(0).toUpperCase()}\n          </div>\n          <div className=\"flex-fill\">\n            <div className=\"fw-medium\" style={{ color: 'var(--wmk-black)' }}>\n              {user ? capitalizeFirst(user.username) : 'User'}\n            </div>\n            <div className=\"small\" style={{ color: 'var(--wmk-gray)' }}>\n              {user?.role === 'admin' ? 'Administrator' : 'Sales Rep'}\n            </div>\n          </div>\n        </div>\n        \n        <button \n          className=\"logout-btn w-100\"\n          onClick={logout}\n          data-testid=\"logout-button\"\n        >\n          <i className=\"fas fa-sign-out-alt me-2\"></i>\n          Logout\n        </button>\n      </div>\n    </div>\n  );\n}","size_bytes":2612},"client/src/components/modals/add-booklet-modal.tsx":{"content":"import { useState } from 'react';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { InsertSampleBooklet, PRODUCT_TYPES, insertSampleBookletSchema } from '@shared/schema';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface AddBookletModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function AddBookletModal({ isOpen, onClose }: AddBookletModalProps) {\n  const [formData, setFormData] = useState<InsertSampleBooklet>({\n    order_number: '',\n    customer_name: '',\n    address: '',\n    email: '',\n    phone: '',\n    product_type: 'sample_booklet_only',\n    status: 'pending',\n    tracking_number: null,\n    date_shipped: null,\n    notes: null,\n  });\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const addBookletMutation = useMutation({\n    mutationFn: async (data: InsertSampleBooklet) => {\n      return await apiRequest('POST', '/api/sample-booklets', data);\n    },\n    onSuccess: () => {\n      toast({ title: \"Success\", description: \"Sample booklet order created successfully!\" });\n      queryClient.invalidateQueries({ queryKey: ['/api/sample-booklets'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/sample-booklets/stats/dashboard'] });\n      onClose();\n      setFormData({\n        order_number: '',\n        customer_name: '',\n        address: '',\n        email: '',\n        phone: '',\n        product_type: 'sample_booklet_only',\n        status: 'pending',\n        tracking_number: null,\n        date_shipped: null,\n        notes: null,\n      });\n    },\n    onError: (error: any) => {\n      console.error('Error adding booklet:', error);\n      toast({ \n        title: \"Error\", \n        description: error.message || \"Failed to create sample booklet order\", \n        variant: \"destructive\" \n      });\n    }\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    try {\n      const validatedData = insertSampleBookletSchema.parse(formData);\n      addBookletMutation.mutate(validatedData);\n    } catch (error: any) {\n      toast({ \n        title: \"Validation Error\", \n        description: \"Please check all required fields\", \n        variant: \"destructive\" \n      });\n    }\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value || null\n    }));\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"modal show\" style={{ display: 'block', backgroundColor: 'rgba(0,0,0,0.5)' }}>\n      <div className=\"modal-dialog modal-lg\">\n        <div className=\"modal-content\">\n          <div className=\"modal-header\">\n            <h5 className=\"modal-title\">Add New Sample Booklet Order</h5>\n            <button\n              type=\"button\"\n              className=\"btn-close\"\n              onClick={onClose}\n              data-testid=\"button-close-add-modal\"\n            ></button>\n          </div>\n          \n          <form onSubmit={handleSubmit}>\n            <div className=\"modal-body\">\n              <div className=\"row g-3\">\n                <div className=\"col-md-6\">\n                  <label className=\"form-label\">Order Number *</label>\n                  <input\n                    type=\"text\"\n                    className=\"form-control\"\n                    name=\"order_number\"\n                    value={formData.order_number}\n                    onChange={handleInputChange}\n                    required\n                    data-testid=\"input-order-number\"\n                  />\n                </div>\n                \n                <div className=\"col-md-6\">\n                  <label className=\"form-label\">Product Type *</label>\n                  <select\n                    className=\"form-select\"\n                    name=\"product_type\"\n                    value={formData.product_type}\n                    onChange={handleInputChange}\n                    required\n                    data-testid=\"select-product-type\"\n                  >\n                    <option value=\"demo_kit_and_sample_booklet\">Demo Kit & Sample Booklet</option>\n                    <option value=\"sample_booklet_only\">Sample Booklet Only</option>\n                    <option value=\"trial_kit\">Trial Kit</option>\n                    <option value=\"demo_kit_only\">Demo Kit Only</option>\n                  </select>\n                </div>\n\n                <div className=\"col-md-6\">\n                  <label className=\"form-label\">Customer Name *</label>\n                  <input\n                    type=\"text\"\n                    className=\"form-control\"\n                    name=\"customer_name\"\n                    value={formData.customer_name}\n                    onChange={handleInputChange}\n                    required\n                    data-testid=\"input-customer-name\"\n                  />\n                </div>\n\n                <div className=\"col-md-6\">\n                  <label className=\"form-label\">Phone *</label>\n                  <input\n                    type=\"tel\"\n                    className=\"form-control\"\n                    name=\"phone\"\n                    value={formData.phone}\n                    onChange={handleInputChange}\n                    required\n                    data-testid=\"input-phone\"\n                  />\n                </div>\n\n                <div className=\"col-md-6\">\n                  <label className=\"form-label\">Email *</label>\n                  <input\n                    type=\"email\"\n                    className=\"form-control\"\n                    name=\"email\"\n                    value={formData.email}\n                    onChange={handleInputChange}\n                    required\n                    data-testid=\"input-email\"\n                  />\n                </div>\n\n                <div className=\"col-md-6\">\n                  <label className=\"form-label\">Status</label>\n                  <select\n                    className=\"form-select\"\n                    name=\"status\"\n                    value={formData.status}\n                    onChange={handleInputChange}\n                    data-testid=\"select-status\"\n                  >\n                    <option value=\"pending\">Pending</option>\n                    <option value=\"shipped\">Shipped</option>\n                    <option value=\"delivered\">Delivered</option>\n                  </select>\n                </div>\n\n                <div className=\"col-12\">\n                  <label className=\"form-label\">Address *</label>\n                  <textarea\n                    className=\"form-control\"\n                    name=\"address\"\n                    value={formData.address}\n                    onChange={handleInputChange}\n                    rows={3}\n                    required\n                    data-testid=\"textarea-address\"\n                  />\n                </div>\n\n                <div className=\"col-md-6\">\n                  <label className=\"form-label\">Tracking Number</label>\n                  <input\n                    type=\"text\"\n                    className=\"form-control\"\n                    name=\"tracking_number\"\n                    value={formData.tracking_number || ''}\n                    onChange={handleInputChange}\n                    data-testid=\"input-tracking-number\"\n                  />\n                </div>\n\n                <div className=\"col-12\">\n                  <label className=\"form-label\">Notes</label>\n                  <textarea\n                    className=\"form-control\"\n                    name=\"notes\"\n                    value={formData.notes || ''}\n                    onChange={handleInputChange}\n                    rows={3}\n                    data-testid=\"textarea-notes\"\n                  />\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"modal-footer\">\n              <button\n                type=\"button\"\n                className=\"btn btn-secondary\"\n                onClick={onClose}\n                data-testid=\"button-cancel-add\"\n              >\n                Cancel\n              </button>\n              <button\n                type=\"submit\"\n                className=\"btn btn-success\"\n                disabled={addBookletMutation.isPending}\n                data-testid=\"button-submit-add\"\n              >\n                {addBookletMutation.isPending ? (\n                  <>\n                    <i className=\"fas fa-spinner fa-spin me-1\"></i>\n                    Creating...\n                  </>\n                ) : (\n                  'Create Order'\n                )}\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":8771},"client/src/components/modals/add-lead-modal.tsx":{"content":"import { useState } from 'react';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { LEAD_ORIGINS, ASSIGNEES } from '@shared/schema';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface AddLeadModalProps {\n  show: boolean;\n  onHide: () => void;\n}\n\nexport function AddLeadModal({ show, onHide }: AddLeadModalProps) {\n  const [formData, setFormData] = useState({\n    name: '',\n    phone: '',\n    email: '',\n    lead_origin: '',\n    assigned_to: '',\n    project_amount: '',\n    notes: ''\n  });\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const createLeadMutation = useMutation({\n    mutationFn: async (leadData: any) => {\n      const response = await apiRequest('POST', '/api/leads', leadData);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({ title: \"Success\", description: \"Lead created successfully!\" });\n      queryClient.invalidateQueries({ queryKey: ['/api/leads'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/dashboard/stats'] });\n      resetForm();\n      onHide();\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to create lead\", variant: \"destructive\" });\n    }\n  });\n\n  const resetForm = () => {\n    setFormData({\n      name: '',\n      phone: '',\n      email: '',\n      lead_origin: '',\n      assigned_to: '',\n      project_amount: '',\n      notes: ''\n    });\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    // Validate required fields\n    if (!formData.name || !formData.phone || !formData.lead_origin || !formData.assigned_to) {\n      toast({ title: \"Error\", description: \"Please fill in all required fields\", variant: \"destructive\" });\n      return;\n    }\n    \n    const leadData = {\n      name: formData.name,\n      phone: formData.phone,\n      email: formData.email || null,\n      lead_origin: formData.lead_origin,\n      assigned_to: formData.assigned_to,\n      project_amount: formData.project_amount ? parseFloat(formData.project_amount) : null,\n      notes: formData.notes || null,\n      remarks: \"new\", // Default status for new leads\n      next_followup_date: null,\n      additional_notes: null,\n      deposit_paid: false,\n      balance_paid: false,\n      installation_date: null,\n      assigned_installer: null\n    };\n\n    createLeadMutation.mutate(leadData);\n  };\n\n  return (\n    <div \n      className={`modal fade ${show ? 'show' : ''}`} \n      style={{ display: show ? 'block' : 'none' }}\n      data-testid=\"add-lead-modal\"\n    >\n      <div className=\"modal-dialog modal-lg\">\n        <div className=\"modal-content\">\n          <div className=\"modal-header\">\n            <h5 className=\"modal-title\">Add New Lead</h5>\n            <button \n              type=\"button\" \n              className=\"btn-close\" \n              onClick={onHide}\n              data-testid=\"button-close-add-modal\"\n            ></button>\n          </div>\n          <div className=\"modal-body\">\n            <form onSubmit={handleSubmit}>\n              <div className=\"row\">\n                <div className=\"col-md-6 mb-3\">\n                  <label className=\"form-label\">Name *</label>\n                  <input\n                    type=\"text\"\n                    className=\"form-control\"\n                    value={formData.name}\n                    onChange={(e) => setFormData({...formData, name: e.target.value})}\n                    required\n                    data-testid=\"input-add-name\"\n                  />\n                </div>\n                <div className=\"col-md-6 mb-3\">\n                  <label className=\"form-label\">Phone *</label>\n                  <input\n                    type=\"tel\"\n                    className=\"form-control\"\n                    value={formData.phone}\n                    onChange={(e) => setFormData({...formData, phone: e.target.value})}\n                    required\n                    data-testid=\"input-add-phone\"\n                  />\n                </div>\n                <div className=\"col-md-6 mb-3\">\n                  <label className=\"form-label\">Email</label>\n                  <input\n                    type=\"email\"\n                    className=\"form-control\"\n                    value={formData.email}\n                    onChange={(e) => setFormData({...formData, email: e.target.value})}\n                    data-testid=\"input-add-email\"\n                  />\n                </div>\n                <div className=\"col-md-6 mb-3\">\n                  <label className=\"form-label\">Lead Origin *</label>\n                  <select\n                    className=\"form-select\"\n                    value={formData.lead_origin}\n                    onChange={(e) => setFormData({...formData, lead_origin: e.target.value})}\n                    required\n                    data-testid=\"select-add-origin\"\n                  >\n                    <option value=\"\">Select Origin</option>\n                    {LEAD_ORIGINS.map(origin => (\n                      <option key={origin} value={origin}>{origin}</option>\n                    ))}\n                  </select>\n                </div>\n                <div className=\"col-md-6 mb-3\">\n                  <label className=\"form-label\">Assigned To *</label>\n                  <select\n                    className=\"form-select\"\n                    value={formData.assigned_to}\n                    onChange={(e) => setFormData({...formData, assigned_to: e.target.value})}\n                    required\n                    data-testid=\"select-add-assigned\"\n                  >\n                    <option value=\"\">Select Team Member</option>\n                    {ASSIGNEES.map(assignee => (\n                      <option key={assignee} value={assignee}>{assignee}</option>\n                    ))}\n                  </select>\n                </div>\n                <div className=\"col-md-6 mb-3\">\n                  <label className=\"form-label\">Project Amount</label>\n                  <input\n                    type=\"number\"\n                    className=\"form-control\"\n                    step=\"0.01\"\n                    value={formData.project_amount}\n                    onChange={(e) => setFormData({...formData, project_amount: e.target.value})}\n                    data-testid=\"input-add-amount\"\n                  />\n                </div>\n                <div className=\"col-12 mb-3\">\n                  <label className=\"form-label\">Notes</label>\n                  <textarea\n                    className=\"form-control\"\n                    rows={3}\n                    placeholder=\"Add any initial notes about this lead...\"\n                    value={formData.notes}\n                    onChange={(e) => setFormData({...formData, notes: e.target.value})}\n                    data-testid=\"textarea-add-notes\"\n                  />\n                </div>\n              </div>\n            </form>\n          </div>\n          <div className=\"modal-footer\">\n            <button \n              type=\"button\" \n              className=\"btn btn-secondary\" \n              onClick={onHide}\n              data-testid=\"button-cancel-add\"\n            >\n              Cancel\n            </button>\n            <button\n              type=\"button\"\n              className=\"btn btn-primary\"\n              onClick={handleSubmit}\n              disabled={createLeadMutation.isPending}\n              data-testid=\"button-save-add\"\n            >\n              {createLeadMutation.isPending ? (\n                <>\n                  <i className=\"fas fa-spinner fa-spin me-2\"></i>Adding...\n                </>\n              ) : (\n                'Add Lead'\n              )}\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7743},"client/src/components/modals/edit-booklet-modal.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { SampleBooklet, UpdateSampleBooklet, updateSampleBookletSchema } from '@shared/schema';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface EditBookletModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  booklet: SampleBooklet | null;\n}\n\ninterface FormData extends Omit<UpdateSampleBooklet, 'date_shipped'> {\n  date_shipped?: string;\n}\n\nexport default function EditBookletModal({ isOpen, onClose, booklet }: EditBookletModalProps) {\n  const [formData, setFormData] = useState<FormData>({});\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  useEffect(() => {\n    if (booklet) {\n      setFormData({\n        order_number: booklet.order_number,\n        customer_name: booklet.customer_name,\n        address: booklet.address,\n        email: booklet.email,\n        phone: booklet.phone,\n        product_type: booklet.product_type,\n        status: booklet.status,\n        tracking_number: booklet.tracking_number,\n        date_shipped: booklet.date_shipped ? new Date(booklet.date_shipped).toISOString().split('T')[0] : '',\n        notes: booklet.notes,\n      });\n    }\n  }, [booklet]);\n\n  const updateBookletMutation = useMutation({\n    mutationFn: async (data: UpdateSampleBooklet) => {\n      if (!booklet) throw new Error('No booklet selected');\n      return await apiRequest('PUT', `/api/sample-booklets/${booklet.id}`, data);\n    },\n    onSuccess: () => {\n      toast({ title: \"Success\", description: \"Sample booklet order updated successfully!\" });\n      queryClient.invalidateQueries({ queryKey: ['/api/sample-booklets'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/sample-booklets/stats/dashboard'] });\n      onClose();\n    },\n    onError: (error: any) => {\n      console.error('Error updating booklet:', error);\n      toast({ \n        title: \"Error\", \n        description: error.message || \"Failed to update sample booklet order\", \n        variant: \"destructive\" \n      });\n    }\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    try {\n      const processedData: UpdateSampleBooklet = {\n        ...formData,\n        date_shipped: formData.date_shipped ? new Date(formData.date_shipped) : null\n      };\n      const validatedData = updateSampleBookletSchema.parse(processedData);\n      updateBookletMutation.mutate(validatedData);\n    } catch (error: any) {\n      toast({ \n        title: \"Validation Error\", \n        description: \"Please check all fields\", \n        variant: \"destructive\" \n      });\n    }\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value || null\n    }));\n  };\n\n  const handleStatusChange = (newStatus: string) => {\n    setFormData(prev => ({\n      ...prev,\n      status: newStatus,\n      date_shipped: newStatus === 'shipped' && !prev.date_shipped ? new Date().toISOString().split('T')[0] : prev.date_shipped\n    }));\n  };\n\n  if (!isOpen || !booklet) return null;\n\n  return (\n    <div className=\"modal show\" style={{ display: 'block', backgroundColor: 'rgba(0,0,0,0.5)' }}>\n      <div className=\"modal-dialog modal-lg\">\n        <div className=\"modal-content\">\n          <div className=\"modal-header\">\n            <h5 className=\"modal-title\">Edit Sample Booklet Order - {booklet.order_number}</h5>\n            <button\n              type=\"button\"\n              className=\"btn-close\"\n              onClick={onClose}\n              data-testid=\"button-close-edit-modal\"\n            ></button>\n          </div>\n          \n          <form onSubmit={handleSubmit}>\n            <div className=\"modal-body\">\n              <div className=\"row g-3\">\n                <div className=\"col-md-6\">\n                  <label className=\"form-label\">Order Number</label>\n                  <input\n                    type=\"text\"\n                    className=\"form-control\"\n                    name=\"order_number\"\n                    value={formData.order_number || ''}\n                    onChange={handleInputChange}\n                    data-testid=\"input-edit-order-number\"\n                  />\n                </div>\n                \n                <div className=\"col-md-6\">\n                  <label className=\"form-label\">Product Type</label>\n                  <select\n                    className=\"form-select\"\n                    name=\"product_type\"\n                    value={formData.product_type || ''}\n                    onChange={handleInputChange}\n                    data-testid=\"select-edit-product-type\"\n                  >\n                    <option value=\"demo_kit_and_sample_booklet\">Demo Kit & Sample Booklet</option>\n                    <option value=\"sample_booklet_only\">Sample Booklet Only</option>\n                    <option value=\"trial_kit\">Trial Kit</option>\n                    <option value=\"demo_kit_only\">Demo Kit Only</option>\n                  </select>\n                </div>\n\n                <div className=\"col-md-6\">\n                  <label className=\"form-label\">Customer Name</label>\n                  <input\n                    type=\"text\"\n                    className=\"form-control\"\n                    name=\"customer_name\"\n                    value={formData.customer_name || ''}\n                    onChange={handleInputChange}\n                    data-testid=\"input-edit-customer-name\"\n                  />\n                </div>\n\n                <div className=\"col-md-6\">\n                  <label className=\"form-label\">Phone</label>\n                  <input\n                    type=\"tel\"\n                    className=\"form-control\"\n                    name=\"phone\"\n                    value={formData.phone || ''}\n                    onChange={handleInputChange}\n                    data-testid=\"input-edit-phone\"\n                  />\n                </div>\n\n                <div className=\"col-md-6\">\n                  <label className=\"form-label\">Email</label>\n                  <input\n                    type=\"email\"\n                    className=\"form-control\"\n                    name=\"email\"\n                    value={formData.email || ''}\n                    onChange={handleInputChange}\n                    data-testid=\"input-edit-email\"\n                  />\n                </div>\n\n                <div className=\"col-md-6\">\n                  <label className=\"form-label\">Status</label>\n                  <select\n                    className=\"form-select\"\n                    name=\"status\"\n                    value={formData.status || 'pending'}\n                    onChange={(e) => handleStatusChange(e.target.value)}\n                    data-testid=\"select-edit-status\"\n                  >\n                    <option value=\"pending\">Pending</option>\n                    <option value=\"shipped\">Shipped</option>\n                    <option value=\"delivered\">Delivered</option>\n                  </select>\n                </div>\n\n                <div className=\"col-12\">\n                  <label className=\"form-label\">Address</label>\n                  <textarea\n                    className=\"form-control\"\n                    name=\"address\"\n                    value={formData.address || ''}\n                    onChange={handleInputChange}\n                    rows={3}\n                    data-testid=\"textarea-edit-address\"\n                  />\n                </div>\n\n                <div className=\"col-md-6\">\n                  <label className=\"form-label\">Tracking Number</label>\n                  <input\n                    type=\"text\"\n                    className=\"form-control\"\n                    name=\"tracking_number\"\n                    value={formData.tracking_number || ''}\n                    onChange={handleInputChange}\n                    data-testid=\"input-edit-tracking-number\"\n                  />\n                </div>\n\n                <div className=\"col-md-6\">\n                  <label className=\"form-label\">Date Shipped</label>\n                  <input\n                    type=\"date\"\n                    className=\"form-control\"\n                    name=\"date_shipped\"\n                    value={formData.date_shipped || ''}\n                    onChange={handleInputChange}\n                    data-testid=\"input-edit-date-shipped\"\n                  />\n                </div>\n\n                <div className=\"col-12\">\n                  <label className=\"form-label\">Notes</label>\n                  <textarea\n                    className=\"form-control\"\n                    name=\"notes\"\n                    value={formData.notes || ''}\n                    onChange={handleInputChange}\n                    rows={3}\n                    data-testid=\"textarea-edit-notes\"\n                  />\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"modal-footer\">\n              <button\n                type=\"button\"\n                className=\"btn btn-secondary\"\n                onClick={onClose}\n                data-testid=\"button-cancel-edit\"\n              >\n                Cancel\n              </button>\n              <button\n                type=\"submit\"\n                className=\"btn btn-primary\"\n                disabled={updateBookletMutation.isPending}\n                data-testid=\"button-submit-edit\"\n              >\n                {updateBookletMutation.isPending ? (\n                  <>\n                    <i className=\"fas fa-spinner fa-spin me-1\"></i>\n                    Updating...\n                  </>\n                ) : (\n                  'Update Order'\n                )}\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":9880},"client/src/components/modals/quick-edit-modal.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Lead, LEAD_ORIGINS, LEAD_STATUSES, ASSIGNEES } from '@shared/schema';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface QuickEditModalProps {\n  lead: Lead | null;\n  show: boolean;\n  onHide: () => void;\n  onSave: () => void;\n}\n\nexport function QuickEditModal({ lead, show, onHide, onSave }: QuickEditModalProps) {\n  const [formData, setFormData] = useState({\n    name: '',\n    phone: '',\n    email: '',\n    lead_origin: '',\n    remarks: '',\n    assigned_to: '',\n    project_amount: '',\n    next_followup_date: '',\n    notes: ''\n  });\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const updateLeadMutation = useMutation({\n    mutationFn: async (updates: any) => {\n      if (!lead) throw new Error('No lead selected');\n      const response = await apiRequest('PUT', `/api/leads/${lead.id}`, updates);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({ title: \"Success\", description: \"Lead updated successfully!\" });\n      queryClient.invalidateQueries({ queryKey: ['/api/leads'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/dashboard/stats'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/followups'] });\n      onSave();\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to update lead\", variant: \"destructive\" });\n    }\n  });\n\n  useEffect(() => {\n    if (lead) {\n      setFormData({\n        name: lead.name || '',\n        phone: lead.phone || '',\n        email: lead.email || '',\n        lead_origin: lead.lead_origin || '',\n        remarks: lead.remarks || '',\n        assigned_to: lead.assigned_to || '',\n        project_amount: lead.project_amount ? lead.project_amount.toString() : '',\n        next_followup_date: lead.next_followup_date ? \n          new Date(lead.next_followup_date).toISOString().split('T')[0] : '',\n        notes: lead.notes || ''\n      });\n    }\n  }, [lead]);\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    const updates = {\n      name: formData.name,\n      phone: formData.phone,\n      email: formData.email || null,\n      lead_origin: formData.lead_origin,\n      remarks: formData.remarks,\n      assigned_to: formData.assigned_to,\n      project_amount: formData.project_amount ? parseFloat(formData.project_amount) : null,\n      next_followup_date: formData.next_followup_date ? new Date(formData.next_followup_date) : null,\n      notes: formData.notes || null\n    };\n\n    updateLeadMutation.mutate(updates);\n  };\n\n  if (!lead) return null;\n\n  return (\n    <div \n      className={`modal fade ${show ? 'show' : ''}`} \n      style={{ display: show ? 'block' : 'none' }}\n      data-testid=\"quick-edit-modal\"\n    >\n      <div className=\"modal-dialog modal-lg\">\n        <div className=\"modal-content\">\n          <div className=\"modal-header\">\n            <h5 className=\"modal-title\">Quick Edit Lead</h5>\n            <button \n              type=\"button\" \n              className=\"btn-close\" \n              onClick={onHide}\n              data-testid=\"button-close-modal\"\n            ></button>\n          </div>\n          <div className=\"modal-body\">\n            <form onSubmit={handleSubmit}>\n              <div className=\"row\">\n                <div className=\"col-md-6 mb-3\">\n                  <label className=\"form-label\">Name</label>\n                  <input\n                    type=\"text\"\n                    className=\"form-control\"\n                    value={formData.name}\n                    onChange={(e) => setFormData({...formData, name: e.target.value})}\n                    data-testid=\"input-edit-name\"\n                  />\n                </div>\n                <div className=\"col-md-6 mb-3\">\n                  <label className=\"form-label\">Phone</label>\n                  <input\n                    type=\"tel\"\n                    className=\"form-control\"\n                    value={formData.phone}\n                    onChange={(e) => setFormData({...formData, phone: e.target.value})}\n                    data-testid=\"input-edit-phone\"\n                  />\n                </div>\n                <div className=\"col-md-6 mb-3\">\n                  <label className=\"form-label\">Email</label>\n                  <input\n                    type=\"email\"\n                    className=\"form-control\"\n                    value={formData.email}\n                    onChange={(e) => setFormData({...formData, email: e.target.value})}\n                    data-testid=\"input-edit-email\"\n                  />\n                </div>\n                <div className=\"col-md-6 mb-3\">\n                  <label className=\"form-label\">Lead Origin</label>\n                  <select\n                    className=\"form-select\"\n                    value={formData.lead_origin}\n                    onChange={(e) => setFormData({...formData, lead_origin: e.target.value})}\n                    data-testid=\"select-edit-origin\"\n                  >\n                    {LEAD_ORIGINS.map(origin => (\n                      <option key={origin} value={origin}>{origin}</option>\n                    ))}\n                  </select>\n                </div>\n                <div className=\"col-md-6 mb-3\">\n                  <label className=\"form-label\">Status</label>\n                  <select\n                    className=\"form-select\"\n                    value={formData.remarks}\n                    onChange={(e) => setFormData({...formData, remarks: e.target.value})}\n                    data-testid=\"select-edit-status\"\n                  >\n                    {LEAD_STATUSES.map(status => (\n                      <option key={status} value={status}>{status}</option>\n                    ))}\n                  </select>\n                </div>\n                <div className=\"col-md-6 mb-3\">\n                  <label className=\"form-label\">Assigned To</label>\n                  <select\n                    className=\"form-select\"\n                    value={formData.assigned_to}\n                    onChange={(e) => setFormData({...formData, assigned_to: e.target.value})}\n                    data-testid=\"select-edit-assigned\"\n                  >\n                    {ASSIGNEES.map(assignee => (\n                      <option key={assignee} value={assignee}>{assignee}</option>\n                    ))}\n                  </select>\n                </div>\n                <div className=\"col-md-6 mb-3\">\n                  <label className=\"form-label\">Project Amount</label>\n                  <input\n                    type=\"number\"\n                    className=\"form-control\"\n                    step=\"0.01\"\n                    value={formData.project_amount}\n                    onChange={(e) => setFormData({...formData, project_amount: e.target.value})}\n                    data-testid=\"input-edit-amount\"\n                  />\n                </div>\n                <div className=\"col-md-6 mb-3\">\n                  <label className=\"form-label\">Next Follow-up</label>\n                  <input\n                    type=\"date\"\n                    className=\"form-control\"\n                    value={formData.next_followup_date}\n                    onChange={(e) => setFormData({...formData, next_followup_date: e.target.value})}\n                    data-testid=\"input-edit-followup\"\n                  />\n                </div>\n                <div className=\"col-12 mb-3\">\n                  <label className=\"form-label\">Notes</label>\n                  <textarea\n                    className=\"form-control\"\n                    rows={3}\n                    value={formData.notes}\n                    onChange={(e) => setFormData({...formData, notes: e.target.value})}\n                    data-testid=\"textarea-edit-notes\"\n                  />\n                </div>\n              </div>\n            </form>\n          </div>\n          <div className=\"modal-footer\">\n            <button \n              type=\"button\" \n              className=\"btn btn-secondary\" \n              onClick={onHide}\n              data-testid=\"button-cancel-edit\"\n            >\n              Cancel\n            </button>\n            <button\n              type=\"button\"\n              className=\"btn btn-primary\"\n              onClick={handleSubmit}\n              disabled={updateLeadMutation.isPending}\n              data-testid=\"button-save-edit\"\n            >\n              {updateLeadMutation.isPending ? (\n                <>\n                  <i className=\"fas fa-spinner fa-spin me-2\"></i>Saving...\n                </>\n              ) : (\n                'Save Changes'\n              )}\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8782},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"convert_and_import.py":{"content":"#!/usr/bin/env python3\nimport re\nimport uuid\nimport mysql.connector\nimport os\n\n# Database connection\nDATABASE_URL = os.environ.get('DATABASE_URL')\n\ndef convert_lead_origin(origin):\n    \"\"\"Convert lead origin to match current schema format\"\"\"\n    mapping = {\n        'Facebook': 'facebook',\n        'Google Text': 'google',\n        'Instagram': 'instagram', \n        'Trade Show': 'trade-show',\n        'WhatsApp': 'whatsapp',\n        'Commercial': 'commercial',\n        'Referral': 'referral',\n        'Website': 'website',\n        'Phone': 'phone',\n        'Email': 'email'\n    }\n    return mapping.get(origin, origin.lower())\n\ndef convert_remarks(remarks):\n    \"\"\"Convert remarks to match current schema format\"\"\"\n    mapping = {\n        'Not Interested': 'not-interested',\n        'Not Service Area': 'not-service-area',\n        'Not Compatible': 'not-compatible',\n        'Sold': 'sold',\n        'In Progress': 'in-progress',\n        'New': 'new'\n    }\n    return mapping.get(remarks, 'new')\n\ndef convert_assignee(assignee):\n    \"\"\"Convert assignee to match current schema format\"\"\"\n    mapping = {\n        'Kim': 'kim',\n        'Patrick': 'patrick', \n        'Lina': 'lina'\n    }\n    return mapping.get(assignee, assignee.lower() if assignee else None)\n\ndef convert_installer(installer):\n    \"\"\"Convert installer to match current schema format\"\"\"\n    if not installer:\n        return None\n    mapping = {\n        'Angel': 'angel',\n        'Brian': 'brian',\n        'Luis': 'luis'\n    }\n    return mapping.get(installer, installer.lower())\n\ndef parse_leads_from_sql(filename):\n    \"\"\"Parse leads data from SQL file\"\"\"\n    with open(filename, 'r') as f:\n        content = f.read()\n    \n    # Find all data rows (lines starting with opening parenthesis)\n    data_pattern = r'\\((\\d+),\\s*\\'([^\\']*)\\',\\s*\\'([^\\']*)\\',\\s*\\'([^\\']*)\\',\\s*\\'([^\\']*)\\',\\s*(?:\\'([^\\']*)\\',|NULL,)\\s*(?:\\'([^\\']*)\\',|NULL,)\\s*(?:\\'([^\\']*)\\',|NULL,)\\s*(?:\\'([^\\']*)\\',|NULL,)\\s*\\'([^\\']*)\\',\\s*\\'([^\\']*)\\',\\s*(\\d+\\.?\\d*),\\s*\\'([^\\']*)\\',\\s*\\'([^\\']*)\\',\\s*([01]),\\s*([01]),\\s*(?:\\'([^\\']*)\\',|NULL,)\\s*(?:\\'([^\\']*)\\',|NULL,)\\s*\\)(?:,|\\;)'\n    \n    leads = []\n    lines = content.split('\\n')\n    \n    current_values = []\n    in_values_section = False\n    \n    for line in lines:\n        line = line.strip()\n        if line.startswith('INSERT INTO'):\n            in_values_section = True\n            continue\n        elif in_values_section and line.startswith('('):\n            # Extract data from parentheses, handling multi-line values\n            current_values.append(line)\n        elif in_values_section and not line:\n            # Empty line marks end of INSERT section\n            in_values_section = False\n            # Process collected values\n            full_values = ' '.join(current_values)\n            # Parse individual records\n            matches = re.findall(r'\\(([^)]+)\\)', full_values)\n            for match in matches:\n                parts = [p.strip().strip(\"'\") for p in match.split(',')]\n                if len(parts) >= 16:  # Ensure we have enough data fields\n                    leads.append(parts)\n            current_values = []\n    \n    return leads\n\ndef import_leads(leads):\n    \"\"\"Import leads data into database\"\"\"\n    if not DATABASE_URL:\n        print(\"DATABASE_URL not found\")\n        return\n        \n    conn = mysql.connector.connect(DATABASE_URL)\n    cur = conn.cursor()\n    \n    imported_count = 0\n    \n    for lead_data in leads:\n        try:\n            # Generate UUID for this lead\n            lead_id = str(uuid.uuid4())\n            \n            # Parse the lead data (adjust indices based on your SQL structure)\n            if len(lead_data) < 16:\n                continue\n                \n            original_id = lead_data[0]\n            date_created = lead_data[1] if lead_data[1] != 'NULL' else None\n            lead_origin = convert_lead_origin(lead_data[2])\n            name = lead_data[3]\n            phone = lead_data[4] if lead_data[4] != 'NULL' else ''\n            email = lead_data[5] if lead_data[5] != 'NULL' else None\n            next_followup_date = lead_data[6] if lead_data[6] != 'NULL' else None\n            remarks = convert_remarks(lead_data[7]) if lead_data[7] != 'NULL' else 'new'\n            assigned_to = convert_assignee(lead_data[8]) if lead_data[8] != 'NULL' else None\n            notes = lead_data[9] if lead_data[9] != 'NULL' else ''\n            additional_notes = lead_data[10] if lead_data[10] != 'NULL' else ''\n            project_amount = float(lead_data[11]) if lead_data[11] != 'NULL' else 0\n            deposit_paid = bool(int(lead_data[14])) if lead_data[14] != 'NULL' else False\n            balance_paid = bool(int(lead_data[15])) if lead_data[15] != 'NULL' else False\n            installation_date = lead_data[16] if len(lead_data) > 16 and lead_data[16] != 'NULL' else None\n            assigned_installer = convert_installer(lead_data[17]) if len(lead_data) > 17 and lead_data[17] != 'NULL' else None\n            \n            # Insert lead\n            cur.execute(\"\"\"\n                INSERT INTO leads (\n                    id, name, phone, email, lead_origin, date_created,\n                    next_followup_date, remarks, assigned_to, project_amount,\n                    notes, additional_notes, deposit_paid, balance_paid,\n                    installation_date, assigned_installer\n                ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)\n            \"\"\", (\n                lead_id, name, phone, email, lead_origin, date_created,\n                next_followup_date, remarks, assigned_to, project_amount,\n                notes, additional_notes, deposit_paid, balance_paid,\n                installation_date, assigned_installer\n            ))\n            \n            imported_count += 1\n            \n        except Exception as e:\n            print(f\"Error importing lead {original_id}: {e}\")\n            continue\n    \n    conn.commit()\n    cur.close()\n    conn.close()\n    \n    print(f\"Successfully imported {imported_count} leads\")\n\nif __name__ == \"__main__\":\n    print(\"Converting and importing leads data...\")\n    leads = parse_leads_from_sql('leads_data.sql')\n    print(f\"Found {len(leads)} leads to import\")\n    import_leads(leads)","size_bytes":6237},"import-data.js":{"content":"import fs from 'fs';\nimport mysql from 'mysql2/promise';\n\n// Sample data transformation - I'll import a few key leads first to test\nconst sampleLeads = [\n  {\n    name: 'NA',\n    phone: '(786) 301-8300',\n    email: 'Ksazanovich@gmail.com',\n    lead_origin: 'google',\n    date_created: '2025-08-22',\n    next_followup_date: '2025-08-25',\n    remarks: 'in-progress', \n    assigned_to: 'patrick',\n    notes: '',\n    additional_notes: '',\n    project_amount: 4995.00,\n    deposit_paid: false,\n    balance_paid: false,\n    installation_date: null,\n    assigned_installer: null\n  },\n  {\n    name: 'Mareena Win',\n    phone: '(813) 528-1250', \n    email: 'mareenawin@gmail.com',\n    lead_origin: 'website',\n    date_created: '2025-08-22',\n    next_followup_date: '2025-08-25',\n    remarks: 'not-service-area',\n    assigned_to: 'kim',\n    notes: '',\n    additional_notes: '',\n    project_amount: 0.00,\n    deposit_paid: false,\n    balance_paid: false,\n    installation_date: null,\n    assigned_installer: null\n  },\n  {\n    name: 'Missy - New Project',\n    phone: '(786) 255-0686',\n    email: 'Missygueits@gmail.com', \n    lead_origin: 'google',\n    date_created: '2025-08-21',\n    next_followup_date: null,\n    remarks: 'sold',\n    assigned_to: null,\n    notes: 'New Project - WMK-009 most likely. Need a confirmation of the color - HOUSE no COI\\nNEED TO CONNECT WITH HER HUBSBAND FOR CHASE renovation - Instead of replacing, reface!2',\n    additional_notes: '',\n    project_amount: 2295.00,\n    deposit_paid: false,\n    balance_paid: false,\n    installation_date: null,\n    assigned_installer: null\n  },\n  {\n    name: 'Carolina',\n    phone: '(305) 613-8464',\n    email: 'Bookcaropozo@gmail.com',\n    lead_origin: 'google', \n    date_created: '2025-08-14',\n    next_followup_date: '2025-09-04',\n    remarks: 'sold',\n    assigned_to: 'patrick',\n    notes: 'Installation on 09/04. SENT sample booklet today by USPS',\n    additional_notes: '',\n    project_amount: 2895.00,\n    deposit_paid: true,\n    balance_paid: false,\n    installation_date: '2025-08-30',\n    assigned_installer: 'brian'\n  }\n];\n\n// Sample booklets data\nconst sampleBooklets = [\n  {\n    order_number: '21507',\n    customer_name: 'Joanne Post',\n    address: '9 Marquis Ct\\nEdgewater, NJ 07020\\nUnited States (US)',\n    email: 'joannepost54@gmail.com',\n    phone: '(917) 881-8414',\n    product_type: 'sample_booklet_only',\n    tracking_number: '9505514509015206843796',\n    status: 'delivered',\n    date_ordered: '2025-07-18',\n    date_shipped: '2025-07-25',\n    notes: ''\n  },\n  {\n    order_number: '21524', \n    customer_name: 'Alma de la Rosa',\n    address: '1519 39th Avenue\\nSan Francisco, CA 94122\\nUnited States (US)',\n    email: 'Xtsonnytx@gmail.com',\n    phone: '(415) 992-2274',\n    product_type: 'sample_booklet_only',\n    tracking_number: null,\n    status: 'pending',\n    date_ordered: '2025-08-23',\n    date_shipped: null,\n    notes: ''\n  }\n];\n\nasync function importData() {\n  const pool = mysql.createPool(process.env.DATABASE_URL);\n\n  try {\n    const connection = await pool.getConnection();\n\n    // Import sample leads\n    console.log('Importing sample leads...');\n    for (const lead of sampleLeads) {\n      await connection.execute(`\n        INSERT INTO leads (\n          id, name, phone, email, lead_origin, date_created, \n          next_followup_date, remarks, assigned_to, project_amount,\n          notes, additional_notes, deposit_paid, balance_paid,\n          installation_date, assigned_installer\n        ) VALUES (UUID(), ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n      `, [\n        lead.name, lead.phone, lead.email, lead.lead_origin, lead.date_created,\n        lead.next_followup_date, lead.remarks, lead.assigned_to, lead.project_amount,\n        lead.notes, lead.additional_notes, lead.deposit_paid, lead.balance_paid,\n        lead.installation_date, lead.assigned_installer\n      ]);\n    }\n\n    // Import sample booklets  \n    console.log('Importing sample booklets...');\n    for (const booklet of sampleBooklets) {\n      await connection.execute(`\n        INSERT INTO sample_booklets (\n          id, order_number, customer_name, address, email, phone,\n          product_type, tracking_number, status, date_ordered, \n          date_shipped, notes, created_at, updated_at\n        ) VALUES (UUID(), ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, NOW(), NOW())\n      `, [\n        booklet.order_number, booklet.customer_name, booklet.address, \n        booklet.email, booklet.phone, booklet.product_type, booklet.tracking_number,\n        booklet.status, booklet.date_ordered, booklet.date_shipped, booklet.notes\n      ]);\n    }\n\n    connection.release();\n    console.log('Sample data imported successfully!');\n    \n  } catch (error) {\n    console.error('Error importing data:', error);\n  } finally {\n    await pool.end();\n  }\n}\n\nimportData();","size_bytes":4809},"EMAIL_SETUP.md":{"content":"# Email Notifications for Installations\n\n## Overview\nThe WMK CRM now includes email notification functionality for installations. This allows you to automatically send professional email notifications to both clients and installers about upcoming installations.\n\n## Features\n- ✅ Client email notifications with installation details\n- ✅ Installer email notifications with job details\n- ✅ Custom message support\n- ✅ Professional email templates\n- ✅ SMTP support for real email delivery\n- ✅ Test mode with Ethereal Email for development\n\n## How to Use\n\n### 1. From the Installations Page\n1. Navigate to the **Installations** page\n2. Find the installation you want to send notifications for\n3. Click the **\"Send Email\"** button for that installation\n4. Choose the email type:\n   - **Client Email**: Sends confirmation to the customer\n   - **Installer Email**: Sends job assignment to the installer\n5. Optionally add a custom message\n6. Click **\"Send Email\"**\n\n### 2. Email Templates\n\n#### Client Email includes:\n- Installation date and time\n- Customer details\n- Project value\n- Assigned installer\n- What to expect during installation\n- Contact information\n\n#### Installer Email includes:\n- Job assignment details\n- Customer contact information\n- Project value\n- Payment status (deposit/balance)\n- Installation notes\n- Instructions to contact customer 24h before\n\n## Email Configuration\n\n### Development Mode (Default)\n- Uses **Ethereal Email** for testing\n- Emails are not actually delivered\n- Preview URLs are shown in the console\n- No configuration required\n\n### Production Mode (Real Email Delivery)\nTo send real emails, configure your `.env` file:\n\n```bash\n# Gmail Configuration (recommended)\nEMAIL_USER=your-email@gmail.com\nEMAIL_PASS=your-app-password\nEMAIL_FROM=\"WMK Installation Team <your-email@gmail.com>\"\n\n# Optional SMTP settings (defaults to Gmail)\nSMTP_HOST=smtp.gmail.com\nSMTP_PORT=587\n```\n\n### Gmail Setup Instructions\n1. Enable 2-Factor Authentication on your Gmail account\n2. Generate an **App Password**:\n   - Go to Google Account settings\n   - Security → 2-Step Verification → App passwords\n   - Generate a new app password for \"Mail\"\n3. Use this app password (not your regular password) in `EMAIL_PASS`\n\n### Other Email Providers\n\n#### Outlook/Hotmail\n```bash\nSMTP_HOST=smtp-mail.outlook.com\nSMTP_PORT=587\nEMAIL_USER=your-email@outlook.com\nEMAIL_PASS=your-password\n```\n\n#### Custom SMTP\n```bash\nSMTP_HOST=your-smtp-server.com\nSMTP_PORT=587\nEMAIL_USER=your-smtp-username\nEMAIL_PASS=your-smtp-password\n```\n\n## Testing\n\n### Test with Ethereal Email\n1. Keep `.env` file without EMAIL_USER and EMAIL_PASS\n2. Send test emails from the installations page\n3. Check console for preview URLs like:\n   ```\n   📧 Email preview URL: https://ethereal.email/message/xxx\n   ```\n4. Open the preview URL to see how the email looks\n\n### Test with Real Email\n1. Configure your email settings in `.env`\n2. Restart the server: `npm run dev`\n3. Send a test email to yourself first\n4. Check spam folder if emails don't appear in inbox\n\n## Troubleshooting\n\n### \"Failed to send email notification\"\n- Check your email credentials in `.env`\n- Verify SMTP settings for your provider\n- Check console for detailed error messages\n- Ensure your email provider allows SMTP access\n\n### Gmail \"Invalid credentials\"\n- Make sure you're using an **App Password**, not your regular password\n- Verify 2-Factor Authentication is enabled\n- Check that the app password is correctly copied\n\n### Emails going to spam\n- Configure SPF/DKIM records for your domain (advanced)\n- Use a professional \"from\" address\n- Avoid spam trigger words in email content\n- Consider using dedicated email services like SendGrid or Mailgun for production\n\n## Future Enhancements\n- [ ] Email templates customization\n- [ ] Scheduled email reminders\n- [ ] Email delivery status tracking\n- [ ] Integration with calendar systems\n- [ ] SMS notifications\n- [ ] Multiple installer email support\n","size_bytes":3956},"check-alessandra-details.js":{"content":"import mysql from 'mysql2/promise';\n\nasync function checkAlessandraDetails() {\n  try {\n    const connection = await mysql.createConnection({\n      host: 'localhost',\n      user: 'root',\n      password: '',\n      database: 'wmk_crm'\n    });\n\n    // Search for Alessandra Carvalho\n    const [rows] = await connection.execute(`\n      SELECT \n        name,\n        phone,\n        email,\n        lead_origin,\n        date_created,\n        next_followup_date,\n        remarks as status,\n        assigned_to,\n        project_amount,\n        notes\n      FROM leads \n      WHERE name = 'Alessandra Carvalho'\n    `);\n    \n    if (rows.length > 0) {\n      const lead = rows[0];\n      \n      console.log('=== ALESSANDRA CARVALHO DETAILS ===');\n      console.log('Name:', lead.name);\n      console.log('Phone:', lead.phone);\n      console.log('Email:', lead.email);\n      console.log('Lead Origin:', lead.lead_origin);\n      console.log('Date Created:', lead.date_created);\n      console.log('Next Follow-up:', lead.next_followup_date);\n      console.log('Status:', lead.status);\n      console.log('Assigned To:', lead.assigned_to);\n      console.log('Project Amount:', lead.project_amount);\n      console.log('Notes:', lead.notes);\n      \n      // Check if overdue\n      const today = new Date();\n      const followupDate = new Date(lead.next_followup_date);\n      const diffTime = today - followupDate;\n      const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n      \n      console.log('\\n=== FOLLOW-UP STATUS ===');\n      console.log('Today:', today.toDateString());\n      console.log('Follow-up Date:', followupDate.toDateString());\n      \n      if (diffDays > 0) {\n        console.log(`STATUS: OVERDUE by ${diffDays} days`);\n      } else if (diffDays === 0) {\n        console.log('STATUS: Due today');\n      } else {\n        console.log(`STATUS: Upcoming in ${Math.abs(diffDays)} days`);\n      }\n    } else {\n      console.log('Alessandra Carvalho not found');\n    }\n\n    await connection.end();\n  } catch (error) {\n    console.error('Error:', error);\n  }\n}\n\ncheckAlessandraDetails();\n","size_bytes":2087},"check-alessandra.js":{"content":"import mysql from 'mysql2/promise';\n\nasync function checkAlessandra() {\n  try {\n    const connection = await mysql.createConnection({\n      host: 'localhost',\n      user: 'root',\n      password: '',\n      database: 'wmk_crm'\n    });\n\n    // Search for Alessandra Carvalho\n    const [rows] = await connection.execute(`\n      SELECT * FROM leads \n      WHERE name LIKE '%Alessandra%' OR name LIKE '%Carvalho%'\n      OR email LIKE '%alessandra%' OR phone LIKE '%305%851%1881%'\n    `);\n    \n    console.log('Search results for Alessandra Carvalho:');\n    if (rows.length > 0) {\n      console.table(rows);\n    } else {\n      console.log('No leads found matching Alessandra Carvalho');\n      \n      // Let's also check for similar emails or phone numbers\n      const [emailRows] = await connection.execute(`\n        SELECT * FROM leads \n        WHERE email LIKE '%oaksdg%' OR phone LIKE '%305%851%'\n      `);\n      \n      console.log('\\nSearching for similar email domain or phone:');\n      if (emailRows.length > 0) {\n        console.table(emailRows);\n      } else {\n        console.log('No similar records found');\n      }\n    }\n\n    await connection.end();\n  } catch (error) {\n    console.error('Error:', error);\n  }\n}\n\ncheckAlessandra();\n","size_bytes":1236},"check-installations.js":{"content":"import mysql from 'mysql2/promise';\n\nasync function checkInstallations() {\n  try {\n    const connection = await mysql.createConnection({\n      host: 'localhost',\n      user: 'root',\n      password: '',\n      database: 'wmk_crm'\n    });\n\n    // Check leads with installation dates\n    const [rows] = await connection.execute(`\n      SELECT \n        name,\n        phone,\n        email,\n        remarks as status,\n        project_amount,\n        installation_date,\n        assigned_installer,\n        deposit_paid,\n        balance_paid\n      FROM leads \n      WHERE installation_date IS NOT NULL \n      ORDER BY installation_date\n    `);\n    \n    console.log(`Found ${rows.length} leads with scheduled installations:`);\n    if (rows.length > 0) {\n      console.table(rows);\n    }\n\n    // Check installer assignments\n    const [installerCounts] = await connection.execute(`\n      SELECT \n        assigned_installer,\n        COUNT(*) as count\n      FROM leads \n      WHERE assigned_installer IS NOT NULL \n      GROUP BY assigned_installer\n    `);\n    \n    console.log('\\nInstaller assignments:');\n    if (installerCounts.length > 0) {\n      console.table(installerCounts);\n    }\n\n    await connection.end();\n  } catch (error) {\n    console.error('Error:', error);\n  }\n}\n\ncheckInstallations();\n","size_bytes":1288},"check-sample-booklets-debug.js":{"content":"import { db } from './server/db.js';\nimport { sampleBooklets } from './shared/schema.js';\n\nasync function checkSampleBooklets() {\n  try {\n    console.log('Checking sample booklets...');\n    const result = await db.select().from(sampleBooklets);\n    console.log('Sample booklets count:', result.length);\n    \n    if (result.length > 0) {\n      console.log('First booklet:', JSON.stringify(result[0], null, 2));\n    } else {\n      console.log('No sample booklets found in database');\n    }\n  } catch (error) {\n    console.error('Error checking sample booklets:', error);\n  }\n  process.exit(0);\n}\n\ncheckSampleBooklets();\n","size_bytes":618},"check-sample-booklets.js":{"content":"import mysql from 'mysql2/promise';\n\nasync function checkSampleBooklets() {\n  try {\n    const connection = await mysql.createConnection({\n      host: 'localhost',\n      user: 'root',\n      password: '',\n      database: 'wmk_crm'\n    });\n\n    // Check if sample_booklets table exists and count records\n    const [countRows] = await connection.execute('SELECT COUNT(*) as total FROM sample_booklets');\n    console.log('Total sample booklets in database:', countRows[0].total);\n\n    // Get all sample booklets\n    const [rows] = await connection.execute('SELECT * FROM sample_booklets');\n    \n    if (rows.length > 0) {\n      console.log('\\nSample booklets:');\n      console.table(rows);\n    } else {\n      console.log('\\nNo sample booklets found - table is empty');\n    }\n\n    await connection.end();\n  } catch (error) {\n    console.error('Error:', error);\n  }\n}\n\ncheckSampleBooklets();\n","size_bytes":885},"convert_mysql_to_postgresql.js":{"content":"import fs from 'fs';\n\nfunction convertMySQLToPostgreSQL(inputFile, outputFile) {\n  console.log('Converting MySQL dump to PostgreSQL format...');\n  \n  let content = fs.readFileSync(inputFile, 'utf8');\n  \n  // Remove MySQL-specific headers and settings\n  content = content.replace(/^-- phpMyAdmin SQL Dump[\\s\\S]*?-- Database:.*?\\n\\n/m, '');\n  content = content.replace(/SET SQL_MODE.*?;\\n/g, '');\n  content = content.replace(/START TRANSACTION;\\n/g, '');\n  content = content.replace(/SET time_zone.*?;\\n/g, '');\n  content = content.replace(/\\/\\*!.*?\\*\\/;\\n/g, '');\n  content = content.replace(/-- --------------------------------------------------------\\n/g, '');\n  \n  // Remove backticks around identifiers\n  content = content.replace(/`([^`]+)`/g, '\"$1\"');\n  \n  // Convert MySQL data types to PostgreSQL\n  content = content.replace(/int\\(\\d+\\)/g, 'INTEGER');\n  content = content.replace(/tinyint\\(1\\)/g, 'BOOLEAN');\n  content = content.replace(/decimal\\((\\d+),(\\d+)\\)/g, 'NUMERIC($1,$2)');\n  content = content.replace(/varchar\\((\\d+)\\)/g, 'VARCHAR($1)');\n  content = content.replace(/text/gi, 'TEXT');\n  content = content.replace(/date/gi, 'DATE');\n  \n  // Convert timestamp fields\n  content = content.replace(/timestamp NOT NULL DEFAULT current_timestamp\\(\\) ON UPDATE current_timestamp\\(\\)/g, 'TIMESTAMP NOT NULL DEFAULT NOW()');\n  content = content.replace(/timestamp NOT NULL DEFAULT current_timestamp\\(\\)/g, 'TIMESTAMP NOT NULL DEFAULT NOW()');\n  content = content.replace(/DEFAULT current_timestamp\\(\\)/g, 'DEFAULT NOW()');\n  \n  // Convert ENUM to TEXT with CHECK constraints\n  const enumMatches = content.match(/enum\\([^)]+\\)/g);\n  if (enumMatches) {\n    enumMatches.forEach(enumDef => {\n      // Extract values from enum\n      const values = enumDef.match(/'([^']+)'/g);\n      if (values) {\n        const checkConstraint = `TEXT CHECK (\"status\" IN (${values.join(', ')}))`;\n        content = content.replace(enumDef, 'TEXT');\n      }\n    });\n  }\n  \n  // Fix enum constraints for specific fields\n  content = content.replace(/\"status\" TEXT DEFAULT 'active'/g, '\"status\" TEXT DEFAULT \\'active\\' CHECK (\"status\" IN (\\'active\\', \\'inactive\\'))');\n  content = content.replace(/\"lead_origin\" TEXT NOT NULL/g, '\"lead_origin\" TEXT NOT NULL CHECK (\"lead_origin\" IN (\\'Facebook\\', \\'Google Text\\', \\'Instagram\\', \\'Trade Show\\', \\'WhatsApp\\', \\'Commercial\\', \\'Referral\\', \\'Website\\'))');\n  content = content.replace(/\"remarks\" TEXT DEFAULT 'New'/g, '\"remarks\" TEXT DEFAULT \\'New\\' CHECK (\"remarks\" IN (\\'Not Interested\\', \\'Not Service Area\\', \\'Not Compatible\\', \\'Sold\\', \\'In Progress\\', \\'New\\'))');\n  content = content.replace(/\"assigned_to\" TEXT NOT NULL/g, '\"assigned_to\" TEXT CHECK (\"assigned_to\" IN (\\'Kim\\', \\'Patrick\\', \\'Lina\\'))');\n  content = content.replace(/\"product_type\" TEXT NOT NULL/g, '\"product_type\" TEXT NOT NULL CHECK (\"product_type\" IN (\\'Demo Kit and Sample Booklet\\', \\'Sample Booklet Only\\', \\'Trial Kit\\', \\'Demo Kit Only\\'))');\n  content = content.replace(/\"status\" TEXT NOT NULL DEFAULT 'Pending'/g, '\"status\" TEXT NOT NULL DEFAULT \\'Pending\\' CHECK (\"status\" IN (\\'Pending\\', \\'Shipped\\', \\'Delivered\\'))');\n  \n  // Remove MySQL engine specifications\n  content = content.replace(/\\s*ENGINE=\\w+[^;]*;/g, ';');\n  content = content.replace(/DEFAULT CHARSET=\\w+[^;]*/g, '');\n  content = content.replace(/COLLATE=\\w+[^;]*/g, '');\n  \n  // Fix boolean values in INSERT statements (MySQL uses 0/1, PostgreSQL uses FALSE/TRUE)\n  content = content.replace(/,\\s*0,/g, ', FALSE,');\n  content = content.replace(/,\\s*1,/g, ', TRUE,');\n  content = content.replace(/,\\s*0\\)/g, ', FALSE)');\n  content = content.replace(/,\\s*1\\)/g, ', TRUE)');\n  \n  // Handle AUTO_INCREMENT - convert to SERIAL for primary keys\n  content = content.replace(/\"id\" INTEGER NOT NULL,/g, '\"id\" SERIAL PRIMARY KEY,');\n  \n  // Remove separate PRIMARY KEY definitions for id fields since we use SERIAL\n  content = content.replace(/,\\s*PRIMARY KEY \\(\"id\"\\)/g, '');\n  \n  // Remove ALTER TABLE statements for AUTO_INCREMENT\n  content = content.replace(/ALTER TABLE.*?AUTO_INCREMENT.*?;\\n/g, '');\n  \n  // Remove UNIQUE KEY and KEY definitions - PostgreSQL uses different syntax\n  content = content.replace(/,\\s*UNIQUE KEY.*?\\n/g, ',\\n');\n  content = content.replace(/,\\s*KEY.*?\\n/g, ',\\n');\n  \n  // Clean up extra commas and newlines\n  content = content.replace(/,(\\s*\\n\\s*)\\)/g, '$1)');\n  content = content.replace(/\\n\\n+/g, '\\n\\n');\n  \n  // Add PostgreSQL header\n  const postgresHeader = `-- PostgreSQL Database Dump\n-- Converted from MySQL/MariaDB format\n-- Database: wrapqrqc_wmk\n-- Generated: ${new Date().toISOString()}\n\nSET TIME ZONE 'UTC';\nSET client_encoding = 'UTF8';\n\n`;\n  \n  content = postgresHeader + content;\n  \n  // Write the converted file\n  fs.writeFileSync(outputFile, content, 'utf8');\n  console.log(`Conversion complete! PostgreSQL dump saved to: ${outputFile}`);\n  console.log(`File size: ${Math.round(fs.statSync(outputFile).size / 1024)} KB`);\n}\n\n// Convert the file\nconst inputFile = 'attached_assets/wrapqrqc_wmk_1756067133137.sql';\nconst outputFile = 'wrapqrqc_wmk_postgresql.sql';\n\ntry {\n  convertMySQLToPostgreSQL(inputFile, outputFile);\n} catch (error) {\n  console.error('Error during conversion:', error.message);\n}","size_bytes":5229},"create-installers.js":{"content":"import { drizzle } from 'drizzle-orm/mysql2';\nimport mysql from 'mysql2/promise';\n\nasync function createInstallersTable() {\n  try {\n    // Create connection\n    const connection = await mysql.createConnection({\n      host: 'localhost',\n      user: 'root',\n      password: '', // XAMPP default has no password\n      database: 'wmk_crm'\n    });\n\n    console.log('Connected to MySQL database');\n\n    // Create the installers table\n    const createTableSQL = `\n      CREATE TABLE installers (\n          id VARCHAR(36) PRIMARY KEY DEFAULT (UUID()),\n          name VARCHAR(100) NOT NULL,\n          phone VARCHAR(20),\n          email VARCHAR(100) UNIQUE,\n          status ENUM('active', 'inactive', 'on_leave', 'terminated') DEFAULT 'active',\n          hire_date DATE,\n          hourly_rate DECIMAL(10, 2),\n          specialty VARCHAR(255),\n          notes TEXT,\n          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n          \n          INDEX idx_installers_status (status),\n          INDEX idx_installers_hire_date (hire_date),\n          INDEX idx_installers_email (email),\n          INDEX idx_installers_name (name)\n      )\n    `;\n\n    try {\n      await connection.execute(createTableSQL);\n      console.log('✅ Installers table created successfully!');\n    } catch (error) {\n      if (error.code === 'ER_TABLE_EXISTS_ERROR') {\n        console.log('ℹ️  Table already exists, skipping creation...');\n      } else {\n        throw error;\n      }\n    }\n\n    // Insert sample data\n    const insertSQL = `\n      INSERT INTO installers (id, name, phone, email, status, hire_date, hourly_rate, specialty, notes) VALUES\n      (UUID(), 'Angel Rodriguez', '(555) 123-4567', 'angel@wmk-kitchen.com', 'active', '2023-01-15', 28.50, 'Cabinet Installation, Countertops', 'Senior installer with 8 years experience. Excellent with custom work.'),\n      (UUID(), 'Brian Thompson', '(555) 234-5678', 'brian@wmk-kitchen.com', 'active', '2023-06-01', 25.00, 'Tile Work, Backsplashes', 'Specialized in tile and backsplash installation. Very detail-oriented.'),\n      (UUID(), 'Luis Martinez', '(555) 345-6789', 'luis@wmk-kitchen.com', 'active', '2024-02-10', 24.00, 'General Installation, Plumbing', 'Newest team member, quick learner with plumbing background.')\n    `;\n\n    try {\n      await connection.execute(insertSQL);\n      console.log('✅ Sample installer data inserted successfully!');\n    } catch (error) {\n      if (error.code === 'ER_DUP_ENTRY') {\n        console.log('ℹ️  Sample data already exists, skipping insertion...');\n      } else {\n        console.error('Error inserting sample data:', error.message);\n      }\n    }\n\n    // Verify the table was created by selecting from it\n    console.log('\\n📋 Verifying installers table...');\n    const [installers] = await connection.execute('SELECT * FROM installers');\n    console.log(`Found ${installers.length} installers in the table:`);\n    \n    if (installers.length > 0) {\n      installers.forEach((installer, index) => {\n        console.log(`\\n${index + 1}. ${installer.name}`);\n        console.log(`   📞 Phone: ${installer.phone}`);\n        console.log(`   📧 Email: ${installer.email}`);\n        console.log(`   📊 Status: ${installer.status}`);\n        console.log(`   💰 Rate: $${installer.hourly_rate}/hour`);\n        console.log(`   🔧 Specialty: ${installer.specialty}`);\n        console.log(`   📅 Hired: ${installer.hire_date}`);\n      });\n    }\n\n    await connection.end();\n    console.log('\\n🎉 Installers table setup completed successfully!');\n\n  } catch (error) {\n    console.error('❌ Error creating installers table:', error);\n    process.exit(1);\n  }\n}\n\ncreateInstallersTable();\n","size_bytes":3753},"import-all-leads.js":{"content":"import fs from 'fs';\nimport { drizzle } from 'drizzle-orm/mysql2';\nimport mysql from 'mysql2/promise';\nimport { randomUUID } from 'crypto';\n\n// Database configuration\nconst connection = mysql.createPool({\n  host: 'localhost',\n  user: 'root',\n  password: '',\n  database: 'wmk_crm',\n  waitForConnections: true,\n  connectionLimit: 10,\n  queueLimit: 0,\n});\n\nconst db = drizzle(connection);\n\n// Import the schema\nimport { leads, sampleBooklets } from './shared/schema.js';\n\n// Mapping functions\nfunction mapLeadOrigin(origin) {\n  const mapping = {\n    'Google Text': 'google',\n    'Website': 'website',\n    'Trade Show': 'trade-show',\n    'Referral': 'referral',\n    'Commercial': 'commercial',\n    'WhatsApp': 'whatsapp',\n    'Facebook': 'facebook',\n    'Instagram': 'instagram'\n  };\n  return mapping[origin] || 'website';\n}\n\nfunction mapStatus(status) {\n  const mapping = {\n    'New': 'new',\n    'In Progress': 'in-progress',\n    'Sold': 'sold',\n    'Not Interested': 'not-interested',\n    'Not Service Area': 'not-service-area',\n    'Not Compatible': 'not-compatible'\n  };\n  return mapping[status] || 'new';\n}\n\nfunction mapAssignedTo(assignedTo) {\n  if (!assignedTo) return null;\n  const mapping = {\n    'Patrick': 'patrick',\n    'Kim': 'kim',\n    'Lina': 'lina'\n  };\n  return mapping[assignedTo] || null;\n}\n\n// Function to convert date format\nfunction convertDate(dateStr) {\n  if (!dateStr || dateStr === 'NULL' || dateStr === null) return null;\n  \n  // Handle various date formats\n  if (typeof dateStr === 'string' && dateStr.includes('-')) {\n    return dateStr; // Already in correct format\n  }\n  \n  return dateStr;\n}\n\n// Function to parse a single row of values\nfunction parseRowValues(valuesString) {\n  const values = [];\n  let current = '';\n  let inQuotes = false;\n  let quoteChar = '';\n  \n  for (let i = 0; i < valuesString.length; i++) {\n    const char = valuesString[i];\n    const prevChar = i > 0 ? valuesString[i - 1] : '';\n    \n    if ((char === '\"' || char === \"'\") && prevChar !== '\\\\') {\n      if (!inQuotes) {\n        inQuotes = true;\n        quoteChar = char;\n      } else if (char === quoteChar) {\n        inQuotes = false;\n        quoteChar = '';\n      }\n    }\n    \n    if (!inQuotes && char === ',') {\n      values.push(current.trim());\n      current = '';\n      continue;\n    }\n    \n    current += char;\n  }\n  \n  if (current.trim()) {\n    values.push(current.trim());\n  }\n  \n  // Clean up values\n  return values.map(val => {\n    val = val.trim();\n    \n    // Handle NULL\n    if (val === 'NULL') return null;\n    \n    // Handle quoted strings\n    if ((val.startsWith(\"'\") && val.endsWith(\"'\")) || \n        (val.startsWith('\"') && val.endsWith('\"'))) {\n      return val.slice(1, -1).replace(/\\\\'/g, \"'\").replace(/\\\\\"/g, '\"').replace(/\\\\\\\\/g, '\\\\');\n    }\n    \n    return val;\n  });\n}\n\n// Function to split INSERT statement into individual rows\nfunction splitIntoRows(valuesString) {\n  const rows = [];\n  let currentRow = '';\n  let parenLevel = 0;\n  let inQuotes = false;\n  let quoteChar = '';\n  \n  for (let i = 0; i < valuesString.length; i++) {\n    const char = valuesString[i];\n    const prevChar = i > 0 ? valuesString[i - 1] : '';\n    \n    if ((char === '\"' || char === \"'\") && prevChar !== '\\\\') {\n      if (!inQuotes) {\n        inQuotes = true;\n        quoteChar = char;\n      } else if (char === quoteChar) {\n        inQuotes = false;\n        quoteChar = '';\n      }\n    }\n    \n    if (!inQuotes) {\n      if (char === '(') parenLevel++;\n      else if (char === ')') parenLevel--;\n      \n      if (char === ')' && parenLevel === 0) {\n        // End of a row\n        rows.push(currentRow.trim());\n        currentRow = '';\n        // Skip the comma and any whitespace\n        while (i + 1 < valuesString.length && (valuesString[i + 1] === ',' || valuesString[i + 1] === ' ' || valuesString[i + 1] === '\\n' || valuesString[i + 1] === '\\r')) {\n          i++;\n        }\n        // Skip the opening paren of the next row\n        if (i + 1 < valuesString.length && valuesString[i + 1] === '(') {\n          i++;\n        }\n        continue;\n      }\n    }\n    \n    currentRow += char;\n  }\n  \n  return rows;\n}\n\nasync function importAllLeads() {\n  try {\n    console.log('Reading SQL file...');\n    const sqlContent = fs.readFileSync('./wrapqrqc_wmk.sql', 'utf8');\n    \n    // Find all INSERT INTO leads statements\n    const insertStatements = [];\n    const insertRegex = /INSERT INTO `leads` \\([^)]+\\) VALUES\\s*([\\s\\S]*?)(?=INSERT INTO|$)/gi;\n    let match;\n    \n    while ((match = insertRegex.exec(sqlContent)) !== null) {\n      insertStatements.push(match[1]);\n    }\n    \n    if (insertStatements.length === 0) {\n      console.log('No INSERT statements found for leads');\n      return;\n    }\n    \n    console.log(`Found ${insertStatements.length} INSERT statements for leads`);\n    \n    // Clear existing data first\n    console.log('Clearing existing leads data...');\n    await connection.execute('DELETE FROM leads');\n    \n    let totalLeadsImported = 0;\n    let totalLeadsSkipped = 0;\n    \n    // Process each INSERT statement\n    for (let insertIndex = 0; insertIndex < insertStatements.length; insertIndex++) {\n      console.log(`Processing INSERT statement ${insertIndex + 1}/${insertStatements.length}...`);\n      \n      let valuesString = insertStatements[insertIndex].trim();\n      \n      // Remove trailing semicolon if present\n      if (valuesString.endsWith(';')) {\n        valuesString = valuesString.slice(0, -1);\n      }\n      \n      // Remove the outer parentheses from the first and last row if needed\n      if (valuesString.startsWith('(')) valuesString = valuesString.substring(1);\n      if (valuesString.endsWith(')')) valuesString = valuesString.slice(0, -1);\n      \n      const rows = splitIntoRows(valuesString);\n      console.log(`  Found ${rows.length} rows in this INSERT statement`);\n      \n      // Import leads from this INSERT statement\n      for (const row of rows) {\n        try {\n          const values = parseRowValues(row);\n          \n          if (values.length < 18) {\n            console.log(`  Skipping row with insufficient columns: ${values.length}`);\n            totalLeadsSkipped++;\n            continue;\n          }\n          \n          // Map the values to our schema\n          const leadData = {\n            id: randomUUID(),\n            name: values[3] || '',\n            phone: values[4] || '',\n            email: values[5] || '',\n            leadOrigin: mapLeadOrigin(values[2]),\n            status: mapStatus(values[7]),\n            assignedTo: mapAssignedTo(values[8]),\n            notes: values[9] || '',\n            additionalNotes: values[10] || '',\n            projectAmount: parseFloat(values[11]) || 0,\n            nextFollowupDate: convertDate(values[6]),\n            createdAt: new Date(),\n            updatedAt: new Date(),\n          };\n          \n          // Insert the lead\n          await db.insert(leads).values(leadData);\n          totalLeadsImported++;\n          \n          if (totalLeadsImported % 50 === 0) {\n            console.log(`  Imported ${totalLeadsImported} leads so far...`);\n          }\n          \n        } catch (error) {\n          console.error(`  Error importing lead row: ${error.message}`);\n          totalLeadsSkipped++;\n        }\n      }\n    }\n    \n    console.log('\\n=== Import Complete ===');\n    console.log(`Total leads imported: ${totalLeadsImported}`);\n    console.log(`Total leads skipped: ${totalLeadsSkipped}`);\n    \n  } catch (error) {\n    console.error('Error during import:', error);\n  } finally {\n    await connection.end();\n  }\n}\n\n// Run the import\nimportAllLeads();\n","size_bytes":7582},"import-full-data.js":{"content":"import fs from 'fs';\nimport { drizzle } from 'drizzle-orm/mysql2';\nimport mysql from 'mysql2/promise';\nimport { randomUUID } from 'crypto';\n\n// Database configuration\nconst connection = mysql.createPool({\n  host: 'localhost',\n  user: 'root',\n  password: '',\n  database: 'wmk_crm',\n  waitForConnections: true,\n  connectionLimit: 10,\n  queueLimit: 0,\n});\n\nconst db = drizzle(connection);\n\n// Import the schema\nimport { leads, sampleBooklets } from './shared/schema.js';\n\n// Helper function to parse SQL INSERT statements\nfunction parseInsertStatement(insertStatement) {\n  // Extract the VALUES part\n  const valuesMatch = insertStatement.match(/VALUES\\s+(.*);?\\s*$/s);\n  if (!valuesMatch) return [];\n  \n  const valuesString = valuesMatch[1];\n  const rows = [];\n  \n  // Split by \"),(\" to get individual rows, but handle the first and last rows specially\n  let currentRow = '';\n  let parenCount = 0;\n  let inString = false;\n  let stringChar = null;\n  \n  for (let i = 0; i < valuesString.length; i++) {\n    const char = valuesString[i];\n    const prevChar = i > 0 ? valuesString[i - 1] : '';\n    \n    if ((char === '\"' || char === \"'\") && prevChar !== '\\\\') {\n      if (!inString) {\n        inString = true;\n        stringChar = char;\n      } else if (char === stringChar) {\n        inString = false;\n        stringChar = null;\n      }\n    }\n    \n    if (!inString) {\n      if (char === '(') {\n        parenCount++;\n      } else if (char === ')') {\n        parenCount--;\n        if (parenCount === 0) {\n          currentRow += char;\n          rows.push(currentRow.trim());\n          currentRow = '';\n          // Skip the comma and optional whitespace after the closing paren\n          if (i + 1 < valuesString.length && valuesString[i + 1] === ',') {\n            i++;\n          }\n          while (i + 1 < valuesString.length && /\\s/.test(valuesString[i + 1])) {\n            i++;\n          }\n          continue;\n        }\n      }\n    }\n    \n    currentRow += char;\n  }\n  \n  return rows;\n}\n\n// Helper function to parse a single row of values\nfunction parseRowValues(rowString) {\n  // Remove the outer parentheses\n  const cleanRow = rowString.replace(/^\\(|\\)$/g, '');\n  const values = [];\n  let current = '';\n  let inString = false;\n  let stringChar = null;\n  let parenCount = 0;\n  \n  for (let i = 0; i < cleanRow.length; i++) {\n    const char = cleanRow[i];\n    const prevChar = i > 0 ? cleanRow[i - 1] : '';\n    \n    if ((char === '\"' || char === \"'\") && prevChar !== '\\\\') {\n      if (!inString) {\n        inString = true;\n        stringChar = char;\n      } else if (char === stringChar) {\n        inString = false;\n        stringChar = null;\n      }\n    }\n    \n    if (!inString) {\n      if (char === '(') {\n        parenCount++;\n      } else if (char === ')') {\n        parenCount--;\n      } else if (char === ',' && parenCount === 0) {\n        values.push(current.trim());\n        current = '';\n        continue;\n      }\n    }\n    \n    current += char;\n  }\n  \n  if (current.trim()) {\n    values.push(current.trim());\n  }\n  \n  return values.map(val => {\n    val = val.trim();\n    \n    // Handle NULL\n    if (val === 'NULL') return null;\n    \n    // Handle quoted strings\n    if ((val.startsWith(\"'\") && val.endsWith(\"'\")) || \n        (val.startsWith('\"') && val.endsWith('\"'))) {\n      return val.slice(1, -1).replace(/\\\\'/g, \"'\").replace(/\\\\\"/g, '\"').replace(/\\\\\\\\/g, '\\\\');\n    }\n    \n    // Handle numbers\n    if (/^\\d+(\\.\\d+)?$/.test(val)) {\n      return parseFloat(val);\n    }\n    \n    return val;\n  });\n}\n\n// Mapping functions\nfunction mapLeadOrigin(origin) {\n  const mapping = {\n    'Google Text': 'google',\n    'Website': 'website',\n    'Trade Show': 'trade-show',\n    'Referral': 'referral',\n    'Commercial': 'commercial',\n    'WhatsApp': 'whatsapp',\n    'Facebook': 'facebook',\n    'Instagram': 'instagram'\n  };\n  return mapping[origin] || 'website';\n}\n\nfunction mapStatus(status) {\n  const mapping = {\n    'New': 'new',\n    'In Progress': 'in-progress',\n    'Sold': 'sold',\n    'Not Interested': 'not-interested',\n    'Not Service Area': 'not-service-area',\n    'Not Compatible': 'not-compatible'\n  };\n  return mapping[status] || 'new';\n}\n\nfunction mapAssignedTo(remarks) {\n  if (!remarks) return null;\n  const mapping = {\n    'Patrick': 'patrick',\n    'Kim': 'kim',\n    'Lina': 'lina'\n  };\n  return mapping[remarks] || null;\n}\n\n// Function to convert date format\nfunction convertDate(dateStr) {\n  if (!dateStr || dateStr === 'NULL') return null;\n  \n  // Handle various date formats\n  if (typeof dateStr === 'string' && dateStr.includes('-')) {\n    return dateStr; // Already in correct format\n  }\n  \n  return dateStr;\n}\n\nasync function importFullData() {\n  try {\n    console.log('Reading SQL file...');\n    const sqlContent = fs.readFileSync('./wrapqrqc_wmk.sql', 'utf8');\n    \n    // Extract leads data\n    const leadsMatch = sqlContent.match(/INSERT INTO `leads`[^;]+;/s);\n    if (!leadsMatch) {\n      console.log('No leads data found in SQL file');\n      return;\n    }\n    \n    console.log('Parsing leads data...');\n    const leadsRows = parseInsertStatement(leadsMatch[0]);\n    console.log(`Found ${leadsRows.length} leads to import`);\n    \n    // Extract sample booklets data\n    const bookletMatch = sqlContent.match(/INSERT INTO `sample_booklets`[^;]+;/s);\n    let bookletRows = [];\n    if (bookletMatch) {\n      bookletRows = parseInsertStatement(bookletMatch[0]);\n      console.log(`Found ${bookletRows.length} sample booklets to import`);\n    }\n    \n    // Clear existing data first\n    console.log('Clearing existing data...');\n    await connection.execute('DELETE FROM leads');\n    await connection.execute('DELETE FROM sample_booklets');\n    console.log('Existing data cleared.');\n    \n    // Import leads\n    console.log('Importing leads...');\n    let leadsImported = 0;\n    let leadsSkipped = 0;\n    \n    for (const row of leadsRows) {\n      try {\n        const values = parseRowValues(row);\n        \n        if (values.length < 14) {\n          console.log(`Skipping row with insufficient data: ${values.length} columns`);\n          leadsSkipped++;\n          continue;\n        }\n        \n        // Map the values to our schema\n        // Original columns: id, date_added, lead_origin, customer_name, phone, email, follow_up_date, status, remarks, notes, kim_notes, price, created_at, updated_at, is_installed, sample_booklet_sent, installation_date, installation_by\n        const leadData = {\n          id: randomUUID(),\n          name: values[3] || 'Unknown',\n          phone: values[4] || '',\n          email: values[5] || '',\n          lead_origin: mapLeadOrigin(values[2]),\n          date_created: convertDate(values[1]) || new Date().toISOString().slice(0, 10),\n          next_followup_date: convertDate(values[6]),\n          remarks: mapStatus(values[7]),\n          assigned_to: mapAssignedTo(values[8]),\n          project_amount: parseFloat(values[11]) || 0,\n          notes: values[9] || '',\n          additional_notes: values[10] || '',\n          deposit_paid: values[14] === 1 || values[14] === '1',\n          balance_paid: false, // Default to false\n          installation_date: convertDate(values[16]),\n          assigned_installer: values[17] || null\n        };\n        \n        await db.insert(leads).values(leadData);\n        leadsImported++;\n        \n        if (leadsImported % 50 === 0) {\n          console.log(`Imported ${leadsImported} leads...`);\n        }\n      } catch (error) {\n        console.error(`Error importing lead: ${error.message}`);\n        console.error(`Row data: ${row.substring(0, 100)}...`);\n        leadsSkipped++;\n      }\n    }\n    \n    // Import sample booklets\n    console.log('Importing sample booklets...');\n    let bookletsImported = 0;\n    let bookletsSkipped = 0;\n    \n    for (const row of bookletRows) {\n      try {\n        const values = parseRowValues(row);\n        \n        if (values.length < 13) {\n          console.log(`Skipping booklet row with insufficient data: ${values.length} columns`);\n          bookletsSkipped++;\n          continue;\n        }\n        \n        // Map the values to our schema\n        // Original columns: id, order_number, customer_name, address, email, phone, product_type, tracking_number, status, date_ordered, date_shipped, notes, created_at, updated_at\n        const bookletData = {\n          id: randomUUID(),\n          order_number: values[1] || '',\n          customer_name: values[2] || '',\n          address: values[3] || '',\n          email: values[4] || '',\n          phone: values[5] || '',\n          product_type: values[6] || 'sample_booklet_only',\n          tracking_number: values[7] || null,\n          status: (values[8] || 'pending').toLowerCase(),\n          date_ordered: convertDate(values[9]) || new Date().toISOString().slice(0, 10),\n          date_shipped: convertDate(values[10]),\n          notes: values[11] || ''\n        };\n        \n        await db.insert(sampleBooklets).values(bookletData);\n        bookletsImported++;\n      } catch (error) {\n        console.error(`Error importing sample booklet: ${error.message}`);\n        console.error(`Row data: ${row.substring(0, 100)}...`);\n        bookletsSkipped++;\n      }\n    }\n    \n    console.log('\\n=== IMPORT COMPLETE ===');\n    console.log(`Leads imported: ${leadsImported}`);\n    console.log(`Leads skipped: ${leadsSkipped}`);\n    console.log(`Sample booklets imported: ${bookletsImported}`);\n    console.log(`Sample booklets skipped: ${bookletsSkipped}`);\n    console.log(`Total records imported: ${leadsImported + bookletsImported}`);\n    \n  } catch (error) {\n    console.error('Error during import:', error);\n    throw error;\n  } finally {\n    await connection.end();\n  }\n}\n\n// Run the import\nimportFullData()\n  .then(() => {\n    console.log('Full data import completed successfully!');\n    process.exit(0);\n  })\n  .catch((error) => {\n    console.error('Import failed:', error);\n    process.exit(1);\n  });\n","size_bytes":9896},"import-leads-final.js":{"content":"import fs from 'fs';\nimport { drizzle } from 'drizzle-orm/mysql2';\nimport mysql from 'mysql2/promise';\nimport { randomUUID } from 'crypto';\n\n// Database configuration\nconst connection = mysql.createPool({\n  host: 'localhost',\n  user: 'root',\n  password: '',\n  database: 'wmk_crm',\n  waitForConnections: true,\n  connectionLimit: 10,\n  queueLimit: 0,\n});\n\nconst db = drizzle(connection);\n\n// Import the schema\nimport { leads, sampleBooklets } from './shared/schema.js';\n\n// Mapping functions\nfunction mapLeadOrigin(origin) {\n  const mapping = {\n    'Google Text': 'google',\n    'Website': 'website',\n    'Trade Show': 'trade-show',\n    'Referral': 'referral',\n    'Commercial': 'commercial',\n    'WhatsApp': 'whatsapp',\n    'Facebook': 'facebook',\n    'Instagram': 'instagram'\n  };\n  return mapping[origin] || 'website';\n}\n\nfunction mapStatus(status) {\n  const mapping = {\n    'New': 'new',\n    'In Progress': 'in-progress',\n    'Sold': 'sold',\n    'Not Interested': 'not-interested',\n    'Not Service Area': 'not-service-area',\n    'Not Compatible': 'not-compatible'\n  };\n  return mapping[status] || 'new';\n}\n\nfunction mapAssignedTo(assignedTo) {\n  if (!assignedTo) return null;\n  const mapping = {\n    'Patrick': 'patrick',\n    'Kim': 'kim',\n    'Lina': 'lina'\n  };\n  return mapping[assignedTo] || null;\n}\n\nfunction mapAssignedInstaller(installer) {\n  if (!installer) return null;\n  const mapping = {\n    'Angel': 'angel',\n    'Brian': 'brian', \n    'Luis': 'luis'\n  };\n  return mapping[installer] || null;\n}\n\n// Function to convert date format\nfunction convertDate(dateStr) {\n  if (!dateStr || dateStr === 'NULL' || dateStr === null) return null;\n  \n  // Handle string dates\n  if (typeof dateStr === 'string') {\n    // Remove quotes if present\n    dateStr = dateStr.replace(/^['\"]|['\"]$/g, '');\n    \n    // Try to parse the date\n    try {\n      const parsed = new Date(dateStr);\n      if (!isNaN(parsed.getTime())) {\n        return parsed; // Return Date object\n      }\n    } catch (e) {\n      // If parsing fails, return null\n      return null;\n    }\n  }\n  \n  return null;\n}\n\nasync function importAllLeads() {\n  try {\n    console.log('Reading SQL file...');\n    const sqlContent = fs.readFileSync('./wrapqrqc_wmk.sql', 'utf8');\n    \n    // Find all complete INSERT INTO leads statements (including the semicolon)\n    const insertMatches = sqlContent.match(/INSERT INTO `leads` \\([^)]+\\) VALUES[\\s\\S]*?;/gi);\n    \n    if (!insertMatches || insertMatches.length === 0) {\n      console.log('No INSERT statements found for leads');\n      return;\n    }\n    \n    console.log(`Found ${insertMatches.length} complete INSERT statements for leads`);\n    \n    // Clear existing data first\n    console.log('Clearing existing leads data...');\n    await connection.execute('DELETE FROM leads');\n    \n    let totalLeadsImported = 0;\n    let totalLeadsSkipped = 0;\n    \n    // Process each INSERT statement\n    for (let insertIndex = 0; insertIndex < insertMatches.length; insertIndex++) {\n      console.log(`\\nProcessing INSERT statement ${insertIndex + 1}/${insertMatches.length}...`);\n      \n      const insertStatement = insertMatches[insertIndex];\n      \n      // Extract the VALUES part\n      const valuesMatch = insertStatement.match(/VALUES\\s+([\\s\\S]*?);/i);\n      if (!valuesMatch) {\n        console.log('  Could not extract VALUES section');\n        continue;\n      }\n      \n      let valuesString = valuesMatch[1].trim();\n      \n      // Parse the values - split by rows\n      const rows = [];\n      let currentRow = '';\n      let parenLevel = 0;\n      let inQuotes = false;\n      let quoteChar = '';\n      \n      for (let i = 0; i < valuesString.length; i++) {\n        const char = valuesString[i];\n        const prevChar = i > 0 ? valuesString[i - 1] : '';\n        \n        if ((char === '\"' || char === \"'\") && prevChar !== '\\\\') {\n          if (!inQuotes) {\n            inQuotes = true;\n            quoteChar = char;\n          } else if (char === quoteChar) {\n            inQuotes = false;\n            quoteChar = '';\n          }\n        }\n        \n        if (!inQuotes) {\n          if (char === '(') {\n            parenLevel++;\n            if (parenLevel === 1) {\n              currentRow = ''; // Start new row\n              continue;\n            }\n          } else if (char === ')') {\n            parenLevel--;\n            if (parenLevel === 0) {\n              // End of current row\n              if (currentRow.trim()) {\n                rows.push(currentRow.trim());\n              }\n              currentRow = '';\n              continue;\n            }\n          }\n        }\n        \n        if (parenLevel > 0) {\n          currentRow += char;\n        }\n      }\n      \n      console.log(`  Found ${rows.length} rows in this INSERT statement`);\n      \n      // Import leads from this INSERT statement\n      for (let rowIndex = 0; rowIndex < rows.length; rowIndex++) {\n        try {\n          const row = rows[rowIndex];\n          \n          // Parse individual values from the row\n          const values = [];\n          let current = '';\n          let inQuotes = false;\n          let quoteChar = '';\n          \n          for (let i = 0; i < row.length; i++) {\n            const char = row[i];\n            const prevChar = i > 0 ? row[i - 1] : '';\n            \n            if ((char === '\"' || char === \"'\") && prevChar !== '\\\\') {\n              if (!inQuotes) {\n                inQuotes = true;\n                quoteChar = char;\n              } else if (char === quoteChar) {\n                inQuotes = false;\n                quoteChar = '';\n              }\n            }\n            \n            if (!inQuotes && char === ',') {\n              values.push(current.trim());\n              current = '';\n              continue;\n            }\n            \n            current += char;\n          }\n          \n          if (current.trim()) {\n            values.push(current.trim());\n          }\n          \n          // Clean up values\n          const cleanedValues = values.map(val => {\n            val = val.trim();\n            \n            // Handle NULL\n            if (val === 'NULL') return null;\n            \n            // Handle quoted strings\n            if ((val.startsWith(\"'\") && val.endsWith(\"'\")) || \n                (val.startsWith('\"') && val.endsWith('\"'))) {\n              return val.slice(1, -1).replace(/\\\\'/g, \"'\").replace(/\\\\\"/g, '\"').replace(/\\\\\\\\/g, '\\\\');\n            }\n            \n            return val;\n          });\n          \n          if (cleanedValues.length < 18) {\n            console.log(`  Row ${rowIndex + 1}: Skipping - insufficient columns (${cleanedValues.length})`);\n            totalLeadsSkipped++;\n            continue;\n          }\n          \n          // Map the values to our schema\n          const leadData = {\n            id: randomUUID(),\n            name: cleanedValues[3] || '',\n            phone: cleanedValues[4] || '',\n            email: cleanedValues[5] || '',\n            lead_origin: mapLeadOrigin(cleanedValues[2]),\n            remarks: mapStatus(cleanedValues[7]), // status goes into remarks field\n            assigned_to: mapAssignedTo(cleanedValues[8]),\n            notes: cleanedValues[9] || '',\n            additional_notes: cleanedValues[10] || '',\n            project_amount: parseFloat(cleanedValues[11]) || 0,\n            next_followup_date: convertDate(cleanedValues[6]),\n            date_created: convertDate(cleanedValues[1]) || new Date(), // Use the date from SQL or current date\n            deposit_paid: cleanedValues[14] === '1' || cleanedValues[14] === 1,\n            balance_paid: cleanedValues[15] === '1' || cleanedValues[15] === 1,\n            installation_date: convertDate(cleanedValues[16]),\n            assigned_installer: mapAssignedInstaller(cleanedValues[17]),\n          };\n          \n          // Insert the lead\n          await db.insert(leads).values(leadData);\n          totalLeadsImported++;\n          \n          if (totalLeadsImported % 25 === 0) {\n            console.log(`  Imported ${totalLeadsImported} leads so far...`);\n          }\n          \n        } catch (error) {\n          console.error(`  Error importing row ${rowIndex + 1}: ${error.message}`);\n          totalLeadsSkipped++;\n        }\n      }\n    }\n    \n    console.log('\\n=== Import Complete ===');\n    console.log(`Total leads imported: ${totalLeadsImported}`);\n    console.log(`Total leads skipped: ${totalLeadsSkipped}`);\n    \n  } catch (error) {\n    console.error('Error during import:', error);\n  } finally {\n    await connection.end();\n  }\n}\n\n// Run the import\nimportAllLeads();\n","size_bytes":8543},"import-leads-simple.js":{"content":"import fs from 'fs';\nimport { drizzle } from 'drizzle-orm/mysql2';\nimport mysql from 'mysql2/promise';\nimport { randomUUID } from 'crypto';\n\n// Database configuration\nconst connection = mysql.createPool({\n  host: 'localhost',\n  user: 'root',\n  password: '',\n  database: 'wmk_crm',\n  waitForConnections: true,\n  connectionLimit: 10,\n  queueLimit: 0,\n});\n\nconst db = drizzle(connection);\n\n// Import the schema\nimport { leads, sampleBooklets } from './shared/schema.js';\n\n// Mapping functions\nfunction mapLeadOrigin(origin) {\n  const mapping = {\n    'Google Text': 'google',\n    'Website': 'website',\n    'Trade Show': 'trade-show',\n    'Referral': 'referral',\n    'Commercial': 'commercial',\n    'WhatsApp': 'whatsapp',\n    'Facebook': 'facebook',\n    'Instagram': 'instagram'\n  };\n  return mapping[origin] || 'website';\n}\n\nfunction mapStatus(status) {\n  const mapping = {\n    'New': 'new',\n    'In Progress': 'in-progress',\n    'Sold': 'sold',\n    'Not Interested': 'not-interested',\n    'Not Service Area': 'not-service-area',\n    'Not Compatible': 'not-compatible'\n  };\n  return mapping[status] || 'new';\n}\n\nfunction mapAssignedTo(remarks) {\n  if (!remarks) return null;\n  const mapping = {\n    'Patrick': 'patrick',\n    'Kim': 'kim',\n    'Lina': 'lina'\n  };\n  return mapping[remarks] || null;\n}\n\n// Function to convert date format\nfunction convertDate(dateStr) {\n  if (!dateStr || dateStr === 'NULL' || dateStr === null) return null;\n  \n  // Handle various date formats\n  if (typeof dateStr === 'string' && dateStr.includes('-')) {\n    return dateStr; // Already in correct format\n  }\n  \n  return dateStr;\n}\n\nasync function importFullData() {\n  try {\n    console.log('Reading SQL file...');\n    const sqlContent = fs.readFileSync('./wrapqrqc_wmk.sql', 'utf8');\n    \n    // Extract leads data\n    const leadsMatch = sqlContent.match(/INSERT INTO `leads`[^;]+;/s);\n    if (!leadsMatch) {\n      console.log('No leads data found in SQL file');\n      return;\n    }\n    \n    console.log('Parsing leads data...');\n    const insertStatement = leadsMatch[0];\n    \n    // Extract the VALUES part and split by '),(' to get individual rows\n    const valuesMatch = insertStatement.match(/VALUES\\s+(.+);/s);\n    if (!valuesMatch) {\n      console.log('Could not parse VALUES from leads INSERT statement');\n      return;\n    }\n    \n    let valuesString = valuesMatch[1].trim();\n    \n    // Remove the outer parentheses from the first and last row\n    if (valuesString.startsWith('(')) valuesString = valuesString.substring(1);\n    if (valuesString.endsWith(')')) valuesString = valuesString.slice(0, -1);\n    \n    // Split rows by '),(' but we need to be careful about commas inside quoted strings\n    const rows = [];\n    let currentRow = '';\n    let parenLevel = 0;\n    let inQuotes = false;\n    let quoteChar = '';\n    \n    for (let i = 0; i < valuesString.length; i++) {\n      const char = valuesString[i];\n      const prevChar = i > 0 ? valuesString[i - 1] : '';\n      \n      if ((char === '\"' || char === \"'\") && prevChar !== '\\\\') {\n        if (!inQuotes) {\n          inQuotes = true;\n          quoteChar = char;\n        } else if (char === quoteChar) {\n          inQuotes = false;\n          quoteChar = '';\n        }\n      }\n      \n      if (!inQuotes) {\n        if (char === '(') parenLevel++;\n        else if (char === ')') parenLevel--;\n        \n        if (char === ')' && parenLevel === 0) {\n          // End of a row\n          rows.push(currentRow.trim());\n          currentRow = '';\n          // Skip the comma and any whitespace\n          while (i + 1 < valuesString.length && (valuesString[i + 1] === ',' || valuesString[i + 1] === ' ' || valuesString[i + 1] === '\\n')) {\n            i++;\n          }\n          // Skip the opening paren of the next row\n          if (i + 1 < valuesString.length && valuesString[i + 1] === '(') {\n            i++;\n          }\n          continue;\n        }\n      }\n      \n      currentRow += char;\n    }\n    \n    console.log(`Found ${rows.length} leads to import`);\n    \n    // Clear existing data first\n    console.log('Clearing existing leads data...');\n    await connection.execute('DELETE FROM leads');\n    \n    // Import leads\n    console.log('Importing leads...');\n    let leadsImported = 0;\n    let leadsSkipped = 0;\n    \n    for (const row of rows) {\n      try {\n        // Parse individual values from the row\n        const values = [];\n        let current = '';\n        let inQuotes = false;\n        let quoteChar = '';\n        \n        for (let i = 0; i < row.length; i++) {\n          const char = row[i];\n          const prevChar = i > 0 ? row[i - 1] : '';\n          \n          if ((char === '\"' || char === \"'\") && prevChar !== '\\\\') {\n            if (!inQuotes) {\n              inQuotes = true;\n              quoteChar = char;\n            } else if (char === quoteChar) {\n              inQuotes = false;\n              quoteChar = '';\n            }\n          }\n          \n          if (!inQuotes && char === ',') {\n            values.push(current.trim());\n            current = '';\n            continue;\n          }\n          \n          current += char;\n        }\n        \n        if (current.trim()) {\n          values.push(current.trim());\n        }\n        \n        // Clean up values\n        const cleanedValues = values.map(val => {\n          val = val.trim();\n          \n          // Handle NULL\n          if (val === 'NULL') return null;\n          \n          // Handle quoted strings\n          if ((val.startsWith(\"'\") && val.endsWith(\"'\")) || \n              (val.startsWith('\"') && val.endsWith('\"'))) {\n            return val.slice(1, -1).replace(/\\\\'/g, \"'\").replace(/\\\\\"/g, '\"').replace(/\\\\\\\\/g, '\\\\');\n          }\n          \n          // Handle numbers\n          if (/^\\d+(\\.\\d+)?$/.test(val)) {\n            return parseFloat(val);\n          }\n          \n          return val;\n        });\n        \n        if (cleanedValues.length < 14) {\n          console.log(`Skipping row with insufficient data: ${cleanedValues.length} columns`);\n          leadsSkipped++;\n          continue;\n        }\n        \n        // Map the values to our schema\n        // Original columns: id, date_added, lead_origin, customer_name, phone, email, follow_up_date, status, remarks, notes, kim_notes, price, created_at, updated_at, is_installed, sample_booklet_sent, installation_date, installation_by\n        const leadData = {\n          id: randomUUID(),\n          name: cleanedValues[3] || 'Unknown',\n          phone: cleanedValues[4] || '',\n          email: cleanedValues[5] || '',\n          lead_origin: mapLeadOrigin(cleanedValues[2]),\n          date_created: convertDate(cleanedValues[1]) || '2025-01-01',\n          next_followup_date: convertDate(cleanedValues[6]),\n          remarks: mapStatus(cleanedValues[7]),\n          assigned_to: mapAssignedTo(cleanedValues[8]),\n          project_amount: parseFloat(cleanedValues[11]) || 0,\n          notes: cleanedValues[9] || '',\n          additional_notes: cleanedValues[10] || '',\n          deposit_paid: cleanedValues[14] === 1 || cleanedValues[14] === '1',\n          balance_paid: false, // Default to false\n          installation_date: convertDate(cleanedValues[16]),\n          assigned_installer: cleanedValues[17] || null\n        };\n        \n        await db.insert(leads).values(leadData);\n        leadsImported++;\n        \n        if (leadsImported % 50 === 0) {\n          console.log(`Imported ${leadsImported} leads...`);\n        }\n      } catch (error) {\n        console.error(`Error importing lead: ${error.message}`);\n        console.error(`Row data: ${row.substring(0, 100)}...`);\n        leadsSkipped++;\n      }\n    }\n    \n    console.log('\\n=== IMPORT COMPLETE ===');\n    console.log(`Leads imported: ${leadsImported}`);\n    console.log(`Leads skipped: ${leadsSkipped}`);\n    console.log(`Total records imported: ${leadsImported}`);\n    \n  } catch (error) {\n    console.error('Error during import:', error);\n    throw error;\n  } finally {\n    await connection.end();\n  }\n}\n\n// Run the import\nimportFullData()\n  .then(() => {\n    console.log('Full data import completed successfully!');\n    process.exit(0);\n  })\n  .catch((error) => {\n    console.error('Import failed:', error);\n    process.exit(1);\n  });\n","size_bytes":8208},"import-sample-booklets.js":{"content":"import fs from 'fs';\nimport { drizzle } from 'drizzle-orm/mysql2';\nimport mysql from 'mysql2/promise';\nimport { randomUUID } from 'crypto';\n\n// Database configuration\nconst connection = mysql.createPool({\n  host: 'localhost',\n  user: 'root',\n  password: '',\n  database: 'wmk_crm',\n  waitForConnections: true,\n  connectionLimit: 10,\n  queueLimit: 0,\n});\n\nconst db = drizzle(connection);\n\n// Import the schema\nimport { sampleBooklets } from './shared/schema.js';\n\n// Mapping functions\nfunction mapProductType(productType) {\n  const mapping = {\n    'Sample Booklet Only': 'sample_booklet_only',\n    'Demo Kit and Sample Booklet': 'demo_kit_and_sample_booklet',\n    'Trial Kit': 'trial_kit',\n    'Demo Kit Only': 'demo_kit_only'\n  };\n  return mapping[productType] || 'sample_booklet_only';\n}\n\nfunction mapStatus(status) {\n  const mapping = {\n    'Pending': 'pending',\n    'Shipped': 'shipped',\n    'Delivered': 'delivered'\n  };\n  return mapping[status] || 'pending';\n}\n\n// Function to convert date format\nfunction convertDate(dateStr) {\n  if (!dateStr || dateStr === 'NULL' || dateStr === null) return null;\n  \n  // Handle string dates\n  if (typeof dateStr === 'string') {\n    // Remove quotes if present\n    dateStr = dateStr.replace(/^['\"]|['\"]$/g, '');\n    \n    // Try to parse the date\n    try {\n      const parsed = new Date(dateStr);\n      if (!isNaN(parsed.getTime())) {\n        return parsed; // Return Date object\n      }\n    } catch (e) {\n      // If parsing fails, return null\n      return null;\n    }\n  }\n  \n  return null;\n}\n\n// Function to parse a single row of values\nfunction parseRowValues(valuesString) {\n  const values = [];\n  let current = '';\n  let inQuotes = false;\n  let quoteChar = '';\n  \n  for (let i = 0; i < valuesString.length; i++) {\n    const char = valuesString[i];\n    const prevChar = i > 0 ? valuesString[i - 1] : '';\n    \n    if ((char === '\"' || char === \"'\") && prevChar !== '\\\\') {\n      if (!inQuotes) {\n        inQuotes = true;\n        quoteChar = char;\n      } else if (char === quoteChar) {\n        inQuotes = false;\n        quoteChar = '';\n      }\n    }\n    \n    if (!inQuotes && char === ',') {\n      values.push(current.trim());\n      current = '';\n      continue;\n    }\n    \n    current += char;\n  }\n  \n  if (current.trim()) {\n    values.push(current.trim());\n  }\n  \n  // Clean up values\n  return values.map(val => {\n    val = val.trim();\n    \n    // Handle NULL\n    if (val === 'NULL') return null;\n    \n    // Handle quoted strings\n    if ((val.startsWith(\"'\") && val.endsWith(\"'\")) || \n        (val.startsWith('\"') && val.endsWith('\"'))) {\n      return val.slice(1, -1).replace(/\\\\'/g, \"'\").replace(/\\\\\"/g, '\"').replace(/\\\\\\\\/g, '\\\\');\n    }\n    \n    return val;\n  });\n}\n\n// Function to split INSERT statement into individual rows\nfunction splitIntoRows(valuesString) {\n  const rows = [];\n  let currentRow = '';\n  let parenLevel = 0;\n  let inQuotes = false;\n  let quoteChar = '';\n  \n  for (let i = 0; i < valuesString.length; i++) {\n    const char = valuesString[i];\n    const prevChar = i > 0 ? valuesString[i - 1] : '';\n    \n    if ((char === '\"' || char === \"'\") && prevChar !== '\\\\') {\n      if (!inQuotes) {\n        inQuotes = true;\n        quoteChar = char;\n      } else if (char === quoteChar) {\n        inQuotes = false;\n        quoteChar = '';\n      }\n    }\n    \n    if (!inQuotes) {\n      if (char === '(') {\n        parenLevel++;\n        if (parenLevel === 1) {\n          currentRow = ''; // Start new row\n          continue;\n        }\n      } else if (char === ')') {\n        parenLevel--;\n        if (parenLevel === 0) {\n          // End of current row\n          if (currentRow.trim()) {\n            rows.push(currentRow.trim());\n          }\n          currentRow = '';\n          continue;\n        }\n      }\n    }\n    \n    if (parenLevel > 0) {\n      currentRow += char;\n    }\n  }\n  \n  return rows;\n}\n\nasync function importSampleBooklets() {\n  try {\n    console.log('Reading SQL file...');\n    const sqlContent = fs.readFileSync('./wrapqrqc_wmk.sql', 'utf8');\n    \n    // Find the sample booklets INSERT statement\n    const insertMatch = sqlContent.match(/INSERT INTO `sample_booklets`[\\s\\S]*?;/i);\n    \n    if (!insertMatch) {\n      console.log('No INSERT statement found for sample_booklets');\n      return;\n    }\n    \n    console.log('Found sample booklets INSERT statement');\n    \n    const insertStatement = insertMatch[0];\n    \n    // Extract the VALUES part\n    const valuesMatch = insertStatement.match(/VALUES\\s+([\\s\\S]*?);/i);\n    if (!valuesMatch) {\n      console.log('Could not extract VALUES section');\n      return;\n    }\n    \n    let valuesString = valuesMatch[1].trim();\n    const rows = splitIntoRows(valuesString);\n    \n    console.log(`Found ${rows.length} sample booklets to import`);\n    \n    // Clear existing data first\n    console.log('Clearing existing sample booklets data...');\n    await connection.execute('DELETE FROM sample_booklets');\n    \n    let imported = 0;\n    let skipped = 0;\n    \n    // Import sample booklets\n    for (let rowIndex = 0; rowIndex < rows.length; rowIndex++) {\n      try {\n        const row = rows[rowIndex];\n        const values = parseRowValues(row);\n        \n        if (values.length < 12) {\n          console.log(`Row ${rowIndex + 1}: Skipping - insufficient columns (${values.length})`);\n          skipped++;\n          continue;\n        }\n        \n        // Map the values to our schema\n        const bookletData = {\n          id: randomUUID(),\n          order_number: values[1] || '',\n          customer_name: values[2] || '',\n          address: values[3] || '',\n          email: values[4] || '',\n          phone: values[5] || '',\n          product_type: mapProductType(values[6]),\n          tracking_number: values[7],\n          status: mapStatus(values[8]),\n          date_ordered: convertDate(values[9]) || new Date(),\n          date_shipped: convertDate(values[10]),\n          notes: values[11] || '',\n          created_at: convertDate(values[12]) || new Date(),\n          updated_at: convertDate(values[13]) || new Date(),\n        };\n        \n        // Insert the sample booklet\n        await db.insert(sampleBooklets).values(bookletData);\n        imported++;\n        \n        console.log(`Imported sample booklet ${imported}: ${bookletData.customer_name} (${bookletData.order_number})`);\n        \n      } catch (error) {\n        console.error(`Error importing row ${rowIndex + 1}: ${error.message}`);\n        skipped++;\n      }\n    }\n    \n    console.log('\\n=== Sample Booklets Import Complete ===');\n    console.log(`Total imported: ${imported}`);\n    console.log(`Total skipped: ${skipped}`);\n    \n  } catch (error) {\n    console.error('Error during import:', error);\n  } finally {\n    await connection.end();\n  }\n}\n\n// Run the import\nimportSampleBooklets();\n","size_bytes":6785},"verify-import.js":{"content":"import mysql from 'mysql2/promise';\n\nasync function verifyImport() {\n  try {\n    const connection = await mysql.createConnection({\n      host: 'localhost',\n      user: 'root',\n      password: '',\n      database: 'wmk_crm'\n    });\n\n    // Count total leads\n    const [countRows] = await connection.execute('SELECT COUNT(*) as total FROM leads');\n    console.log('Total leads in database:', countRows[0].total);\n\n    // Get sample data\n    const [sampleRows] = await connection.execute(`\n      SELECT name, phone, email, lead_origin, remarks, assigned_to \n      FROM leads \n      ORDER BY date_created DESC\n      LIMIT 10\n    `);\n    \n    console.log('\\nSample leads (latest 10):');\n    console.table(sampleRows);\n\n    // Check lead origins distribution\n    const [originRows] = await connection.execute(`\n      SELECT lead_origin, COUNT(*) as count \n      FROM leads \n      GROUP BY lead_origin \n      ORDER BY count DESC\n    `);\n    \n    console.log('\\nLead origins distribution:');\n    console.table(originRows);\n\n    // Check status distribution (remarks field)\n    const [statusRows] = await connection.execute(`\n      SELECT remarks, COUNT(*) as count \n      FROM leads \n      GROUP BY remarks \n      ORDER BY count DESC\n    `);\n    \n    console.log('\\nStatus distribution (remarks field):');\n    console.table(statusRows);\n\n    await connection.end();\n  } catch (error) {\n    console.error('Error:', error);\n  }\n}\n\nverifyImport();\n","size_bytes":1436},"server/email-service.ts":{"content":"import nodemailer from 'nodemailer';\n\ninterface EmailOptions {\n  to: string;\n  subject: string;\n  text: string;\n  html?: string;\n}\n\nclass EmailService {\n  private transporter!: nodemailer.Transporter;\n  private isInitialized = false;\n\n  constructor() {\n    this.initializeTransporter();\n  }\n\n  private async initializeTransporter() {\n    try {\n      // Check if real SMTP credentials are provided\n      if (process.env.EMAIL_USER && process.env.EMAIL_PASS) {\n        // Use real SMTP configuration\n        this.transporter = nodemailer.createTransport({\n          host: process.env.SMTP_HOST || 'smtp.gmail.com',\n          port: parseInt(process.env.SMTP_PORT || '587'),\n          secure: false, // true for 465, false for other ports\n          auth: {\n            user: process.env.EMAIL_USER,\n            pass: process.env.EMAIL_PASS\n          }\n        });\n        console.log('Email service initialized with real SMTP credentials');\n      } else {\n        // Use Ethereal Email for testing\n        const testAccount = await nodemailer.createTestAccount();\n        this.transporter = nodemailer.createTransport({\n          host: 'smtp.ethereal.email',\n          port: 587,\n          secure: false,\n          auth: {\n            user: testAccount.user,\n            pass: testAccount.pass\n          }\n        });\n        console.log('Email service initialized with Ethereal Email (testing mode)');\n        console.log('Test account:', testAccount.user);\n      }\n      this.isInitialized = true;\n    } catch (error) {\n      console.error('Failed to initialize email service:', error);\n      // Fallback to a basic configuration\n      this.transporter = nodemailer.createTransport({\n        streamTransport: true,\n        newline: 'unix',\n        buffer: true\n      });\n    }\n  }\n\n  async sendEmail(options: EmailOptions): Promise<void> {\n    try {\n      // Ensure transporter is initialized\n      if (!this.isInitialized) {\n        await this.initializeTransporter();\n      }\n\n      // Use provided HTML or convert plain text to HTML if needed\n      const htmlContent = options.html || this.textToHtml(options.text);\n      \n      const mailOptions = {\n        from: process.env.EMAIL_FROM || '\"WMK Installation Team\" <noreply@wmk-crm.com>',\n        to: options.to,\n        subject: options.subject,\n        text: options.text,\n        html: htmlContent\n      };\n\n      const info = await this.transporter.sendMail(mailOptions);\n      console.log('Email sent successfully:', info.messageId);\n      \n      // For Ethereal Email, log the preview URL\n      if (!process.env.EMAIL_USER || !process.env.EMAIL_PASS) {\n        const previewUrl = nodemailer.getTestMessageUrl(info);\n        if (previewUrl) {\n          console.log('📧 Email preview URL:', previewUrl);\n        }\n      }\n    } catch (error) {\n      console.error('Failed to send email:', error);\n      throw new Error('Failed to send email notification');\n    }\n  }\n\n  private textToHtml(text: string): string {\n    // Convert professional plain text to styled HTML\n    return text\n      // Convert headers with box borders\n      .replace(/┌─+┐\\n│\\s*(.*?)\\s*│\\n└─+┘/g, '<div style=\"background:#f8f9fa;border:2px solid #dee2e6;border-radius:8px;padding:12px;margin:16px 0;text-align:center;\"><h3 style=\"margin:0;color:#495057;font-size:14px;font-weight:bold;text-transform:uppercase;letter-spacing:1px;\">$1</h3></div>')\n      \n      // Convert checkboxes\n      .replace(/□\\s*(.*?)$/gm, '<div style=\"margin:4px 0;\"><span style=\"color:#6c757d;\">☐</span> $1</div>')\n      .replace(/✓\\s*(.*?)$/gm, '<div style=\"margin:4px 0;color:#28a745;\"><span style=\"font-weight:bold;\">✓</span> $1</div>')\n      \n      // Convert status indicators\n      .replace(/✅\\s*(.*?)$/gm, '<span style=\"color:#28a745;font-weight:bold;\">✅ $1</span>')\n      .replace(/⚠️\\s*(.*?)$/gm, '<span style=\"color:#fd7e14;font-weight:bold;\">⚠️ $1</span>')\n      \n      // Convert bullet points with icons\n      .replace(/•\\s*(.*?)$/gm, '<div style=\"margin:4px 0;\"><span style=\"color:#007bff;\">•</span> $1</div>')\n      \n      // Convert contact info\n      .replace(/📞\\s*(.*?)$/gm, '<div style=\"margin:4px 0;\"><span style=\"color:#17a2b8;\">📞</span> $1</div>')\n      .replace(/📧\\s*(.*?)$/gm, '<div style=\"margin:4px 0;\"><span style=\"color:#17a2b8;\">📧</span> $1</div>')\n      .replace(/🌐\\s*(.*?)$/gm, '<div style=\"margin:4px 0;\"><span style=\"color:#17a2b8;\">🌐</span> $1</div>')\n      .replace(/📅\\s*(.*?)$/gm, '<div style=\"margin:8px 0;\"><span style=\"color:#007bff;font-weight:bold;\">📅</span> $1</div>')\n      .replace(/👤\\s*(.*?)$/gm, '<div style=\"margin:8px 0;\"><span style=\"color:#6f42c1;font-weight:bold;\">👤</span> $1</div>')\n      .replace(/🔧\\s*(.*?)$/gm, '<div style=\"margin:8px 0;\"><span style=\"color:#fd7e14;font-weight:bold;\">🔧</span> $1</div>')\n      .replace(/💰\\s*(.*?)$/gm, '<div style=\"margin:8px 0;\"><span style=\"color:#28a745;font-weight:bold;\">💰</span> $1</div>')\n      \n      // Convert double line breaks to paragraphs\n      .replace(/\\n\\n/g, '</p><p style=\"margin:12px 0;line-height:1.5;\">')\n      \n      // Convert single line breaks to br tags\n      .replace(/\\n/g, '<br>')\n      \n      // Wrap in paragraphs\n      .replace(/^/, '<div style=\"font-family:Arial,sans-serif;font-size:14px;line-height:1.6;color:#333;\"><p style=\"margin:12px 0;line-height:1.5;\">')\n      .replace(/$/, '</p></div>')\n      \n      // Bold text\n      .replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>')\n      .replace(/\\*(.*?)\\*/g, '<em>$1</em>')\n      \n      // Style company signature\n      .replace(/(Quality • Craftsmanship • Excellence|Excellence in Every Installation)/, '<div style=\"margin-top:20px;padding:12px;background:#f8f9fa;border-left:4px solid #007bff;font-style:italic;color:#6c757d;text-align:center;\">$1</div>');\n  }\n\n  async testConnection(): Promise<boolean> {\n    try {\n      if (!this.isInitialized) {\n        await this.initializeTransporter();\n      }\n      await this.transporter.verify();\n      console.log('SMTP connection verified successfully');\n      return true;\n    } catch (error) {\n      console.error('SMTP connection failed:', error);\n      return false;\n    }\n  }\n}\n\nexport const emailService = new EmailService();\n","size_bytes":6245},"client/src/vite-env.d.ts":{"content":"/// <reference types=\"vite/client\" />\n\ndeclare module \"*.png\" {\n  const value: string;\n  export default value;\n}\n\ndeclare module \"*.jpg\" {\n  const value: string;\n  export default value;\n}\n\ndeclare module \"*.jpeg\" {\n  const value: string;\n  export default value;\n}\n\ndeclare module \"*.svg\" {\n  const value: string;\n  export default value;\n}\n","size_bytes":339},"client/src/pages/add-lead.tsx":{"content":"import { useState } from 'react';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useLocation } from 'wouter';\nimport { LEAD_ORIGINS, LEAD_STATUSES, ASSIGNEES, insertLeadSchema } from '@shared/schema';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\n\nexport default function AddLead() {\n  const [formData, setFormData] = useState({\n    name: '',\n    phone: '',\n    email: '',\n    lead_origin: 'facebook',\n    remarks: 'new',\n    assigned_to: 'kim',\n    project_amount: '',\n    next_followup_date: '',\n    notes: ''\n  });\n\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const createLeadMutation = useMutation({\n    mutationFn: async (leadData: any) => {\n      const response = await apiRequest('POST', '/api/leads', leadData);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({ title: \"Success\", description: \"Lead created successfully!\" });\n      queryClient.invalidateQueries({ queryKey: ['/api/leads'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/dashboard/stats'] });\n      setLocation('/leads');\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Error\", \n        description: error?.message || \"Failed to create lead\", \n        variant: \"destructive\" \n      });\n    }\n  });\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    try {\n      const leadData = {\n        name: formData.name,\n        phone: formData.phone,\n        email: formData.email || null,\n        lead_origin: formData.lead_origin,\n        remarks: formData.remarks,\n        assigned_to: formData.assigned_to,\n        project_amount: formData.project_amount ? parseFloat(formData.project_amount) : null,\n        next_followup_date: formData.next_followup_date ? new Date(formData.next_followup_date) : null,\n        notes: formData.notes || null\n      };\n\n      createLeadMutation.mutate(leadData);\n    } catch (error) {\n      toast({ \n        title: \"Error\", \n        description: \"Please check your input data\", \n        variant: \"destructive\" \n      });\n    }\n  };\n\n  const handleCancel = () => {\n    setLocation('/leads');\n  };\n\n  return (\n    <div className=\"container-fluid py-4\">\n      <div className=\"row\">\n        <div className=\"col-lg-8 mx-auto\">\n          <div className=\"card\">\n            <div className=\"card-header\">\n              <div className=\"d-flex justify-content-between align-items-center\">\n                <h4 className=\"mb-0\">\n                  <i className=\"fas fa-user-plus text-success me-2\"></i>\n                  Add New Lead\n                </h4>\n                <button \n                  type=\"button\" \n                  className=\"btn btn-outline-secondary\"\n                  onClick={handleCancel}\n                  data-testid=\"button-back-to-leads\"\n                >\n                  <i className=\"fas fa-arrow-left me-1\"></i>Back to Leads\n                </button>\n              </div>\n            </div>\n            <div className=\"card-body\">\n              <form onSubmit={handleSubmit} data-testid=\"add-lead-form\">\n                <div className=\"row\">\n                  {/* Basic Information */}\n                  <div className=\"col-12 mb-4\">\n                    <h5 className=\"text-primary border-bottom pb-2\">\n                      <i className=\"fas fa-user me-2\"></i>Basic Information\n                    </h5>\n                  </div>\n\n                  <div className=\"col-md-6 mb-3\">\n                    <label className=\"form-label required\">\n                      <i className=\"fas fa-user me-1\"></i>Full Name\n                    </label>\n                    <input\n                      type=\"text\"\n                      className=\"form-control\"\n                      value={formData.name}\n                      onChange={(e) => handleInputChange('name', e.target.value)}\n                      required\n                      data-testid=\"input-lead-name\"\n                      placeholder=\"Enter customer's full name\"\n                    />\n                  </div>\n\n                  <div className=\"col-md-6 mb-3\">\n                    <label className=\"form-label required\">\n                      <i className=\"fas fa-phone me-1\"></i>Phone Number\n                    </label>\n                    <input\n                      type=\"tel\"\n                      className=\"form-control\"\n                      value={formData.phone}\n                      onChange={(e) => handleInputChange('phone', e.target.value)}\n                      required\n                      data-testid=\"input-lead-phone\"\n                      placeholder=\"(555) 123-4567\"\n                    />\n                  </div>\n\n                  <div className=\"col-md-6 mb-3\">\n                    <label className=\"form-label\">\n                      <i className=\"fas fa-envelope me-1\"></i>Email Address\n                    </label>\n                    <input\n                      type=\"email\"\n                      className=\"form-control\"\n                      value={formData.email}\n                      onChange={(e) => handleInputChange('email', e.target.value)}\n                      data-testid=\"input-lead-email\"\n                      placeholder=\"customer@example.com\"\n                    />\n                  </div>\n\n                  <div className=\"col-md-6 mb-3\">\n                    <label className=\"form-label required\">\n                      <i className=\"fas fa-share-alt me-1\"></i>Lead Origin\n                    </label>\n                    <select\n                      className=\"form-select\"\n                      value={formData.lead_origin}\n                      onChange={(e) => handleInputChange('lead_origin', e.target.value)}\n                      required\n                      data-testid=\"select-lead-origin\"\n                    >\n                      {LEAD_ORIGINS.map(origin => (\n                        <option key={origin} value={origin}>\n                          {origin.charAt(0).toUpperCase() + origin.slice(1).replace('-', ' ')}\n                        </option>\n                      ))}\n                    </select>\n                  </div>\n\n                  {/* Lead Management */}\n                  <div className=\"col-12 mb-4 mt-4\">\n                    <h5 className=\"text-primary border-bottom pb-2\">\n                      <i className=\"fas fa-tasks me-2\"></i>Lead Management\n                    </h5>\n                  </div>\n\n                  <div className=\"col-md-4 mb-3\">\n                    <label className=\"form-label\">\n                      <i className=\"fas fa-flag me-1\"></i>Status\n                    </label>\n                    <select\n                      className=\"form-select\"\n                      value={formData.remarks}\n                      onChange={(e) => handleInputChange('remarks', e.target.value)}\n                      data-testid=\"select-lead-status\"\n                    >\n                      {LEAD_STATUSES.map(status => (\n                        <option key={status} value={status}>\n                          {status.charAt(0).toUpperCase() + status.slice(1).replace('-', ' ')}\n                        </option>\n                      ))}\n                    </select>\n                  </div>\n\n                  <div className=\"col-md-4 mb-3\">\n                    <label className=\"form-label\">\n                      <i className=\"fas fa-user-tag me-1\"></i>Assigned To\n                    </label>\n                    <select\n                      className=\"form-select\"\n                      value={formData.assigned_to}\n                      onChange={(e) => handleInputChange('assigned_to', e.target.value)}\n                      data-testid=\"select-lead-assigned\"\n                    >\n                      {ASSIGNEES.map(assignee => (\n                        <option key={assignee} value={assignee}>\n                          {assignee.charAt(0).toUpperCase() + assignee.slice(1)}\n                        </option>\n                      ))}\n                    </select>\n                  </div>\n\n                  <div className=\"col-md-4 mb-3\">\n                    <label className=\"form-label\">\n                      <i className=\"fas fa-dollar-sign me-1\"></i>Project Amount\n                    </label>\n                    <input\n                      type=\"number\"\n                      className=\"form-control\"\n                      step=\"0.01\"\n                      min=\"0\"\n                      value={formData.project_amount}\n                      onChange={(e) => handleInputChange('project_amount', e.target.value)}\n                      data-testid=\"input-lead-amount\"\n                      placeholder=\"0.00\"\n                    />\n                  </div>\n\n                  <div className=\"col-md-6 mb-3\">\n                    <label className=\"form-label\">\n                      <i className=\"fas fa-calendar-alt me-1\"></i>Next Follow-up Date\n                    </label>\n                    <input\n                      type=\"date\"\n                      className=\"form-control\"\n                      value={formData.next_followup_date}\n                      onChange={(e) => handleInputChange('next_followup_date', e.target.value)}\n                      data-testid=\"input-lead-followup\"\n                    />\n                  </div>\n\n                  <div className=\"col-12 mb-3\">\n                    <label className=\"form-label\">\n                      <i className=\"fas fa-sticky-note me-1\"></i>Initial Notes\n                    </label>\n                    <textarea\n                      className=\"form-control\"\n                      rows={4}\n                      value={formData.notes}\n                      onChange={(e) => handleInputChange('notes', e.target.value)}\n                      data-testid=\"textarea-lead-notes\"\n                      placeholder=\"Enter any initial notes about this lead...\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"d-flex justify-content-end gap-2 mt-4\">\n                  <button \n                    type=\"button\" \n                    className=\"btn btn-outline-secondary\"\n                    onClick={handleCancel}\n                    data-testid=\"button-cancel-add-lead\"\n                  >\n                    <i className=\"fas fa-times me-1\"></i>Cancel\n                  </button>\n                  <button\n                    type=\"submit\"\n                    className=\"btn btn-success\"\n                    disabled={createLeadMutation.isPending || !formData.name || !formData.phone}\n                    data-testid=\"button-submit-add-lead\"\n                  >\n                    {createLeadMutation.isPending ? (\n                      <>\n                        <i className=\"fas fa-spinner fa-spin me-2\"></i>Creating Lead...\n                      </>\n                    ) : (\n                      <>\n                        <i className=\"fas fa-save me-2\"></i>Create Lead\n                      </>\n                    )}\n                  </button>\n                </div>\n              </form>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":11358},"client/src/components/modals/quick-followup-modal.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Lead } from '@shared/schema';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface QuickFollowupModalProps {\n  lead: Lead | null;\n  show: boolean;\n  onHide: () => void;\n}\n\nconst quickNoteTemplates = [\n  \"Sent a text message\",\n  \"Sent an email\",\n  \"Talked to client - interested\",\n  \"Talked to client - needs time to decide\", \n  \"Left voicemail\",\n  \"Scheduled callback\",\n  \"Sent quote\",\n  \"Meeting scheduled\",\n  \"Waiting for approval\",\n  \"Custom note...\"\n];\n\nexport function QuickFollowupModal({ lead, show, onHide }: QuickFollowupModalProps) {\n  const [nextFollowupDate, setNextFollowupDate] = useState('');\n  const [quickNote, setQuickNote] = useState('');\n  const [selectedTemplate, setSelectedTemplate] = useState('');\n  const [customNote, setCustomNote] = useState('');\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const updateLeadMutation = useMutation({\n    mutationFn: async (updates: any) => {\n      if (!lead) throw new Error('No lead selected');\n      const response = await apiRequest('PUT', `/api/leads/${lead.id}`, updates);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({ title: \"Success\", description: \"Follow-up updated successfully!\" });\n      queryClient.invalidateQueries({ queryKey: ['/api/leads'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/dashboard/stats'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/followups'] });\n      onHide();\n      resetForm();\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to update follow-up\", variant: \"destructive\" });\n    }\n  });\n\n  useEffect(() => {\n    if (lead) {\n      setNextFollowupDate(lead.next_followup_date ? \n        new Date(lead.next_followup_date).toISOString().split('T')[0] : '');\n    }\n  }, [lead]);\n\n  const resetForm = () => {\n    setNextFollowupDate('');\n    setQuickNote('');\n    setSelectedTemplate('');\n    setCustomNote('');\n  };\n\n  const handleTemplateChange = (template: string) => {\n    setSelectedTemplate(template);\n    if (template === 'Custom note...') {\n      setQuickNote('');\n    } else {\n      setQuickNote(template);\n      setCustomNote('');\n    }\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    const today = new Date().toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric',\n      year: 'numeric'\n    });\n\n    const noteToAdd = selectedTemplate === 'Custom note...' ? customNote : quickNote;\n    const timestampedNote = noteToAdd ? `[${today}] ${noteToAdd}` : '';\n    \n    // Append new note to existing notes\n    const existingNotes = lead?.notes || '';\n    const updatedNotes = existingNotes \n      ? `${existingNotes}\\n${timestampedNote}`\n      : timestampedNote;\n\n    const updates = {\n      next_followup_date: nextFollowupDate ? new Date(nextFollowupDate) : null,\n      notes: updatedNotes || null\n    };\n\n    updateLeadMutation.mutate(updates);\n  };\n\n  const handleClose = () => {\n    resetForm();\n    onHide();\n  };\n\n  if (!lead) return null;\n\n  return (\n    <div \n      className={`modal fade ${show ? 'show' : ''}`} \n      style={{ display: show ? 'block' : 'none' }}\n      data-testid=\"quick-followup-modal\"\n    >\n      <div className=\"modal-dialog\">\n        <div className=\"modal-content\">\n          <div className=\"modal-header\">\n            <h5 className=\"modal-title\">\n              <i className=\"fas fa-calendar-alt text-primary me-2\"></i>\n              Quick Follow-up Update - {lead.name}\n            </h5>\n            <button \n              type=\"button\" \n              className=\"btn-close\" \n              onClick={handleClose}\n              data-testid=\"button-close-followup-modal\"\n            ></button>\n          </div>\n          <div className=\"modal-body\">\n            <form onSubmit={handleSubmit}>\n              <div className=\"mb-3\">\n                <label className=\"form-label\">\n                  <i className=\"fas fa-clock me-1\"></i>Next Follow-up Date\n                </label>\n                <input\n                  type=\"date\"\n                  className=\"form-control\"\n                  value={nextFollowupDate}\n                  onChange={(e) => setNextFollowupDate(e.target.value)}\n                  data-testid=\"input-followup-date\"\n                />\n              </div>\n\n              <div className=\"mb-3\">\n                <label className=\"form-label\">\n                  <i className=\"fas fa-sticky-note me-1\"></i>Quick Note Template\n                </label>\n                <select\n                  className=\"form-select\"\n                  value={selectedTemplate}\n                  onChange={(e) => handleTemplateChange(e.target.value)}\n                  data-testid=\"select-note-template\"\n                >\n                  <option value=\"\">Select a template...</option>\n                  {quickNoteTemplates.map(template => (\n                    <option key={template} value={template}>{template}</option>\n                  ))}\n                </select>\n              </div>\n\n              {selectedTemplate === 'Custom note...' ? (\n                <div className=\"mb-3\">\n                  <label className=\"form-label\">Custom Note</label>\n                  <textarea\n                    className=\"form-control\"\n                    rows={3}\n                    value={customNote}\n                    onChange={(e) => setCustomNote(e.target.value)}\n                    placeholder=\"Enter your custom note here...\"\n                    data-testid=\"textarea-custom-note\"\n                  />\n                </div>\n              ) : selectedTemplate ? (\n                <div className=\"mb-3\">\n                  <label className=\"form-label\">Note Preview</label>\n                  <div className=\"form-control bg-light\" style={{ minHeight: '38px' }}>\n                    <small className=\"text-muted\">\n                      [{new Date().toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' })}] {quickNote}\n                    </small>\n                  </div>\n                </div>\n              ) : null}\n\n              <div className=\"alert alert-info\">\n                <i className=\"fas fa-info-circle me-2\"></i>\n                <strong>Note:</strong> This quick note will be added to the existing notes with today's date.\n              </div>\n            </form>\n          </div>\n          <div className=\"modal-footer\">\n            <button \n              type=\"button\" \n              className=\"btn btn-secondary\" \n              onClick={handleClose}\n              data-testid=\"button-cancel-followup\"\n            >\n              Cancel\n            </button>\n            <button\n              type=\"button\"\n              className=\"btn btn-primary\"\n              onClick={handleSubmit}\n              disabled={updateLeadMutation.isPending || (!nextFollowupDate && !quickNote && !customNote)}\n              data-testid=\"button-save-followup\"\n            >\n              {updateLeadMutation.isPending ? (\n                <>\n                  <i className=\"fas fa-spinner fa-spin me-2\"></i>Updating...\n                </>\n              ) : (\n                <>\n                  <i className=\"fas fa-save me-2\"></i>Update Follow-up\n                </>\n              )}\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":7474}},"version":1}