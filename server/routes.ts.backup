import type { Express } from "express";
import { createServer, type Server } from "http";
import { storage } from "./storage";
import { insertLeadSchema, updateLeadSchema, insertSampleBookletSchema, updateSampleBookletSchema, insertCalendarEventSchema, updateCalendarEventSchema, insertRepairRequestSchema, repairRequests, leads as leadsTable, wmkColors } from "@shared/schema";
import { uspsService } from "./usps-service";
import { trackingScheduler } from "./tracking-scheduler";
import { GoogleCalendarService } from "./google-calendar-service";
import { z } from "zod";
import { emailService } from "./email-service";
import { eq, like, or, desc, and } from 'drizzle-orm';
import { db } from './db';

const loginSchema = z.object({
  username: z.string(),
  password: z.string(),
});

export async function registerRoutes(app: Express): Promise<Server> {
  
  // Auth endpoints
  app.post("/api/auth/login", async (req, res) => {
    try {
      console.log("Login request body:", req.body);
      console.log("Body type:", typeof req.body);
      
      const { username, password } = loginSchema.parse(req.body);
      const user = await storage.getUserByUsername(username.toLowerCase());
      
      console.log("Retrieved user:", user);
      console.log("User permissions type:", typeof user?.permissions);
      console.log("User permissions value:", user?.permissions);
      
      if (!user || user.password !== password) {
        return res.status(401).json({ message: "Invalid credentials" });
      }

      // Ensure permissions is always an array
      let permissions = [];
      if (user.permissions) {
        if (Array.isArray(user.permissions)) {
          permissions = user.permissions;
        } else if (typeof user.permissions === 'string') {
          try {
            permissions = JSON.parse(user.permissions);
            if (!Array.isArray(permissions)) {
              permissions = [];
            }
          } catch (error) {
            console.error('Error parsing permissions string:', error);
            permissions = [];
          }
        }
      }

      console.log("Final permissions array:", permissions);

      // Simple session - in production use proper session management
      res.json({ 
        user: { 
          id: user.id, 
          username: user.username, 
          role: user.role,
          permissions: permissions
        } 
      });
    } catch (error) {
      console.error("Login validation error:", error);
      if (error instanceof z.ZodError) {
        console.error("Zod validation errors:", error.errors);
        return res.status(400).json({ message: "Invalid request data", errors: error.errors });
      }
      res.status(400).json({ message: "Invalid request data" });
    }
  });

  // Dashboard stats
  app.get("/api/dashboard/stats", async (req, res) => {
    try {
      const allLeads = await storage.getLeads();
      const today = new Date();
      const weekAgo = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);
      
      const totalLeads = allLeads.length;
      const soldLeads = allLeads.filter(lead => lead.remarks === "Sold").length;
      const todayFollowups = (await storage.getLeadsWithFollowupsDue(today)).length;
      const newToday = (await storage.getLeadsCreatedAfter(weekAgo)).length;

      res.json({
        totalLeads,
        soldLeads,
        todayFollowups,
        newToday
      });
    } catch (error) {
      res.status(500).json({ message: "Failed to fetch dashboard stats" });
    }
  });

  // Lead endpoints
  app.get("/api/leads", async (req, res) => {
    try {
      const { status, origin, assigned_to, search, page, limit } = req.query;
      
      // Parse pagination parameters
      const pageNum = parseInt(page as string) || 1;
      const limitNum = parseInt(limit as string) || 20;
      
      // Prepare filters
      const filters = {
        search: search as string,
        status: status as string,
        origin: origin as string,
        assigned_to: assigned_to as string
      };
      
      // Use the new paginated method
      const result = await storage.getLeadsPaginated(pageNum, limitNum, filters);
      
      res.json(result);
    } catch (error) {
      console.error('Error fetching leads:', error);
      res.status(500).json({ message: "Failed to fetch leads" });
    }
  });

  // Internal enrichment endpoint - find existing lead by email (MUST be before /:id route)
  app.get("/api/leads/enrich", async (req, res) => {
    try {
      const { email } = req.query;
      
      if (!email || typeof email !== 'string') {
        return res.status(400).json({ message: "Email parameter is required" });
      }

      // Search for existing lead with this email
      const existingLead = await storage.getLeadByEmail(email);
      
      if (existingLead) {
        res.json({
          found: true,
          name: existingLead.name,
          phone: existingLead.phone,
          email: existingLead.email
        });
      } else {
        res.json({
          found: false,
          name: '',
          phone: '',
          email
        });
      }
    } catch (error) {
      console.error('Error in internal enrichment:', error);
      res.status(500).json({ message: "Failed to enrich lead data" });
    }
  });

  app.get("/api/leads/:id", async (req, res) => {
    try {
      const lead = await storage.getLead(req.params.id);
      if (!lead) {
        return res.status(404).json({ message: "Lead not found" });
      }
      res.json(lead);
    } catch (error) {
      res.status(500).json({ message: "Failed to fetch lead" });
    }
  });

  app.post("/api/leads", async (req, res) => {
    console.log("POST /api/leads - Request received");
    console.log("Request body:", JSON.stringify(req.body, null, 2));
    
    try {
      console.log("Validating lead data with schema...");
      const leadData = insertLeadSchema.parse(req.body);
      console.log("Lead data validated successfully:", leadData);
      
      console.log("Creating lead in database...");
      const lead = await storage.createLead(leadData);
      console.log("Lead created successfully:", lead);
      
      res.status(201).json(lead);
    } catch (error) {
      console.error("Error creating lead:", error);
      if (error instanceof z.ZodError) {
        console.error("Validation errors:", error.errors);
        return res.status(400).json({ message: "Invalid lead data", errors: error.errors });
      }
      console.error("General error:", error);
      res.status(500).json({ message: "Failed to create lead" });
    }
  });

  app.put("/api/leads/:id", async (req, res) => {
    try {
      console.log('Received lead update request for ID:', req.params.id);
      console.log('Request body:', JSON.stringify(req.body, null, 2));
      
      const updates = updateLeadSchema.parse(req.body);
      console.log('Parsed updates:', JSON.stringify(updates, null, 2));
      
      const lead = await storage.updateLead(req.params.id, updates);
      
      if (!lead) {
        return res.status(404).json({ message: "Lead not found" });
      }
      
      res.json(lead);
    } catch (error) {
      if (error instanceof z.ZodError) {
        console.error("Lead update validation errors:", error.errors);
        return res.status(400).json({ message: "Invalid lead data", errors: error.errors });
      }
      console.error("Lead update error:", error);
      res.status(500).json({ message: "Failed to update lead" });
    }
  });

  app.delete("/api/leads/:id", async (req, res) => {
    try {
      const deleted = await storage.deleteLead(req.params.id);
      if (!deleted) {
        return res.status(404).json({ message: "Lead not found" });
      }
      res.status(204).send();
    } catch (error) {
      res.status(500).json({ message: "Failed to delete lead" });
    }
  });

  // Follow-up endpoints
  app.get("/api/followups", async (req, res) => {
    try {
      const today = new Date();
      const yesterday = new Date(today.getTime() - 24 * 60 * 60 * 1000);
      
      const allLeads = await storage.getLeads();
      // Filter out leads with "Not Interested" status from follow-ups
      const activeLeads = allLeads.filter(lead => 
        lead.remarks !== 'Not Interested' && 
        lead.remarks !== 'Not Service Area' && 
        lead.remarks !== 'Not Compatible'
      );
      
      const overdue = activeLeads.filter(lead => {
        if (!lead.next_followup_date) return false;
        return new Date(lead.next_followup_date) < yesterday;
      });

      const dueToday = activeLeads.filter(lead => {
        if (!lead.next_followup_date) return false;
        const followupDate = new Date(lead.next_followup_date);
        return followupDate.toDateString() === today.toDateString();
      });
      
      const upcoming = activeLeads.filter(lead => {
        if (!lead.next_followup_date) return false;
        return new Date(lead.next_followup_date) > today;
      }).slice(0, 10); // Limit to next 10

      res.json({
        overdue,
        dueToday,
        upcoming
      });
    } catch (error) {
      res.status(500).json({ message: "Failed to fetch follow-ups" });
    }
  });

  // Installation endpoints
  app.get("/api/installations", async (req, res) => {
    try {
      const allLeads = await storage.getLeads();
      const installations = allLeads.filter(lead => 
        lead.remarks === "Sold" && 
        lead.installation_date
        // Keep all installations, including completed ones - let frontend categorize them
      );

      res.json(installations);
    } catch (error) {
      res.status(500).json({ message: "Failed to fetch installations" });
    }
  });

  // Complete Installation endpoint
  app.post("/api/installations/:id/complete", async (req, res) => {
    try {
      const installationId = req.params.id;
      
      // Get the installation (lead) first
      const installation = await storage.getLead(installationId);
      if (!installation) {
        return res.status(404).json({ message: "Installation not found" });
      }

      // Validate that this is actually an installation
      if (installation.remarks !== "Sold" || !installation.installation_date) {
        return res.status(400).json({ message: "This lead is not a valid installation" });
      }

      // Create completed project record
      const completedProject = {
        lead_id: installation.id,
        customer_name: installation.name,
        phone: installation.phone,
        email: installation.email,
        address: installation.address,
        project_amount: installation.project_amount,
        deposit_paid: installation.deposit_paid,
        balance_paid: installation.balance_paid,
        installation_date: installation.installation_date,
        completion_date: new Date(),
        assigned_installer: installation.assigned_installer,
        notes: installation.notes,
        original_lead_origin: installation.lead_origin === "Website" ? null : installation.lead_origin,
        original_date_created: installation.date_created,
        original_assigned_to: installation.assigned_to,
      };

      // Try to create the completed project record in the database
      let dbCreationSuccess = false;
      try {
        const createdProject = await storage.createCompletedProject(completedProject);
        console.log('Successfully created completed project:', createdProject);
        dbCreationSuccess = true;
      } catch (dbError) {
        console.error('Failed to create completed project in database:', dbError);
        console.log('This is expected if the completed_projects table does not exist yet.');
        console.log('The installation will still be marked as complete using the notes field.');
      }
      
      // Mark the lead with completion notes
      const completionNote = `[${new Date().toLocaleDateString()}] Installation completed and moved to completed projects.`;
      const updatedNotes = installation.notes 
        ? `${installation.notes}\n\n${completionNote}`
        : completionNote;
      
      const updatedAdditionalNotes = installation.additional_notes
        ? `${installation.additional_notes}\n${completionNote}`
        : completionNote;

      await storage.updateLead(installationId, {
        notes: updatedNotes,
        additional_notes: updatedAdditionalNotes
      });

      res.json({ 
        message: "Installation marked as completed successfully",
        completedProject: completedProject,
        dbCreationSuccess: dbCreationSuccess
      });
    } catch (error) {
      console.error("Error completing installation:", error);
      res.status(500).json({ message: "Failed to complete installation" });
    }
  });

  // Temporary endpoint to create completed_projects table
  app.post("/api/create-completed-projects-table", async (req, res) => {
    try {
      // Execute the table creation SQL directly
      await storage.db.execute(`
        CREATE TABLE IF NOT EXISTS completed_projects (
          id INT AUTO_INCREMENT PRIMARY KEY,
          lead_id INT NOT NULL,
          customer_name VARCHAR(100) NOT NULL,
          phone VARCHAR(20),
          email VARCHAR(100),
          address TEXT,
          project_amount DECIMAL(10,2),
          deposit_paid DECIMAL(10,2),
          balance_paid DECIMAL(10,2),
          installation_date DATE,
          completion_date DATETIME NOT NULL,
          assigned_installer VARCHAR(100),
          notes TEXT,
          original_lead_origin VARCHAR(50),
          original_date_created DATETIME,
          original_assigned_to VARCHAR(100),
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
          INDEX idx_lead_id (lead_id),
          INDEX idx_completion_date (completion_date),
          INDEX idx_installer (assigned_installer)
        )
      `);
      
      res.json({ message: "completed_projects table created successfully" });
    } catch (error) {
      console.error("Error creating completed_projects table:", error);
      res.status(500).json({ 
        message: "Failed to create completed_projects table", 
        error: error instanceof Error ? error.message : "Unknown error" 
      });
    }
  });

  // Temporary endpoint to create completed_projects table
  app.post("/api/create-completed-projects-table", async (req, res) => {
    try {
      // Execute the table creation SQL directly
      await storage.db.execute(`
        CREATE TABLE IF NOT EXISTS completed_projects (
          id INT AUTO_INCREMENT PRIMARY KEY,
          lead_id INT NOT NULL,
          customer_name VARCHAR(100) NOT NULL,
          phone VARCHAR(20),
          email VARCHAR(100),
          address TEXT,
          project_amount DECIMAL(10,2),
          deposit_paid DECIMAL(10,2),
          balance_paid DECIMAL(10,2),
          installation_date DATE,
          completion_date DATETIME NOT NULL,
          assigned_installer VARCHAR(100),
          notes TEXT,
          original_lead_origin VARCHAR(50),
          original_date_created DATETIME,
          original_assigned_to VARCHAR(100),
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
          INDEX idx_lead_id (lead_id),
          INDEX idx_completion_date (completion_date),
          INDEX idx_installer (assigned_installer)
        )
      `);
      
      res.json({ message: "completed_projects table created successfully" });
    } catch (error) {
      console.error("Error creating completed_projects table:", error);
      res.status(500).json({ 
        message: "Failed to create completed_projects table", 
        error: error instanceof Error ? error.message : "Unknown error" 
      });
    }
  });

  // Get completed projects endpoint
  app.get("/api/completed-projects", async (req, res) => {
    try {
      const completedProjects = await storage.getCompletedProjects();
      res.json(completedProjects);
    } catch (error) {
      console.error("Error fetching completed projects:", error);
      res.status(500).json({ message: "Failed to fetch completed projects" });
    }
  });

  // Sample Booklets endpoints
  app.get("/api/sample-booklets", async (req, res) => {
    try {
      const { status } = req.query;
      let booklets = await storage.getSampleBooklets();

      if (status) {
        booklets = await storage.getSampleBookletsByStatus(status as string);
      }

      res.json(booklets);
    } catch (error) {
      res.status(500).json({ message: "Failed to fetch sample booklets" });
    }
  });

  app.get("/api/sample-booklets/:id", async (req, res) => {
    try {
      const booklet = await storage.getSampleBooklet(req.params.id);
      if (!booklet) {
        return res.status(404).json({ message: "Sample booklet not found" });
      }
      res.json(booklet);
    } catch (error) {
      res.status(500).json({ message: "Failed to fetch sample booklet" });
    }
  });

  app.post("/api/sample-booklets", async (req, res) => {
    try {
      const bookletData = insertSampleBookletSchema.parse(req.body);
      const booklet = await storage.createSampleBooklet(bookletData);
      res.status(201).json(booklet);
    } catch (error) {
      if (error instanceof z.ZodError) {
        return res.status(400).json({ message: "Invalid booklet data", errors: error.errors });
      }
      res.status(500).json({ message: "Failed to create sample booklet" });
    }
  });

  app.put("/api/sample-booklets/:id", async (req, res) => {
    try {
      console.log('PUT request body:', JSON.stringify(req.body, null, 2));
      const updates = updateSampleBookletSchema.parse(req.body);
      const booklet = await storage.updateSampleBooklet(req.params.id, updates);
      
      if (!booklet) {
        return res.status(404).json({ message: "Sample booklet not found" });
      }
      
      res.json(booklet);
    } catch (error) {
      if (error instanceof z.ZodError) {
        console.error('Zod validation error:', error.errors);
        return res.status(400).json({ message: "Invalid booklet data", errors: error.errors });
      }
      console.error('Update error:', error);
      res.status(500).json({ message: "Failed to update sample booklet" });
    }
  });

  app.delete("/api/sample-booklets/:id", async (req, res) => {
    try {
      const deleted = await storage.deleteSampleBooklet(req.params.id);
      if (!deleted) {
        return res.status(404).json({ message: "Sample booklet not found" });
      }
      res.status(204).send();
    } catch (error) {
      res.status(500).json({ message: "Failed to delete sample booklet" });
    }
  });

  // USPS Tracking endpoints
  app.get("/api/sample-booklets/:id/tracking", async (req, res) => {
    try {
      const booklet = await storage.getSampleBooklet(req.params.id);
      if (!booklet) {
        return res.status(404).json({ message: "Sample booklet not found" });
      }

      if (!booklet.tracking_number) {
        return res.status(400).json({ message: "No tracking number available for this booklet" });
      }

      const trackingInfo = await uspsService.trackPackage(booklet.tracking_number);
      
      // Update booklet status if it has changed
      if (trackingInfo.status !== booklet.status) {
        await storage.updateSampleBooklet(req.params.id, { 
          status: trackingInfo.status as any 
        });
      }

      res.json(trackingInfo);
    } catch (error) {
      console.error('Tracking error:', error);
      res.status(500).json({ message: "Failed to fetch tracking information" });
    }
  });

  app.post("/api/sample-booklets/sync-tracking", async (req, res) => {
    try {
      // Use the tracking scheduler for manual sync
      await trackingScheduler.manualSync();
      res.json({ message: "Manual tracking sync completed" });
    } catch (error) {
      console.error('Manual sync tracking error:', error);
      res.status(500).json({ message: "Failed to sync tracking information" });
    }
  });

  // Sample Booklets dashboard stats
  app.get("/api/sample-booklets/stats/dashboard", async (req, res) => {
    try {
      const allBooklets = await storage.getSampleBooklets();
      const pending = allBooklets.filter(b => b.status === "Pending").length;
      const shipped = allBooklets.filter(b => b.status === "Shipped").length;
      const inTransit = allBooklets.filter(b => b.status === "Shipped").length; // Use "Shipped" for in-transit
      const outForDelivery = allBooklets.filter(b => b.status === "Shipped").length; // Use "Shipped" for out-for-delivery
      const delivered = allBooklets.filter(b => b.status === "Delivered").length;
      const refunded = allBooklets.filter(b => b.status === "Delivered").length; // Use "Delivered" for refunded status
      const thisWeek = allBooklets.filter(b => {
        const weekAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);
        return new Date(b.date_ordered) > weekAgo;
      }).length;

      res.json({
        totalOrders: allBooklets.length,
        pendingOrders: pending,
        shippedOrders: shipped,
        inTransitOrders: inTransit,
        outForDeliveryOrders: outForDelivery,
        deliveredOrders: delivered,
        refundedOrders: refunded,
        thisWeekOrders: thisWeek
      });
    } catch (error) {
      res.status(500).json({ message: "Failed to fetch booklet stats" });
    }
  });

  // Advanced Reports Analytics API
  app.get("/api/reports/analytics", async (req, res) => {
    try {
      const { year, month } = req.query;
      const allLeads = await storage.getLeads();
      
      // Filter leads by year and optionally by month
      let filteredLeads = allLeads.filter(lead => {
        const createdDate = new Date(lead.date_created);
        const leadYear = createdDate.getFullYear();
        
        if (year && leadYear !== parseInt(year as string)) {
          return false;
        }
        
        if (month) {
          const leadMonth = createdDate.getMonth() + 1; // JS months are 0-indexed
          if (leadMonth !== parseInt(month as string)) {
            return false;
          }
        }
        
        return true;
      });
      
      // Executive Dashboard Metrics
      const totalLeads = filteredLeads.length;
      const soldLeads = filteredLeads.filter(lead => lead.remarks === 'Sold');
      const soldCount = soldLeads.length;
      const conversionRate = totalLeads > 0 ? ((soldCount / totalLeads) * 100) : 0;
      
      const totalRevenue = soldLeads.reduce((sum, lead) => {
        return sum + (parseFloat(lead.project_amount || '0'));
      }, 0);
      
      const averageDealSize = soldCount > 0 ? (totalRevenue / soldCount) : 0;
      
      // Lead Origin Performance
      const originStats = filteredLeads.reduce((acc, lead) => {
        const origin = lead.lead_origin;
        if (!acc[origin]) {
          acc[origin] = { total: 0, sold: 0, revenue: 0 };
        }
        acc[origin].total += 1;
        if (lead.remarks === 'Sold') {
          acc[origin].sold += 1;
          acc[origin].revenue += parseFloat(lead.project_amount || '0');
        }
        return acc;
      }, {} as Record<string, { total: number; sold: number; revenue: number }>);
      
      const leadOriginPerformance = Object.entries(originStats).map(([origin, stats]) => ({
        origin,
        totalLeads: stats.total,
        soldLeads: stats.sold,
        conversionRate: stats.total > 0 ? ((stats.sold / stats.total) * 100) : 0,
        totalRevenue: stats.revenue,
        averageDealSize: stats.sold > 0 ? (stats.revenue / stats.sold) : 0
      })).sort((a, b) => b.totalRevenue - a.totalRevenue);
      
      // Team Performance Metrics
      const teamStats = filteredLeads.reduce((acc, lead) => {
        const member = lead.assigned_to || 'unassigned';
        if (!acc[member]) {
          acc[member] = { total: 0, sold: 0, revenue: 0 };
        }
        acc[member].total += 1;
        if (lead.remarks === 'Sold') {
          acc[member].sold += 1;
          acc[member].revenue += parseFloat(lead.project_amount || '0');
        }
        return acc;
      }, {} as Record<string, { total: number; sold: number; revenue: number }>);
      
      const teamPerformance = Object.entries(teamStats).map(([member, stats]) => ({
        member,
        totalLeads: stats.total,
        soldLeads: stats.sold,
        conversionRate: stats.total > 0 ? ((stats.sold / stats.total) * 100) : 0,
        totalRevenue: stats.revenue,
        averageDealSize: stats.sold > 0 ? (stats.revenue / stats.sold) : 0
      })).sort((a, b) => b.totalRevenue - a.totalRevenue);
      
      // Monthly Breakdown (only if no month filter is applied)
      let monthlyBreakdown: Array<{
        month: number;
        monthName: string;
        totalLeads: number;
        soldLeads: number;
        conversionRate: number;
        totalRevenue: number;
        averageDealSize: number;
      }> = [];
      if (!month) {
        // Use specified year or default to current year for monthly breakdown
        const targetYear = year ? parseInt(year as string) : new Date().getFullYear();
        const yearLeads = allLeads.filter(lead => {
          const leadYear = new Date(lead.date_created).getFullYear();
          return leadYear === targetYear;
        });
        
        monthlyBreakdown = Array.from({ length: 12 }, (_, monthIndex) => {
          const monthLeads = yearLeads.filter(lead => {
            const leadMonth = new Date(lead.date_created).getMonth();
            return leadMonth === monthIndex;
          });
          
          const monthSoldLeads = monthLeads.filter(lead => lead.remarks === 'Sold');
          const monthRevenue = monthSoldLeads.reduce((sum, lead) => {
            return sum + (parseFloat(lead.project_amount || '0'));
          }, 0);
          
          return {
            month: monthIndex + 1,
            monthName: new Date(2024, monthIndex, 1).toLocaleString('default', { month: 'long' }),
            totalLeads: monthLeads.length,
            soldLeads: monthSoldLeads.length,
            conversionRate: monthLeads.length > 0 ? ((monthSoldLeads.length / monthLeads.length) * 100) : 0,
            totalRevenue: monthRevenue,
            averageDealSize: monthSoldLeads.length > 0 ? (monthRevenue / monthSoldLeads.length) : 0
          };
        });
      }
      
      res.json({
        executiveDashboard: {
          totalLeads,
          soldLeads: soldCount,
          conversionRate,
          totalRevenue,
          averageDealSize
        },
        leadOriginPerformance,
        teamPerformance,
        monthlyBreakdown,
        filterInfo: {
          year: year ? parseInt(year as string) : null,
          month: month ? parseInt(month as string) : null,
          period: year ? (month ? `${year}-${String(month).padStart(2, '0')}` : year) : 'all-time'
        }
      });
    } catch (error) {
      res.status(500).json({ message: "Failed to fetch analytics data" });
    }
  });

  // Installer Reports API
  app.get("/api/reports/installers", async (req, res) => {
    try {
      const { year, month } = req.query;
      const allLeads = await storage.getLeads();
      
      // Filter leads for installations (sold with installation date)
      let installations = allLeads.filter(lead => 
        lead.remarks === 'Sold' && 
        lead.installation_date &&
        lead.assigned_installer
      );
      
      // Filter by year and optionally by month
      installations = installations.filter(lead => {
        const installDate = new Date(lead.installation_date!);
        const installYear = installDate.getFullYear();
        
        if (year && installYear !== parseInt(year as string)) {
          return false;
        }
        
        if (month) {
          const installMonth = installDate.getMonth() + 1; // JS months are 0-indexed
          if (installMonth !== parseInt(month as string)) {
            return false;
          }
        }
        
        return true;
      });

      // Group installations by installer
      const installerStats = installations.reduce((acc, lead) => {
        const installer = lead.assigned_installer!;
        if (!acc[installer]) {
          acc[installer] = {
            installerName: installer,
            totalInstallations: 0,
            totalValue: 0,
            completedInstallations: 0,
            pendingInstallations: 0,
            installations: []
          };
        }
        
        const projectValue = parseFloat(lead.project_amount || '0');
        acc[installer].totalInstallations += 1;
        acc[installer].totalValue += projectValue;
        
        // Check if installation is completed (installation date is in the past)
        const installDate = new Date(lead.installation_date!);
        const today = new Date();
        const isCompleted = installDate <= today;
        
        if (isCompleted) {
          acc[installer].completedInstallations += 1;
        } else {
          acc[installer].pendingInstallations += 1;
        }
        
        acc[installer].installations.push({
          projectId: lead.id,
          customerName: lead.name,
          projectValue: projectValue,
          installationDate: lead.installation_date!,
          status: isCompleted ? 'completed' : 'pending'
        });
        
        return acc;
      }, {} as Record<string, any>);

      // Calculate average project values
      Object.values(installerStats).forEach((installer: any) => {
        installer.averageProjectValue = installer.totalInstallations > 0 ? 
          installer.totalValue / installer.totalInstallations : 0;
      });

      const installers = Object.values(installerStats);
      const totalInstallations = installations.length;
      const totalValue = installations.reduce((sum, lead) => 
        sum + parseFloat(lead.project_amount || '0'), 0);

      // Determine period for filtering info
      const period = (!year && !month) ? 'all-time' :
                   (year && !month) ? year :
                   `${year}-${month}`;

      res.json({
        installers,
        totalInstallations,
        totalValue,
        filterInfo: {
          year: year ? parseInt(year as string) : null,
          month: month ? parseInt(month as string) : null,
          period
        }
      });
    } catch (error) {
      res.status(500).json({ message: "Failed to fetch installer data" });
    }
  });
  
  // Available years for filtering
  app.get("/api/reports/years", async (req, res) => {
    try {
      const allLeads = await storage.getLeads();
      const yearSet = new Set(allLeads.map(lead => new Date(lead.date_created).getFullYear()));
      const years = Array.from(yearSet).sort((a, b) => b - a); // Most recent first
      
      res.json({ availableYears: years });
    } catch (error) {
      res.status(500).json({ message: "Failed to fetch available years" });
    }
  });
  
  // Installation Email Notification API
  app.post("/api/installations/email", async (req, res) => {
    try {
      const { installationId, type, customMessage } = req.body;
      
      if (!installationId || !type) {
        return res.status(400).json({ message: "Installation ID and email type are required" });
      }
      
      if (!['client', 'installer'].includes(type)) {
        return res.status(400).json({ message: "Email type must be 'client' or 'installer'" });
      }
      
      const installation = await storage.getLead(installationId);
      if (!installation) {
        return res.status(404).json({ message: "Installation not found" });
      }
      
      if (!installation.installation_date) {
        return res.status(400).json({ message: "Installation date not set" });
      }
      
      // Format installation date
      const installDate = new Date(installation.installation_date);
      const formattedDate = installDate.toLocaleDateString('en-US', {
        weekday: 'long',
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      });
      
      let emailContent = '';
      let subject = '';
      let recipient = '';
      
      if (type === 'client') {
        if (!installation.email) {
          return res.status(400).json({ message: "Client email not available" });
        }
        
        recipient = installation.email;
        subject = `Wrap My Kitchen Installation Confirmation - ${formattedDate}`;
        emailContent = `
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Wrap My Kitchen - Installation Confirmation</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
        .color-chip {
            display: inline-block;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            margin: 0 5px;
            border: 2px solid #fff;
            box-shadow: 0 0 0 1px rgba(0,0,0,0.1);
            vertical-align: middle;
        }
    </style>
</head>
<body style="margin: 0; padding: 0; font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #1f2937; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);">
    
    <!-- Main Container -->
    <table width="100%" border="0" cellspacing="0" cellpadding="20" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); min-height: 100vh;">
        <tr>
            <td align="center">
                <!-- Email Card -->
                <table width="100%" border="0" cellspacing="0" cellpadding="0" style="max-width: 650px; background: #ffffff; border-radius: 16px; box-shadow: 0 25px 50px rgba(0,0,0,0.15); overflow: hidden;">
                    
                    <!-- Modern Header with Gradient -->
                    <tr>
                        <td style="background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%); padding: 40px 30px; text-align: center;">
                            <table width="100%" border="0" cellspacing="0" cellpadding="0">
                                <tr>
                                    <td align="center">
                                        <h1 style="margin: 0; font-size: 42px; font-weight: 700; color: #ffffff; letter-spacing: -1px;">
                                            Wrap<span style="color: #fbbf24;">My</span>Kitchen
                                        </h1>
                                        <p style="margin: 12px 0 0; font-size: 16px; color: rgba(255,255,255,0.9); font-weight: 500;">
                                            Premium Kitchen Transformations
                                        </p>
                                    </td>
                                </tr>
                            </table>
                        </td>
                    </tr>
                    
                    <!-- Success Banner -->
                    <tr>
                        <td style="background: linear-gradient(90deg, #10b981 0%, #059669 100%); padding: 20px; text-align: center;">
                            <p style="margin: 0; color: #ffffff; font-size: 18px; font-weight: 600;">
                                ✨ Installation Confirmed! ✨
                            </p>
                        </td>
                    </tr>
                    
                    <!-- Main Content -->
                    <tr>
                        <td style="padding: 40px 30px;">
                            
                            <!-- Personalized Greeting -->
                            <div style="margin-bottom: 32px;">
                                <h2 style="margin: 0 0 16px; font-size: 28px; font-weight: 700; color: #1f2937; line-height: 1.2;">
                                    Hello ${installation.name}! 👋
                                </h2>
                                <p style="margin: 0; font-size: 18px; color: #4b5563; line-height: 1.6;">
                                    Great news! Your kitchen transformation is confirmed. Our expert team is excited to bring your vision to life.
                                </p>
                            </div>
                            
                            <!-- Installation Card -->
                            <div style="background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%); border-radius: 12px; padding: 24px; margin: 32px 0; border-left: 6px solid #3b82f6;">
                                <h3 style="margin: 0 0 8px; font-size: 20px; font-weight: 600; color: #1f2937;">
                                    📅 Installation Details
                                </h3>
                                <p style="margin: 0; font-size: 16px; color: #6b7280;">
                                    Scheduled for <strong style="color: #1f2937;">${formattedDate} at 9:00 AM</strong>
                                </p>
                            </div>
                            
                            <!-- Modern Details Grid -->
                            <table width="100%" border="0" cellspacing="0" cellpadding="0" style="margin: 32px 0;">
                                <tr>
                                    <td style="width: 50%; padding: 20px; background: #f9fafb; border-radius: 12px; margin-right: 16px; vertical-align: top;">
                                        <div style="text-align: center;">
                                            <div style="width: 60px; height: 60px; background: linear-gradient(135deg, #3b82f6, #1d4ed8); border-radius: 50%; display: inline-flex; align-items: center; justify-content: center; margin-bottom: 16px;">
                                                <span style="font-size: 24px;">👤</span>
                                            </div>
                                            <h4 style="margin: 0 0 8px; font-size: 16px; font-weight: 600; color: #1f2937;">Customer</h4>
                                            <p style="margin: 0; font-size: 18px; font-weight: 700; color: #3b82f6;">${installation.name}</p>
                                            <p style="margin: 8px 0 0; font-size: 14px; color: #6b7280;">${installation.phone}</p>
                                        </div>
                                    </td>
                                    <td style="width: 16px;"></td>
                                    <td style="width: 50%; padding: 20px; background: #f0fdf4; border-radius: 12px; vertical-align: top;">
                                        <div style="text-align: center;">
                                            <div style="width: 60px; height: 60px; background: linear-gradient(135deg, #10b981, #059669); border-radius: 50%; display: inline-flex; align-items: center; justify-content: center; margin-bottom: 16px;">
                                                <span style="font-size: 24px;">🔧</span>
                                            </div>
                                            <h4 style="margin: 0 0 8px; font-size: 16px; font-weight: 600; color: #1f2937;">Lead Installer</h4>
                                            <p style="margin: 0; font-size: 18px; font-weight: 700; color: #10b981;">
                                                ${installation.assigned_installer ? installation.assigned_installer.charAt(0).toUpperCase() + installation.assigned_installer.slice(1) : 'To be assigned'}
                                            </p>
                                        </div>
                                    </td>
                                </tr>
                            </table>
                            
                            <!-- Project Value Card -->
                            <div style="background: linear-gradient(135deg, #fef3c7 0%, #fcd34d 100%); border-radius: 12px; padding: 24px; margin: 32px 0; text-align: center;">
                                <h4 style="margin: 0 0 8px; font-size: 16px; font-weight: 600; color: #92400e;">💰 Project Investment</h4>
                                <p style="margin: 0; font-size: 28px; font-weight: 700; color: #92400e;">
                                    ${installation.project_amount ? `$${parseInt(installation.project_amount).toLocaleString()}` : 'Contact office for details'}
                                </p>
                            </div>
                            
                            ${installation.selected_colors && Array.isArray(installation.selected_colors) && installation.selected_colors.length > 0 ? `
                            <!-- Selected Colors Section -->
                            <div style="background: linear-gradient(135deg, #f3e8ff 0%, #e9d5ff 100%); border-radius: 12px; padding: 24px; margin: 32px 0;">
                                <h4 style="margin: 0 0 16px; font-size: 18px; font-weight: 600; color: #6b21a8; text-align: center;">
                                    🎨 Your Selected Colors
                                </h4>
                                <div style="text-align: center;">
                                    ${installation.selected_colors.map(color => `
                                        <div style="display: inline-block; margin: 8px 12px; text-align: center;">
                                            <div style="width: 40px; height: 40px; border-radius: 8px; background: #${color.replace('WMK-', '')}; border: 3px solid #ffffff; box-shadow: 0 4px 12px rgba(0,0,0,0.15); margin: 0 auto 8px;"></div>
                                            <p style="margin: 0; font-size: 12px; font-weight: 600; color: #6b21a8;">${color}</p>
                                        </div>
                                    `).join('')}
                                </div>
                            </div>
                            ` : ''}
                            
                            <!-- Installation Process -->
                            <div style="background: #ffffff; border: 2px solid #e5e7eb; border-radius: 12px; padding: 24px; margin: 32px 0;">
                                <h4 style="margin: 0 0 20px; font-size: 20px; font-weight: 600; color: #1f2937; text-align: center;">
                                    🏗️ Installation Process
                                </h4>
                                <table width="100%" border="0" cellspacing="0" cellpadding="12">
                                    <tr>
                                        <td style="background: #dbeafe; border-radius: 8px; padding: 16px; width: 25%; text-align: center; vertical-align: top;">
                                            <div style="font-size: 24px; margin-bottom: 8px;">🚚</div>
                                            <p style="margin: 0; font-size: 14px; font-weight: 600; color: #1e40af;">Team Arrival</p>
                                            <p style="margin: 4px 0 0; font-size: 12px; color: #374151;">9:00 AM Sharp</p>
                                        </td>
                                        <td style="width: 8px;"></td>
                                        <td style="background: #dcfce7; border-radius: 8px; padding: 16px; width: 25%; text-align: center; vertical-align: top;">
                                            <div style="font-size: 24px; margin-bottom: 8px;">⚙️</div>
                                            <p style="margin: 0; font-size: 14px; font-weight: 600; color: #166534;">Installation</p>
                                            <p style="margin: 4px 0 0; font-size: 12px; color: #374151;">4-6 Hours</p>
                                        </td>
                                        <td style="width: 8px;"></td>
                                        <td style="background: #fef3c7; border-radius: 8px; padding: 16px; width: 25%; text-align: center; vertical-align: top;">
                                            <div style="font-size: 24px; margin-bottom: 8px;">✅</div>
                                            <p style="margin: 0; font-size: 14px; font-weight: 600; color: #92400e;">Quality Check</p>
                                            <p style="margin: 4px 0 0; font-size: 12px; color: #374151;">Final Inspection</p>
                                        </td>
                                        <td style="width: 8px;"></td>
                                        <td style="background: #fce7f3; border-radius: 8px; padding: 16px; width: 25%; text-align: center; vertical-align: top;">
                                            <div style="font-size: 24px; margin-bottom: 8px;">🎉</div>
                                            <p style="margin: 0; font-size: 14px; font-weight: 600; color: #be185d;">Completion</p>
                                            <p style="margin: 4px 0 0; font-size: 12px; color: #374151;">Ready to Enjoy!</p>
                                        </td>
                                    </tr>
                                </table>
                            </div>
                            
                            ${customMessage ? `
                            <!-- Custom Message -->
                            <div style="background: linear-gradient(135deg, #fef2f2 0%, #fee2e2 100%); border-radius: 12px; padding: 24px; margin: 32px 0; border-left: 6px solid #ef4444;">
                                <h4 style="margin: 0 0 12px; font-size: 18px; font-weight: 600; color: #dc2626;">
                                    📝 Special Instructions
                                </h4>
                                <p style="margin: 0; font-size: 16px; color: #374151; line-height: 1.6;">
                                    ${customMessage}
                                </p>
                            </div>
                            ` : ''}
                            
                            <!-- Preparation Checklist -->
                            <div style="background: linear-gradient(135deg, #ecfdf5 0%, #d1fae5 100%); border-radius: 12px; padding: 24px; margin: 32px 0;">
                                <h4 style="margin: 0 0 20px; font-size: 20px; font-weight: 600; color: #065f46; text-align: center;">
                                    📋 Pre-Installation Checklist
                                </h4>
                                <table width="100%" border="0" cellspacing="0" cellpadding="8">
                                    <tr>
                                        <td style="font-size: 16px; color: #047857; padding: 8px 0;">
                                            <span style="margin-right: 12px;">✅</span>Clear work area of personal items
                                        </td>
                                    </tr>
                                    <tr>
                                        <td style="font-size: 16px; color: #047857; padding: 8px 0;">
                                            <span style="margin-right: 12px;">✅</span>Ensure easy access to installation space
                                        </td>
                                    </tr>
                                    <tr>
                                        <td style="font-size: 16px; color: #047857; padding: 8px 0;">
                                            <span style="margin-right: 12px;">✅</span>Have someone present during installation
                                        </td>
                                    </tr>
                                    <tr>
                                        <td style="font-size: 16px; color: #047857; padding: 8px 0;">
                                            <span style="margin-right: 12px;">✅</span>Secure pets away from work area
                                        </td>
                                    </tr>
                                    <tr>
                                        <td style="font-size: 16px; color: #047857; padding: 8px 0;">
                                            <span style="margin-right: 12px;">✅</span>Have final payment ready if balance due
                                        </td>
                                    </tr>
                                </table>
                            </div>
                            
                        </td>
                    </tr>
                    
                    <!-- Modern Footer -->
                    <tr>
                        <td style="background: linear-gradient(135deg, #1f2937 0%, #111827 100%); padding: 40px 30px; text-align: center;">
                            <h3 style="margin: 0 0 20px; color: #ffffff; font-size: 24px; font-weight: 700;">
                                Questions? We're Here to Help! 🤝
                            </h3>
                            <table width="100%" border="0" cellspacing="0" cellpadding="12">
                                <tr>
                                    <td style="text-align: center; width: 33.33%;">
                                        <div style="color: #3b82f6; font-size: 24px; margin-bottom: 8px;">📞</div>
                                        <p style="margin: 0; color: #d1d5db; font-size: 14px; font-weight: 500;">(XXX) XXX-XXXX</p>
                                    </td>
                                    <td style="text-align: center; width: 33.33%;">
                                        <div style="color: #10b981; font-size: 24px; margin-bottom: 8px;">📧</div>
                                        <p style="margin: 0; color: #d1d5db; font-size: 14px; font-weight: 500;">info@wrapmykitchen.com</p>
                                    </td>
                                    <td style="text-align: center; width: 33.33%;">
                                        <div style="color: #fbbf24; font-size: 24px; margin-bottom: 8px;">🌐</div>
                                        <p style="margin: 0; color: #d1d5db; font-size: 14px; font-weight: 500;">wrapmykitchen.com</p>
                                    </td>
                                </tr>
                            </table>
                            <p style="margin: 24px 0 0; font-size: 13px; color: #9ca3af; line-height: 1.5;">
                                © 2025 Wrap My Kitchen Solutions. All rights reserved.<br>
                                <span style="color: #fbbf24;">Quality • Craftsmanship • Excellence</span>
                            </p>
                        </td>
                    </tr>
                    
                </table>
            </td>
        </tr>
    </table>
    
</body>
</html>
        `.trim();
        
      } else if (type === 'installer') {
        if (!installation.assigned_installer) {
          return res.status(400).json({ message: "No installer assigned" });
        }
        
        // Fetch installers dynamically from database
        const installers = await storage.getInstallers();
        const assignedInstaller = installers.find(installer => 
          installer.name.toLowerCase() === installation.assigned_installer!.toLowerCase()
        );
        
        // Check if installer exists and has email
        if (!assignedInstaller) {
          return res.status(400).json({ 
            message: `Installer "${installation.assigned_installer}" not found in database` 
          });
        }
        
        if (!assignedInstaller.email) {
          return res.status(400).json({ 
            message: `Installer "${assignedInstaller.name}" does not have an email address configured. Please update their profile in Installer Management.` 
          });
        }
        
        recipient = assignedInstaller.email;
        subject = `WMK Installation Assignment - ${formattedDate} - ${installation.name}`;
        emailContent = `
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Wrap My Kitchen - Installation Assignment</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
</head>
<body style="margin: 0; padding: 20px; font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #1f2937; background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);">
    
    <!-- Main Container -->
    <div style="max-width: 600px; margin: 0 auto; background: #ffffff; border-radius: 16px; box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04); overflow: hidden;">
        
        <!-- Header with Gradient -->
        <div style="background: linear-gradient(135deg, #2563eb 0%, #1d4ed8 50%, #1e40af 100%); padding: 40px 32px; text-align: center; position: relative;">
            <div style="position: absolute; top: 0; left: 0; right: 0; bottom: 0; background: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1000 300\"><defs><pattern id=\"grain\" width=\"100\" height=\"100\" patternUnits=\"userSpaceOnUse\"><circle cx=\"50\" cy=\"50\" r=\"1\" fill=\"%23ffffff\" opacity=\"0.1\"/></pattern></defs><rect width=\"100%\" height=\"100%\" fill=\"url(%23grain)\"/></svg>'); opacity: 0.3;"></div>
            <div style="position: relative; z-index: 1;">
                <h1 style="margin: 0; font-size: 40px; font-weight: 700; color: #ffffff; letter-spacing: -0.025em;">
                    WMK<span style="color: #fbbf24; font-weight: 800;">Kitchen</span>
                </h1>
                <div style="margin: 12px 0 0; font-size: 14px; color: rgba(255, 255, 255, 0.9); text-transform: uppercase; letter-spacing: 2px; font-weight: 500;">
                    Professional Installation Team
                </div>
            </div>
        </div>
        
        <!-- Installation Assignment Banner -->
        <div style="background: linear-gradient(90deg, #f59e0b 0%, #d97706 100%); padding: 24px 32px; text-align: center; border-top: 1px solid rgba(0, 0, 0, 0.1);">
            <div style="font-size: 20px; font-weight: 600; color: #ffffff; margin: 0; display: flex; align-items: center; justify-content: center; gap: 12px;">
                <span style="font-size: 24px;">🔧</span>
                New Installation Assignment
            </div>
        </div>
        
        <!-- Main Content -->
        <div style="padding: 40px 32px;">
                
                <!-- Greeting -->
                <div style="font-size: 16px; color: #374151; margin-bottom: 32px; line-height: 1.7;">
                    Hi <strong style="color: #1f2937; font-weight: 600;">${installation.assigned_installer?.charAt(0).toUpperCase()}${installation.assigned_installer?.slice(1)}</strong>,<br><br>
                    You have been assigned a new kitchen installation for <strong style="color: #2563eb;">Wrap My Kitchen</strong>. Please review the details below and prepare accordingly.
                </div>
                
                <!-- Assignment Header Card -->
                <div style="background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%); border-radius: 12px; padding: 24px; margin: 32px 0; border-left: 4px solid #f59e0b; box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);">
                    <h3 style="margin: 0 0 8px; color: #1f2937; font-size: 20px; font-weight: 600;">
                        Installation Assignment
                    </h3>
                    <div style="color: #6b7280; font-size: 14px; font-weight: 500;">Scheduled for ${formattedDate}</div>
                </div>
                
                <!-- Job Details Card -->
                <div style="background: #ffffff; border-radius: 12px; overflow: hidden; box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1); margin: 32px 0;">
                    <div style="background: linear-gradient(90deg, #1f2937 0%, #374151 100%); color: #ffffff; padding: 20px; text-align: center;">
                        <h3 style="margin: 0; font-size: 18px; font-weight: 600; letter-spacing: 0.5px;">
                            📋 Job Details
                        </h3>
                    </div>
                    <div style="padding: 24px;">
                        <div style="display: grid; gap: 20px;">
                            <div style="display: flex; justify-content: space-between; align-items: center; padding: 16px 0; border-bottom: 1px solid #f3f4f6;">
                                <span style="color: #374151; font-weight: 500; display: flex; align-items: center; gap: 8px;">
                                    <span style="font-size: 16px;">📅</span>
                                    Installation Date
                                </span>
                                <span style="color: #1f2937; font-weight: 600;">
                                    ${formattedDate} at 9:00 AM
                                </span>
                            </div>
                            <div style="display: flex; justify-content: space-between; align-items: center; padding: 16px 0; border-bottom: 1px solid #f3f4f6;">
                                <span style="color: #374151; font-weight: 500; display: flex; align-items: center; gap: 8px;">
                                    <span style="font-size: 16px;">👤</span>
                                    Customer
                                </span>
                                <span style="color: #1f2937; font-weight: 600;">
                                    ${installation.name}
                                </span>
                            </div>
                            <div style="display: flex; justify-content: space-between; align-items: center; padding: 16px 0; border-bottom: 1px solid #f3f4f6;">
                                <span style="color: #374151; font-weight: 500; display: flex; align-items: center; gap: 8px;">
                                    <span style="font-size: 16px;">📞</span>
                                    Phone
                                </span>
                                <span style="color: #1f2937; font-weight: 600;">
                                    ${installation.phone}
                                </span>
                            </div>
                            <div style="display: flex; justify-content: space-between; align-items: center; padding: 16px 0; border-bottom: 1px solid #f3f4f6;">
                                <span style="color: #374151; font-weight: 500; display: flex; align-items: center; gap: 8px;">
                                    <span style="font-size: 16px;">📧</span>
                                    Email
                                </span>
                                <span style="color: #1f2937; font-weight: 600;">
                                    ${installation.email || 'Not provided'}
                                </span>
                            </div>
                            <div style="display: flex; justify-content: space-between; align-items: center; padding: 16px 0;">
                                <span style="color: #374151; font-weight: 500; display: flex; align-items: center; gap: 8px;">
                                    <span style="font-size: 16px;">💰</span>
                                    Project Value
                                </span>
                                <span style="color: #1f2937; font-weight: 600;">
                                    ${installation.project_amount ? `$${parseInt(installation.project_amount).toLocaleString()}` : 'Contact office'}
                                </span>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Color Selection -->
                ${installation.selected_colors ? (() => {
                  try {
                    const colors = typeof installation.selected_colors === 'string' 
                      ? JSON.parse(installation.selected_colors) 
                      : installation.selected_colors;
                    
                    if (Array.isArray(colors) && colors.length > 0) {
                      return `
                <div style="background: #ffffff; border-radius: 12px; overflow: hidden; box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1); margin: 32px 0;">
                    <div style="background: linear-gradient(90deg, #7c3aed 0%, #6d28d9 100%); color: #ffffff; padding: 20px; text-align: center;">
                        <h3 style="margin: 0; font-size: 18px; font-weight: 600; letter-spacing: 0.5px;">
                            🎨 Selected Colors
                        </h3>
                    </div>
                    <div style="padding: 24px; text-align: center;">
                        <div style="display: flex; flex-wrap: wrap; justify-content: center; gap: 16px; margin: 16px 0;">
                            ${colors.map((color: string) => `
                                <div style="display: flex; flex-direction: column; align-items: center; gap: 8px;">
                                    <div style="width: 48px; height: 48px; background-color: ${color}; border-radius: 12px; border: 3px solid #ffffff; box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06); position: relative;">
                                        <div style="position: absolute; inset: 0; border-radius: 9px; box-shadow: inset 0 2px 4px 0 rgba(0, 0, 0, 0.06);"></div>
                                    </div>
                                    <span style="font-size: 12px; font-weight: 500; color: #6b7280; text-transform: uppercase; letter-spacing: 0.5px;">${color}</span>
                                </div>
                            `).join('')}
                        </div>
                        <div style="margin-top: 16px; padding: 16px; background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%); border-radius: 8px;">
                            <p style="margin: 0; font-size: 14px; color: #374151; font-weight: 500;">
                                <span style="color: #7c3aed;">💡 Note:</span> These are the colors selected by the customer for their kitchen installation.
                            </p>
                        </div>
                    </div>
                </div>
                `;
                    }
                  } catch (e) {
                    console.error('Error parsing selected_colors:', e);
                  }
                  return '';
                })() : ''}
                
                <!-- Payment Status -->
                <div style="background: #ffffff; border-radius: 12px; overflow: hidden; box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1); margin: 32px 0;">
                    <div style="background: linear-gradient(90deg, #059669 0%, #047857 100%); color: #ffffff; padding: 20px; text-align: center;">
                        <h3 style="margin: 0; font-size: 18px; font-weight: 600; letter-spacing: 0.5px;">
                            💳 Payment Status
                        </h3>
                    </div>
                    <div style="padding: 24px;">
                        <div style="display: grid; gap: 20px;">
                            <div style="display: flex; justify-content: space-between; align-items: center; padding: 16px 0; border-bottom: 1px solid #f3f4f6;">
                                <span style="color: #374151; font-weight: 500;">
                                    Deposit Payment
                                </span>
                                <span style="padding: 6px 16px; border-radius: 20px; font-size: 14px; font-weight: 600; ${installation.deposit_paid ? 'background: linear-gradient(90deg, #10b981 0%, #059669 100%); color: #ffffff;' : 'background: linear-gradient(90deg, #ef4444 0%, #dc2626 100%); color: #ffffff;'}">
                                    ${installation.deposit_paid ? '✅ PAID' : '⚠️ PENDING'}
                                </span>
                            </div>
                            <div style="display: flex; justify-content: space-between; align-items: center; padding: 16px 0;">
                                <span style="color: #374151; font-weight: 500;">
                                    Final Balance
                                </span>
                                <span style="padding: 6px 16px; border-radius: 20px; font-size: 14px; font-weight: 600; ${installation.balance_paid ? 'background: linear-gradient(90deg, #10b981 0%, #059669 100%); color: #ffffff;' : 'background: linear-gradient(90deg, #f59e0b 0%, #d97706 100%); color: #ffffff;'}">
                                    ${installation.balance_paid ? '✅ PAID' : '💳 DUE ON COMPLETION'}
                                </span>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Pre-Installation Checklist -->
                <div style="background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%); border-radius: 12px; padding: 32px; margin: 32px 0; text-align: center; color: #ffffff; box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);">
                    <h3 style="margin: 0 0 24px; font-size: 22px; font-weight: 700; letter-spacing: 0.5px;">
                        📋 Pre-Installation Checklist
                    </h3>
                    <div style="background: rgba(255, 255, 255, 0.15); border-radius: 8px; padding: 24px; margin: 20px 0; text-align: left; backdrop-filter: blur(10px);">
                        <div style="display: grid; gap: 12px;">
                            <div style="color: #ffffff; font-size: 14px; font-weight: 500; padding: 8px 0;">□ Review project specifications and materials list</div>
                            <div style="color: #ffffff; font-size: 14px; font-weight: 500; padding: 8px 0;">□ Confirm all materials are loaded and ready</div>
                            <div style="color: #ffffff; font-size: 14px; font-weight: 500; padding: 8px 0;">□ Contact customer 24 hours prior to confirm</div>
                            <div style="color: #ffffff; font-size: 14px; font-weight: 500; padding: 8px 0;">□ Verify access and parking availability</div>
                            <div style="color: #ffffff; font-size: 14px; font-weight: 500; padding: 8px 0;">□ Ensure all tools and equipment are prepared</div>
                        </div>
                    </div>
                </div>

                ${installation.additional_notes ? `
                <!-- Installation Notes -->
                <div style="background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%); border-radius: 12px; padding: 24px; margin: 32px 0; border-left: 4px solid #06b6d4; box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);">
                    <h3 style="margin: 0 0 16px; color: #1f2937; font-size: 18px; font-weight: 600; display: flex; align-items: center; gap: 8px;">
                        <span style="font-size: 20px;">📝</span>
                        Installation Notes
                    </h3>
                    <div style="color: #374151; line-height: 1.7; font-size: 15px; background: #ffffff; padding: 20px; border-radius: 8px; border: 1px solid #e5e7eb;">
                        ${installation.additional_notes}
                    </div>
                </div>
                ` : ''}

                ${customMessage ? `
                <!-- Special Instructions -->
                <div style="background: linear-gradient(135deg, #fef3c7 0%, #fde68a 100%); border-radius: 12px; padding: 24px; margin: 32px 0; border-left: 4px solid #f59e0b; box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);">
                    <h3 style="margin: 0 0 16px; color: #92400e; font-size: 18px; font-weight: 600; display: flex; align-items: center; gap: 8px;">
                        <span style="font-size: 20px;">⚡</span>
                        Special Instructions
                    </h3>
                    <div style="color: #92400e; line-height: 1.7; font-size: 15px; background: #ffffff; padding: 20px; border-radius: 8px; border: 1px solid #f3e8ff;">
                        ${customMessage}
                    </div>
                </div>
                ` : ''}
                
                <!-- Important Reminders -->
                <div style="background: linear-gradient(135deg, #374151 0%, #1f2937 100%); border-radius: 12px; padding: 32px; margin: 32px 0; text-align: center; color: #ffffff; box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);">
                    <h3 style="margin: 0 0 24px; font-size: 22px; font-weight: 700; letter-spacing: 0.5px;">
                        ⚠️ Important Reminders
                    </h3>
                    <div style="background: rgba(255, 255, 255, 0.1); border-radius: 8px; padding: 24px; margin: 20px 0; text-align: left; backdrop-filter: blur(10px);">
                        <div style="display: grid; gap: 12px;">
                            <div style="color: #ffffff; font-size: 14px; font-weight: 500; padding: 8px 0;">• Call customer 24 hours before installation</div>
                            <div style="color: #ffffff; font-size: 14px; font-weight: 500; padding: 8px 0;">• Arrive promptly at 9:00 AM with all materials</div>
                            <div style="color: #ffffff; font-size: 14px; font-weight: 500; padding: 8px 0;">• Conduct quality inspection before walkthrough</div>
                            <div style="color: #ffffff; font-size: 14px; font-weight: 500; padding: 8px 0;">• Collect final payment if balance is due</div>
                            <div style="color: #ffffff; font-size: 14px; font-weight: 500; padding: 8px 0;">• Report any issues to office immediately</div>
                        </div>
                    </div>
                </div>
                
        </div>
        
        <!-- Footer -->
        <div style="background: linear-gradient(135deg, #1f2937 0%, #111827 100%); color: #f9fafb; text-align: center; padding: 40px 32px;">
            <h4 style="margin: 0 0 20px; color: #ffffff; font-size: 20px; font-weight: 700; letter-spacing: 0.5px;">
                Wrap My Kitchen Solutions - Installation Team
            </h4>
            <div style="margin: 12px 0; font-size: 15px; color: #d1d5db; line-height: 1.6;">Questions or support needed? Contact the office immediately.</div>
            <div style="display: flex; flex-wrap: wrap; justify-content: center; gap: 24px; margin: 24px 0;">
                <div style="display: flex; align-items: center; gap: 8px; color: #e5e7eb; font-size: 14px;">
                    <span style="font-size: 16px;">📞</span>
                    <strong>Office:</strong> (XXX) XXX-XXXX
                </div>
                <div style="display: flex; align-items: center; gap: 8px; color: #e5e7eb; font-size: 14px;">
                    <span style="font-size: 16px;">📧</span>
                    <strong>Email:</strong> 
                    <a href="mailto:info@wrapmykitchen.com" style="color: #fbbf24; text-decoration: none; font-weight: 500;">
                        info@wrapmykitchen.com
                    </a>
                </div>
                <div style="display: flex; align-items: center; gap: 8px; color: #e5e7eb; font-size: 14px;">
                    <span style="font-size: 16px;">🌐</span>
                    <strong>Website:</strong> 
                    <a href="https://wrapmykitchen.com" style="color: #fbbf24; text-decoration: none; font-weight: 500;">
                        www.wrapmykitchen.com
                    </a>
                </div>
            </div>
            <div style="margin-top: 24px; padding-top: 24px; border-top: 1px solid #374151; font-size: 13px; color: #9ca3af; line-height: 1.6;">
                © 2025 Wrap My Kitchen Solutions. All rights reserved.<br>
                <strong style="color: #fbbf24;">Excellence in Every Installation</strong>
            </div>
        </div>
        
    </div>
    
</body>
</html>
        `.trim();
      }
      
      // Send the actual email using our email service
      try {
        await emailService.sendEmail({
          to: recipient,
          subject: subject,
          text: 'This email requires HTML support to view properly. Please use an HTML-enabled email client.',
          html: emailContent
        });
        
        console.log('=== EMAIL SENT SUCCESSFULLY ===');
        console.log('To:', recipient);
        console.log('Subject:', subject);
        console.log('==============================');
        
        res.json({ 
          message: "Email sent successfully", 
          recipient,
          subject,
          type
        });
      } catch (emailError) {
        console.error('Failed to send email:', emailError);
        res.status(500).json({ message: "Failed to send email notification" });
      }
    } catch (error) {
      console.error('Email sending error:', error);
      res.status(500).json({ message: "Failed to send email notification" });
    }
  });

  // =================== ADMIN ROUTES ===================
  
  // Admin middleware to check admin role
  const requireAdmin = (req: any, res: any, next: any) => {
    // For now, we'll skip real authentication and just check if admin role is in header
    const userRole = req.headers['x-user-role'];
    if (userRole !== 'admin') {
      return res.status(403).json({ message: "Admin access required" });
    }
    next();
  };





  // Admin Settings Management
  app.get("/api/admin/settings", async (req, res) => {
    try {
      const settings = await storage.getAdminSettings();
      res.json(settings);
    } catch (error) {
      res.status(500).json({ message: "Failed to fetch settings" });
    }
  });

  app.put("/api/admin/settings/:key", async (req, res) => {
    try {
      const { value } = req.body;
      const setting = await storage.updateAdminSetting(req.params.key, value);
      if (!setting) {
        return res.status(404).json({ message: "Setting not found" });
      }
      res.json(setting);
    } catch (error) {
      res.status(500).json({ message: "Failed to update setting" });
    }
  });

  // WMK Colors API
  app.get("/api/wmk-colors", async (req, res) => {
    try {
      const colors = await db.select().from(wmkColors).where(eq(wmkColors.is_active, true)).orderBy(wmkColors.code);
      res.json(colors);
    } catch (error) {
      console.error('Error fetching WMK colors:', error);
      res.status(500).json({ message: "Failed to fetch WMK colors" });
    }
  });

  // Admin Installers Management
  app.get("/api/admin/installers", async (req, res) => {
    try {
      const installers = await storage.getInstallers();
      res.json(installers);
    } catch (error) {
      res.status(500).json({ message: "Failed to fetch installers" });
    }
  });

  app.post("/api/admin/installers", async (req, res) => {
    try {
      const installerData = req.body;
      const installer = await storage.createInstaller(installerData);
      res.status(201).json(installer);
    } catch (error) {
      res.status(500).json({ message: "Failed to create installer" });
    }
  });

  app.put("/api/admin/installers/:id", async (req, res) => {
    try {
      const updates = req.body;
      const installer = await storage.updateInstaller(req.params.id, updates);
      if (!installer) {
        return res.status(404).json({ message: "Installer not found" });
      }
      res.json(installer);
    } catch (error) {
      res.status(500).json({ message: "Failed to update installer" });
    }
  });

  app.delete("/api/admin/installers/:id", async (req, res) => {
    try {
      const deleted = await storage.deleteInstaller(req.params.id);
      if (!deleted) {
        return res.status(404).json({ message: "Installer not found" });
      }
      res.status(204).send();
    } catch (error) {
      res.status(500).json({ message: "Failed to delete installer" });
    }
  });



  // Admin Email Templates Management
  app.get("/api/admin/email-templates", async (req, res) => {
    try {
      const templates = await storage.getEmailTemplates();
      res.json(templates);
    } catch (error) {
      res.status(500).json({ message: "Failed to fetch email templates" });
    }
  });

  app.post("/api/admin/email-templates", async (req, res) => {
    try {
      const templateData = req.body;
      const template = await storage.createEmailTemplate(templateData);
      res.status(201).json(template);
    } catch (error) {
      res.status(500).json({ message: "Failed to create email template" });
    }
  });

  app.put("/api/admin/email-templates/:id", async (req, res) => {
    try {
      const updates = req.body;
      const template = await storage.updateEmailTemplate(req.params.id, updates);
      if (!template) {
        return res.status(404).json({ message: "Email template not found" });
      }
      res.json(template);
    } catch (error) {
      res.status(500).json({ message: "Failed to update email template" });
    }
  });

  app.delete("/api/admin/email-templates/:id", async (req, res) => {
    try {
      const deleted = await storage.deleteEmailTemplate(req.params.id);
      if (!deleted) {
        return res.status(404).json({ message: "Email template not found" });
      }
      res.status(204).send();
    } catch (error) {
      res.status(500).json({ message: "Failed to delete email template" });
    }
  });

  // Admin SMTP Settings Management (using config file)
  app.get("/api/admin/smtp-settings", async (req, res) => {
    try {
      const fs = await import('fs/promises');
      const path = await import('path');
      const configPath = path.join(process.cwd(), 'server', 'config', 'smtp-config.json');
      
      try {
        const configData = await fs.readFile(configPath, 'utf8');
        const config = JSON.parse(configData);
        
        // Transform to match frontend expectations
        const settings = [{
          id: 1,
          name: 'SMTP Configuration',
          host: config.host,
          port: config.port,
          secure: config.secure,
          username: config.auth.user,
          password: config.auth.pass,
          from_email: config.from.email,
          from_name: config.from.name,
          is_active: config.isActive,
          created_at: new Date().toISOString(),
          updated_at: config.lastUpdated
        }];
        
        res.json(settings);
      } catch (error) {
        // If config file doesn't exist, return empty array
        res.json([]);
      }
    } catch (error) {
      console.error('Error reading SMTP config:', error);
      res.status(500).json({ message: "Failed to fetch SMTP settings" });
    }
  });

  app.post("/api/admin/smtp-settings", async (req, res) => {
    try {
      const fs = await import('fs/promises');
      const path = await import('path');
      const configPath = path.join(process.cwd(), 'server', 'config', 'smtp-config.json');
      
      const settingsData = req.body;
      
      // Transform frontend data to config format
      const config = {
        host: settingsData.host,
        port: settingsData.port,
        secure: settingsData.secure,
        auth: {
          user: settingsData.username,
          pass: settingsData.password
        },
        from: {
          email: settingsData.from_email,
          name: settingsData.from_name
        },
        isActive: settingsData.is_active,
        lastUpdated: new Date().toISOString()
      };
      
      // Ensure config directory exists
      const configDir = path.dirname(configPath);
      await fs.mkdir(configDir, { recursive: true });
      
      // Write config file
      await fs.writeFile(configPath, JSON.stringify(config, null, 2));
      
      // Return the saved settings in frontend format
      const response = {
        id: 1,
        name: settingsData.name || 'SMTP Configuration',
        ...settingsData
      };
      
      res.status(201).json(response);
    } catch (error) {
      console.error('Error saving SMTP config:', error);
      res.status(500).json({ message: "Failed to create SMTP settings" });
    }
  });

  app.put("/api/admin/smtp-settings/:id", async (req, res) => {
    try {
      const fs = await import('fs/promises');
      const path = await import('path');
      const configPath = path.join(process.cwd(), 'server', 'config', 'smtp-config.json');
      
      const updates = req.body;
      
      // Transform frontend data to config format
      const config = {
        host: updates.host,
        port: updates.port,
        secure: updates.secure,
        auth: {
          user: updates.username,
          pass: updates.password
        },
        from: {
          email: updates.from_email,
          name: updates.from_name
        },
        isActive: updates.is_active,
        lastUpdated: new Date().toISOString()
      };
      
      // Ensure config directory exists
      const configDir = path.dirname(configPath);
      await fs.mkdir(configDir, { recursive: true });
      
      // Write config file
      await fs.writeFile(configPath, JSON.stringify(config, null, 2));
      
      // Return the updated settings in frontend format
      const response = {
        id: parseInt(req.params.id),
        name: updates.name || 'SMTP Configuration',
        ...updates
      };
      
      res.json(response);
    } catch (error) {
      console.error('Error updating SMTP config:', error);
      res.status(500).json({ message: "Failed to update SMTP settings" });
    }
  });

  app.post("/api/admin/smtp-settings/test", async (req, res) => {
    try {
      const { test_email, ...smtpConfig } = req.body;
      
      if (!test_email) {
        return res.status(400).json({ message: "Test email address is required" });
      }

      // Save the config temporarily and send test email
      const fs = await import('fs/promises');
      const path = await import('path');
      const configPath = path.join(process.cwd(), 'server', 'config', 'smtp-config.json');
      
      // Update config with test data
      const config = {
        host: smtpConfig.host,
        port: smtpConfig.port,
        secure: smtpConfig.secure,
        auth: {
          user: smtpConfig.username,
          pass: smtpConfig.password
        },
        from: {
          email: smtpConfig.from_email,
          name: smtpConfig.from_name
        },
        isActive: true,
        lastUpdated: new Date().toISOString()
      };

      // Ensure config directory exists
      const configDir = path.dirname(configPath);
      await fs.mkdir(configDir, { recursive: true });
      
      // Write config file
      await fs.writeFile(configPath, JSON.stringify(config, null, 2));

      // Reinitialize email service to use new config
      const { emailService } = await import('./email-service');
      await emailService.initializeTransporter();

      // Send test email
      await emailService.sendEmail({
        to: test_email,
        subject: 'SMTP Configuration Test - WMK CRM',
        text: `Hello!

This is a test email to verify your SMTP configuration for the WMK CRM system.

SMTP Settings:
- Host: ${smtpConfig.host}
- Port: ${smtpConfig.port}
- Secure: ${smtpConfig.secure ? 'Yes (SSL)' : 'No (TLS)'}
- From: ${smtpConfig.from_name} <${smtpConfig.from_email}>

If you received this email, your SMTP configuration is working correctly!

Best regards,
WMK CRM System`
      });

      res.json({ message: "Test email sent successfully" });
    } catch (error) {
      console.error('SMTP test error:', error);
      res.status(500).json({ 
        message: "Failed to send test email", 
        error: error instanceof Error ? error.message : 'Unknown error'
      });
    }
  });

  // Admin Activity Log
  app.get("/api/admin/activity-logs", async (req, res) => {
    try {
      const { 
        search, 
        entity_type, 
        action, 
        days,
        limit = 50, 
        offset = 0 
      } = req.query;
      
      const activities = await storage.getActivityLogs({
        search: search as string,
        entity_type: entity_type as string,
        action: action as string,
        days: days ? parseInt(days as string) : undefined,
        limit: parseInt(limit as string),
        offset: parseInt(offset as string)
      });
      
      res.json(activities);
    } catch (error) {
      res.status(500).json({ message: "Failed to fetch activity logs" });
    }
  });

  // Calendar Events API
  app.get("/api/calendar/events", async (req, res) => {
    try {
      const events = await storage.getCalendarEvents();
      res.json(events);
    } catch (error) {
      console.error("Failed to fetch calendar events:", error);
      res.status(500).json({ message: "Failed to fetch calendar events" });
    }
  });

  // Test Google Calendar connection
  app.get("/api/calendar/test-google", async (req, res) => {
    try {
      const isConnected = await GoogleCalendarService.testConnection();
      res.json({ 
        connected: isConnected,
        message: isConnected ? "Google Calendar connection successful" : "Google Calendar connection failed"
      });
    } catch (error) {
      console.error("Google Calendar test failed:", error);
      res.status(500).json({ 
        connected: false, 
        message: "Google Calendar test failed",
        error: error.message 
      });
    }
  });

  app.post("/api/calendar/events", async (req, res) => {
    try {
      const eventData = insertCalendarEventSchema.parse(req.body);
      const event = await storage.createCalendarEvent(eventData);
      
      // Sync to Google Calendar if event was created successfully
      if (event) {
        try {
          const googleEventData = {
            title: event.title,
            description: event.description || undefined,
            start: event.start_date.toISOString(),
            end: event.end_date ? event.end_date.toISOString() : new Date(event.start_date.getTime() + 60*60*1000).toISOString(), // Default 1 hour if no end
            location: event.location || undefined,
          };
          
          const googleEventId = await GoogleCalendarService.createEvent(googleEventData);
          
          if (googleEventId) {
            // Update the local event with Google Calendar ID
            await storage.updateCalendarEvent(event.id.toString(), { google_event_id: googleEventId });
            console.log(`✅ Event synced to Google Calendar: ${googleEventId}`);
          }
        } catch (syncError) {
          console.error('⚠️ Failed to sync event to Google Calendar:', syncError);
          // Don't fail the main request if Google sync fails
        }
      }
      
      res.json(event);
    } catch (error) {
      if (error instanceof z.ZodError) {
        return res.status(400).json({ message: "Invalid event data", errors: error.errors });
      }
      console.error("Failed to create calendar event:", error);
      res.status(500).json({ message: "Failed to create calendar event" });
    }
  });

  app.put("/api/calendar/events/:id", async (req, res) => {
    try {
      const { id } = req.params;
      const updates = updateCalendarEventSchema.parse(req.body);
      
      // Get the existing event to check for Google Calendar ID
      const existingEvent = await storage.getCalendarEvent(id);
      const event = await storage.updateCalendarEvent(id, updates);
      
      if (!event) {
        return res.status(404).json({ message: "Calendar event not found" });
      }
      
      // Sync update to Google Calendar if event has Google Calendar ID
      if (existingEvent?.google_event_id) {
        try {
          const googleEventData = {
            title: event.title,
            description: event.description || undefined,
            start: event.start_date.toISOString(),
            end: event.end_date ? event.end_date.toISOString() : new Date(event.start_date.getTime() + 60*60*1000).toISOString(),
            location: event.location || undefined,
          };
          
          const success = await GoogleCalendarService.updateEvent(existingEvent.google_event_id, googleEventData);
          
          if (success) {
            console.log(`✅ Event updated in Google Calendar: ${existingEvent.google_event_id}`);
          }
        } catch (syncError) {
          console.error('⚠️ Failed to sync event update to Google Calendar:', syncError);
          // Don't fail the main request if Google sync fails
        }
      }
      
      res.json(event);
    } catch (error) {
      if (error instanceof z.ZodError) {
        return res.status(400).json({ message: "Invalid event data", errors: error.errors });
      }
      console.error("Failed to update calendar event:", error);
      res.status(500).json({ message: "Failed to update calendar event" });
    }
  });

  app.delete("/api/calendar/events/:id", async (req, res) => {
    try {
      const { id } = req.params;
      
      // Get the existing event to check for Google Calendar ID before deleting
      const existingEvent = await storage.getCalendarEvent(id);
      const success = await storage.deleteCalendarEvent(id);
      
      if (!success) {
        return res.status(404).json({ message: "Calendar event not found" });
      }
      
      // Delete from Google Calendar if event has Google Calendar ID
      if (existingEvent?.google_event_id) {
        try {
          const deleted = await GoogleCalendarService.deleteEvent(existingEvent.google_event_id);
          
          if (deleted) {
            console.log(`✅ Event deleted from Google Calendar: ${existingEvent.google_event_id}`);
          }
        } catch (syncError) {
          console.error('⚠️ Failed to delete event from Google Calendar:', syncError);
          // Don't fail the main request if Google sync fails
        }
      }
      
      res.json({ message: "Calendar event deleted successfully" });
    } catch (error) {
      console.error("Failed to delete calendar event:", error);
      res.status(500).json({ message: "Failed to delete calendar event" });
    }
  });

  // Admin User Management
  app.get("/api/admin/users", async (req, res) => {
    try {
      const users = await storage.getUsers();
      res.json(users.map(user => ({ ...user, password: undefined }))); // Don't send passwords
    } catch (error) {
      res.status(500).json({ message: "Failed to fetch users" });
    }
  });

  app.post("/api/admin/users", async (req, res) => {
    try {
      const { username, password, full_name, email, role, permissions, is_active } = req.body;
      
      if (!username || !password) {
        return res.status(400).json({ message: "Username and password are required" });
      }

      const newUser = await storage.createUser({
        username: username.toLowerCase(),
        password,
        full_name: full_name || username,
        email: email || null,
        role: role || 'sales_rep',
        permissions: permissions || [],
        is_active: is_active !== undefined ? is_active : true
      });

      res.json(newUser);
    } catch (error) {
      console.error("Create user error:", error);
      res.status(500).json({ message: "Failed to create user" });
    }
  });

  app.put("/api/admin/users/:id", async (req, res) => {
    try {
      const { id } = req.params;
      const updates = req.body;
      
      console.log('Update user request:', { id, updates });
      
      const updatedUser = await storage.updateUser(id, updates);
      if (!updatedUser) {
        console.log('User not found:', id);
        return res.status(404).json({ message: "User not found" });
      }
      
      console.log('User updated successfully:', updatedUser);
      res.json(updatedUser);
    } catch (error) {
      console.error('Update user error:', error);
      res.status(500).json({ message: "Failed to update user" });
    }
  });

  app.delete("/api/admin/users/:id", async (req, res) => {
    try {
      const { id } = req.params;
      const deleted = await storage.deleteUser(id);
      
      if (!deleted) {
        return res.status(404).json({ message: "User not found" });
      }
      
      res.status(204).send();
    } catch (error) {
      res.status(500).json({ message: "Failed to delete user" });
    }
  });

  // Reset user password
  app.post("/api/admin/users/:id/reset-password", async (req, res) => {
    try {
      const { id } = req.params;
      const { password } = req.body;
      
      if (!password) {
        return res.status(400).json({ message: "Password is required" });
      }
      
      const updatedUser = await storage.updateUser(id, { password });
      if (!updatedUser) {
        return res.status(404).json({ message: "User not found" });
      }
      
      res.json({ message: "Password reset successfully" });
    } catch (error) {
      res.status(500).json({ message: "Failed to reset password" });
    }
  });

  // Admin Dashboard Stats
  app.get("/api/admin/dashboard-stats", async (req, res) => {
    try {
      const users = await storage.getUsers();
      const installers = await storage.getInstallers();
      const leads = await storage.getLeads();
      const emailTemplates = await storage.getEmailTemplates();
      const leadOrigins = await storage.getLeadOrigins();
      
      const stats = {
        totalUsers: users.length,
        activeUsers: users.filter(u => u.role === 'sales_rep' && u.is_active !== false).length,
        adminUsers: users.filter(u => u.role === 'admin').length,
        totalInstallers: installers.length,
        activeInstallers: installers.filter(i => i.status === 'active').length,
        totalLeads: leads.length,
        totalEmailTemplates: emailTemplates.length,
        activeEmailTemplates: emailTemplates.filter(t => t.is_active).length,
        totalLeadOrigins: leadOrigins.length,
        activeLeadOrigins: leadOrigins.filter(o => o.is_active).length
      };
      
      res.json(stats);
    } catch (error) {
      res.status(500).json({ message: "Failed to fetch admin dashboard stats" });
    }
  });

  // Repair Requests endpoints
  app.get("/api/repair-requests", async (req, res) => {
    try {
      const requests = await db.select().from(repairRequests).orderBy(desc(repairRequests.created_at));
      res.json(requests);
    } catch (error) {
      console.error('Error fetching repair requests:', error);
      res.status(500).json({ error: 'Failed to fetch repair requests' });
    }
  });

  app.post("/api/repair-requests", async (req, res) => {
    try {
      const validatedData = insertRepairRequestSchema.parse(req.body);
      
      const [newRequest] = await db.insert(repairRequests).values({
        ...validatedData,
        date_reported: new Date(validatedData.date_reported || new Date()),
      });

      res.json({ id: newRequest.insertId, ...validatedData });
    } catch (error) {
      console.error('Error creating repair request:', error);
      res.status(400).json({ error: 'Failed to create repair request' });
    }
  });

  app.put("/api/repair-requests/:id", async (req, res) => {
    try {
      const { id } = req.params;
      const updates = req.body;
      
      await db.update(repairRequests)
        .set({
          ...updates,
          updated_at: new Date(),
        })
        .where(eq(repairRequests.id, parseInt(id)));

      res.json({ message: 'Repair request updated successfully' });
    } catch (error) {
      console.error('Error updating repair request:', error);
      res.status(500).json({ error: 'Failed to update repair request' });
    }
  });

  app.delete("/api/repair-requests/:id", async (req, res) => {
    try {
      const { id } = req.params;
      
      await db.delete(repairRequests).where(eq(repairRequests.id, parseInt(id)));
      
      res.json({ message: 'Repair request deleted successfully' });
    } catch (error) {
      console.error('Error deleting repair request:', error);
      res.status(500).json({ error: 'Failed to delete repair request' });
    }
  });

  // Completed Projects Search endpoint
  app.get("/api/completed-projects/search", async (req, res) => {
    try {
      const { q } = req.query;
      
      if (!q || typeof q !== 'string') {
        return res.json([]);
      }
      
      const searchTerm = q.trim();
      
      // Search for leads that are marked as "Sold" and have installation_date (completed projects)
      const results = await db.select()
        .from(leadsTable)
        .where(
          and(
            eq(leadsTable.remarks, 'Sold'),
            or(
              like(leadsTable.email, `%${searchTerm}%`),
              like(leadsTable.phone, `%${searchTerm}%`),
              like(leadsTable.name, `%${searchTerm}%`)
            )
          )
        )
        .orderBy(desc(leadsTable.installation_date))
        .limit(10);
      
      res.json(results);
    } catch (error) {
      console.error('Error searching completed projects:', error);
      res.status(500).json({ error: 'Failed to search completed projects' });
    }
  });

  const httpServer = createServer(app);
  return httpServer;
}
